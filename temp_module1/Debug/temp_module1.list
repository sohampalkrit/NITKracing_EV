
temp_module1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009484  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  08009598  08009598  0000a598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cb0  08009cb0  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009cb0  08009cb0  0000acb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cb8  08009cb8  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cb8  08009cb8  0000acb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009cbc  08009cbc  0000acbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009cc0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  200001d4  08009e94  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08009e94  0000b490  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009388  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f28  00000000  00000000  00014585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  000164b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000071f  00000000  00000000  00016e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ec1  00000000  00000000  00017547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b49b  00000000  00000000  00030408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d42e  00000000  00000000  0003b8a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8cd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c58  00000000  00000000  000c8d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000cc96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800957c 	.word	0x0800957c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800957c 	.word	0x0800957c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_d2lz>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	2200      	movs	r2, #0
 8001160:	2300      	movs	r3, #0
 8001162:	4604      	mov	r4, r0
 8001164:	460d      	mov	r5, r1
 8001166:	f7ff fc29 	bl	80009bc <__aeabi_dcmplt>
 800116a:	b928      	cbnz	r0, 8001178 <__aeabi_d2lz+0x1c>
 800116c:	4620      	mov	r0, r4
 800116e:	4629      	mov	r1, r5
 8001170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001174:	f000 b80a 	b.w	800118c <__aeabi_d2ulz>
 8001178:	4620      	mov	r0, r4
 800117a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800117e:	f000 f805 	bl	800118c <__aeabi_d2ulz>
 8001182:	4240      	negs	r0, r0
 8001184:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001188:	bd38      	pop	{r3, r4, r5, pc}
 800118a:	bf00      	nop

0800118c <__aeabi_d2ulz>:
 800118c:	b5d0      	push	{r4, r6, r7, lr}
 800118e:	2200      	movs	r2, #0
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <__aeabi_d2ulz+0x34>)
 8001192:	4606      	mov	r6, r0
 8001194:	460f      	mov	r7, r1
 8001196:	f7ff f99f 	bl	80004d8 <__aeabi_dmul>
 800119a:	f7ff fc75 	bl	8000a88 <__aeabi_d2uiz>
 800119e:	4604      	mov	r4, r0
 80011a0:	f7ff f920 	bl	80003e4 <__aeabi_ui2d>
 80011a4:	2200      	movs	r2, #0
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <__aeabi_d2ulz+0x38>)
 80011a8:	f7ff f996 	bl	80004d8 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4630      	mov	r0, r6
 80011b2:	4639      	mov	r1, r7
 80011b4:	f7fe ffd8 	bl	8000168 <__aeabi_dsub>
 80011b8:	f7ff fc66 	bl	8000a88 <__aeabi_d2uiz>
 80011bc:	4621      	mov	r1, r4
 80011be:	bdd0      	pop	{r4, r6, r7, pc}
 80011c0:	3df00000 	.word	0x3df00000
 80011c4:	41f00000 	.word	0x41f00000

080011c8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011d0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011d4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d013      	beq.n	8001208 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80011e0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011e4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80011e8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d00b      	beq.n	8001208 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80011f0:	e000      	b.n	80011f4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80011f2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80011f4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0f9      	beq.n	80011f2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80011fe:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001208:	687b      	ldr	r3, [r7, #4]
}
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <main>:
void readSensors(void);
void calculateTemperatures(float *Tmax, float *Tmin, float *avg);
void Error_Handler(void);
void UART_Print(char* message);

int main(void) {
 8001214:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001218:	b098      	sub	sp, #96	@ 0x60
 800121a:	af06      	add	r7, sp, #24
    HAL_Init();
 800121c:	f000 ff80 	bl	8002120 <HAL_Init>
    SystemClock_Config();
 8001220:	f000 fc9c 	bl	8001b5c <SystemClock_Config>

    /* Initialize peripherals */
    MX_GPIO_Init();
 8001224:	f000 fc4e 	bl	8001ac4 <MX_GPIO_Init>
    MX_ADC1_Init();
 8001228:	f000 fbbc 	bl	80019a4 <MX_ADC1_Init>
    MX_CAN_Init();
 800122c:	f000 fbe8 	bl	8001a00 <MX_CAN_Init>
    MX_USART1_Init();
 8001230:	f000 fc1c 	bl	8001a6c <MX_USART1_Init>

    /* Print startup message */
    UART_Print("Temperature Module Starting...\r\n");
 8001234:	4893      	ldr	r0, [pc, #588]	@ (8001484 <main+0x270>)
 8001236:	f000 fb8b 	bl	8001950 <UART_Print>
    UART_Print("Using Thermistor Beta Model for Temperature Calculation\r\n");
 800123a:	4893      	ldr	r0, [pc, #588]	@ (8001488 <main+0x274>)
 800123c:	f000 fb88 	bl	8001950 <UART_Print>

    /* Start CAN peripheral with error checking */
    if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8001240:	4892      	ldr	r0, [pc, #584]	@ (800148c <main+0x278>)
 8001242:	f001 febd 	bl	8002fc0 <HAL_CAN_Start>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d005      	beq.n	8001258 <main+0x44>
        UART_Print("ERROR: CAN initialization failed\r\n");
 800124c:	4890      	ldr	r0, [pc, #576]	@ (8001490 <main+0x27c>)
 800124e:	f000 fb7f 	bl	8001950 <UART_Print>
        Error_Handler();
 8001252:	f000 fce7 	bl	8001c24 <Error_Handler>
 8001256:	e002      	b.n	800125e <main+0x4a>
    } else {
        UART_Print("CAN Bus Initialized\r\n");
 8001258:	488e      	ldr	r0, [pc, #568]	@ (8001494 <main+0x280>)
 800125a:	f000 fb79 	bl	8001950 <UART_Print>
    }

    /* Configure CAN filter to accept all messages */
    CAN_FilterTypeDef canFilterConfig;
    canFilterConfig.FilterBank = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	@ 0x24
    canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001262:	2300      	movs	r3, #0
 8001264:	62bb      	str	r3, [r7, #40]	@ 0x28
    canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001266:	2301      	movs	r3, #1
 8001268:	62fb      	str	r3, [r7, #44]	@ 0x2c
    canFilterConfig.FilterIdHigh = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
    canFilterConfig.FilterIdLow = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
    canFilterConfig.FilterMaskIdHigh = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
    canFilterConfig.FilterMaskIdLow = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
    canFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
    canFilterConfig.FilterActivation = ENABLE;
 800127e:	2301      	movs	r3, #1
 8001280:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_CAN_ConfigFilter(&hcan, &canFilterConfig) != HAL_OK) {
 8001282:	f107 0310 	add.w	r3, r7, #16
 8001286:	4619      	mov	r1, r3
 8001288:	4880      	ldr	r0, [pc, #512]	@ (800148c <main+0x278>)
 800128a:	f001 fdd0 	bl	8002e2e <HAL_CAN_ConfigFilter>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d004      	beq.n	800129e <main+0x8a>
        UART_Print("ERROR: CAN filter configuration failed\r\n");
 8001294:	4880      	ldr	r0, [pc, #512]	@ (8001498 <main+0x284>)
 8001296:	f000 fb5b 	bl	8001950 <UART_Print>
        Error_Handler();
 800129a:	f000 fcc3 	bl	8001c24 <Error_Handler>
    }

    /* Main loop */
    while (1) {
        /* Toggle LED to indicate system is running */
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800129e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012a2:	487e      	ldr	r0, [pc, #504]	@ (800149c <main+0x288>)
 80012a4:	f002 fc76 	bl	8003b94 <HAL_GPIO_TogglePin>

        /* Read sensor data */
        readSensors();
 80012a8:	f000 f91a 	bl	80014e0 <readSensors>

        float Tmax, Tmin, avg;
        calculateTemperatures(&Tmax, &Tmin, &avg);
 80012ac:	1d3a      	adds	r2, r7, #4
 80012ae:	f107 0108 	add.w	r1, r7, #8
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 faea 	bl	8001890 <calculateTemperatures>

        /* Send temperature data via UART */
        sprintf(uartBuffer, "Temperatures: ");
 80012bc:	4978      	ldr	r1, [pc, #480]	@ (80014a0 <main+0x28c>)
 80012be:	4879      	ldr	r0, [pc, #484]	@ (80014a4 <main+0x290>)
 80012c0:	f004 fb4c 	bl	800595c <siprintf>
        UART_Print(uartBuffer);
 80012c4:	4877      	ldr	r0, [pc, #476]	@ (80014a4 <main+0x290>)
 80012c6:	f000 fb43 	bl	8001950 <UART_Print>

        for (int i = 0; i < NUM_SENSORS; i++) {
 80012ca:	2300      	movs	r3, #0
 80012cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80012ce:	e017      	b.n	8001300 <main+0xec>
            sprintf(uartBuffer, "Sensor %d: %.2f°C | ", i+1, temperature[i]);
 80012d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012d2:	1c5c      	adds	r4, r3, #1
 80012d4:	4a74      	ldr	r2, [pc, #464]	@ (80014a8 <main+0x294>)
 80012d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f8a3 	bl	8000428 <__aeabi_f2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	e9cd 2300 	strd	r2, r3, [sp]
 80012ea:	4622      	mov	r2, r4
 80012ec:	496f      	ldr	r1, [pc, #444]	@ (80014ac <main+0x298>)
 80012ee:	486d      	ldr	r0, [pc, #436]	@ (80014a4 <main+0x290>)
 80012f0:	f004 fb34 	bl	800595c <siprintf>
            UART_Print(uartBuffer);
 80012f4:	486b      	ldr	r0, [pc, #428]	@ (80014a4 <main+0x290>)
 80012f6:	f000 fb2b 	bl	8001950 <UART_Print>
        for (int i = 0; i < NUM_SENSORS; i++) {
 80012fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012fc:	3301      	adds	r3, #1
 80012fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8001300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001302:	2b01      	cmp	r3, #1
 8001304:	dde4      	ble.n	80012d0 <main+0xbc>
        }

        sprintf(uartBuffer, "\r\nSummary - Max: %.2f°C | Min: %.2f°C | Avg: %.2f°C | Errors: %lu\r\n",
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f88d 	bl	8000428 <__aeabi_f2d>
 800130e:	4680      	mov	r8, r0
 8001310:	4689      	mov	r9, r1
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f887 	bl	8000428 <__aeabi_f2d>
 800131a:	4604      	mov	r4, r0
 800131c:	460d      	mov	r5, r1
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f881 	bl	8000428 <__aeabi_f2d>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4961      	ldr	r1, [pc, #388]	@ (80014b0 <main+0x29c>)
 800132c:	6809      	ldr	r1, [r1, #0]
 800132e:	9104      	str	r1, [sp, #16]
 8001330:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001334:	e9cd 4500 	strd	r4, r5, [sp]
 8001338:	4642      	mov	r2, r8
 800133a:	464b      	mov	r3, r9
 800133c:	495d      	ldr	r1, [pc, #372]	@ (80014b4 <main+0x2a0>)
 800133e:	4859      	ldr	r0, [pc, #356]	@ (80014a4 <main+0x290>)
 8001340:	f004 fb0c 	bl	800595c <siprintf>
                Tmax, Tmin, avg, errorCount);
        UART_Print(uartBuffer);
 8001344:	4857      	ldr	r0, [pc, #348]	@ (80014a4 <main+0x290>)
 8001346:	f000 fb03 	bl	8001950 <UART_Print>

        /* Prepare CAN message */
        TxHeader.ExtId = 0x1839F380;
 800134a:	4b5b      	ldr	r3, [pc, #364]	@ (80014b8 <main+0x2a4>)
 800134c:	4a5b      	ldr	r2, [pc, #364]	@ (80014bc <main+0x2a8>)
 800134e:	605a      	str	r2, [r3, #4]
        TxHeader.IDE = CAN_ID_EXT;
 8001350:	4b59      	ldr	r3, [pc, #356]	@ (80014b8 <main+0x2a4>)
 8001352:	2204      	movs	r2, #4
 8001354:	609a      	str	r2, [r3, #8]
        TxHeader.RTR = CAN_RTR_DATA;
 8001356:	4b58      	ldr	r3, [pc, #352]	@ (80014b8 <main+0x2a4>)
 8001358:	2200      	movs	r2, #0
 800135a:	60da      	str	r2, [r3, #12]
        TxHeader.DLC = 8;
 800135c:	4b56      	ldr	r3, [pc, #344]	@ (80014b8 <main+0x2a4>)
 800135e:	2208      	movs	r2, #8
 8001360:	611a      	str	r2, [r3, #16]

        /* Pack data - using multiplication to preserve decimal places */
        int16_t maxTemp = (int16_t)(Tmax * 10);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4956      	ldr	r1, [pc, #344]	@ (80014c0 <main+0x2ac>)
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fd0c 	bl	8000d84 <__aeabi_fmul>
 800136c:	4603      	mov	r3, r0
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fece 	bl	8001110 <__aeabi_f2iz>
 8001374:	4603      	mov	r3, r0
 8001376:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        int16_t minTemp = (int16_t)(Tmin * 10);
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	4950      	ldr	r1, [pc, #320]	@ (80014c0 <main+0x2ac>)
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fd00 	bl	8000d84 <__aeabi_fmul>
 8001384:	4603      	mov	r3, r0
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fec2 	bl	8001110 <__aeabi_f2iz>
 800138c:	4603      	mov	r3, r0
 800138e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        int16_t avgTemp = (int16_t)(avg * 10);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	494b      	ldr	r1, [pc, #300]	@ (80014c0 <main+0x2ac>)
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fcf5 	bl	8000d84 <__aeabi_fmul>
 800139a:	4603      	mov	r3, r0
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff feb7 	bl	8001110 <__aeabi_f2iz>
 80013a2:	4603      	mov	r3, r0
 80013a4:	87bb      	strh	r3, [r7, #60]	@ 0x3c

        TxData[0] = (uint8_t)(maxTemp >> 8);
 80013a6:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 80013aa:	121b      	asrs	r3, r3, #8
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	4b44      	ldr	r3, [pc, #272]	@ (80014c4 <main+0x2b0>)
 80013b2:	701a      	strb	r2, [r3, #0]
        TxData[1] = (uint8_t)(maxTemp & 0xFF);
 80013b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4b42      	ldr	r3, [pc, #264]	@ (80014c4 <main+0x2b0>)
 80013bc:	705a      	strb	r2, [r3, #1]
        TxData[2] = (uint8_t)(minTemp >> 8);
 80013be:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 80013c2:	121b      	asrs	r3, r3, #8
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	4b3e      	ldr	r3, [pc, #248]	@ (80014c4 <main+0x2b0>)
 80013ca:	709a      	strb	r2, [r3, #2]
        TxData[3] = (uint8_t)(minTemp & 0xFF);
 80013cc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b3c      	ldr	r3, [pc, #240]	@ (80014c4 <main+0x2b0>)
 80013d2:	70da      	strb	r2, [r3, #3]
        TxData[4] = (uint8_t)(avgTemp >> 8);
 80013d4:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 80013d8:	121b      	asrs	r3, r3, #8
 80013da:	b21b      	sxth	r3, r3
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4b39      	ldr	r3, [pc, #228]	@ (80014c4 <main+0x2b0>)
 80013e0:	711a      	strb	r2, [r3, #4]
        TxData[5] = (uint8_t)(avgTemp & 0xFF);
 80013e2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4b37      	ldr	r3, [pc, #220]	@ (80014c4 <main+0x2b0>)
 80013e8:	715a      	strb	r2, [r3, #5]
        TxData[6] = NUM_SENSORS;
 80013ea:	4b36      	ldr	r3, [pc, #216]	@ (80014c4 <main+0x2b0>)
 80013ec:	2202      	movs	r2, #2
 80013ee:	719a      	strb	r2, [r3, #6]
        TxData[7] = errorCount > 255 ? 255 : (uint8_t)errorCount;
 80013f0:	4b2f      	ldr	r3, [pc, #188]	@ (80014b0 <main+0x29c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2bff      	cmp	r3, #255	@ 0xff
 80013f6:	d803      	bhi.n	8001400 <main+0x1ec>
 80013f8:	4b2d      	ldr	r3, [pc, #180]	@ (80014b0 <main+0x29c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	e000      	b.n	8001402 <main+0x1ee>
 8001400:	23ff      	movs	r3, #255	@ 0xff
 8001402:	4a30      	ldr	r2, [pc, #192]	@ (80014c4 <main+0x2b0>)
 8001404:	71d3      	strb	r3, [r2, #7]

        /* Transmit CAN message with retry mechanism */
        uint8_t retryCount = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
        HAL_StatusTypeDef canStatus;

        do {
            canStatus = HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 800140c:	4b2e      	ldr	r3, [pc, #184]	@ (80014c8 <main+0x2b4>)
 800140e:	4a2d      	ldr	r2, [pc, #180]	@ (80014c4 <main+0x2b0>)
 8001410:	4929      	ldr	r1, [pc, #164]	@ (80014b8 <main+0x2a4>)
 8001412:	481e      	ldr	r0, [pc, #120]	@ (800148c <main+0x278>)
 8001414:	f001 fe18 	bl	8003048 <HAL_CAN_AddTxMessage>
 8001418:	4603      	mov	r3, r0
 800141a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

            if (canStatus != HAL_OK) {
 800141e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001422:	2b00      	cmp	r3, #0
 8001424:	d011      	beq.n	800144a <main+0x236>
                retryCount++;
 8001426:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800142a:	3301      	adds	r3, #1
 800142c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
                sprintf(uartBuffer, "CAN TX Retry %d/3\r\n", retryCount);
 8001430:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001434:	461a      	mov	r2, r3
 8001436:	4925      	ldr	r1, [pc, #148]	@ (80014cc <main+0x2b8>)
 8001438:	481a      	ldr	r0, [pc, #104]	@ (80014a4 <main+0x290>)
 800143a:	f004 fa8f 	bl	800595c <siprintf>
                UART_Print(uartBuffer);
 800143e:	4819      	ldr	r0, [pc, #100]	@ (80014a4 <main+0x290>)
 8001440:	f000 fa86 	bl	8001950 <UART_Print>
                HAL_Delay(10);
 8001444:	200a      	movs	r0, #10
 8001446:	f000 fecd 	bl	80021e4 <HAL_Delay>
            }
        } while (canStatus != HAL_OK && retryCount < 3);
 800144a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <main+0x246>
 8001452:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001456:	2b02      	cmp	r3, #2
 8001458:	d9d8      	bls.n	800140c <main+0x1f8>

        if (canStatus == HAL_OK) {
 800145a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800145e:	2b00      	cmp	r3, #0
 8001460:	d103      	bne.n	800146a <main+0x256>
            UART_Print("CAN message sent successfully\r\n");
 8001462:	481b      	ldr	r0, [pc, #108]	@ (80014d0 <main+0x2bc>)
 8001464:	f000 fa74 	bl	8001950 <UART_Print>
 8001468:	e004      	b.n	8001474 <main+0x260>
        } else {
            UART_Print("ERROR: Failed to send CAN message\r\n");
 800146a:	481a      	ldr	r0, [pc, #104]	@ (80014d4 <main+0x2c0>)
 800146c:	f000 fa70 	bl	8001950 <UART_Print>
            Error_Handler();
 8001470:	f000 fbd8 	bl	8001c24 <Error_Handler>
        }

        /* Print separator for readability */
        UART_Print("----------------------------------------\r\n");
 8001474:	4818      	ldr	r0, [pc, #96]	@ (80014d8 <main+0x2c4>)
 8001476:	f000 fa6b 	bl	8001950 <UART_Print>

        HAL_Delay(1000);  // 1 second delay between measurements
 800147a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800147e:	f000 feb1 	bl	80021e4 <HAL_Delay>
    while (1) {
 8001482:	e70c      	b.n	800129e <main+0x8a>
 8001484:	08009598 	.word	0x08009598
 8001488:	080095bc 	.word	0x080095bc
 800148c:	20000220 	.word	0x20000220
 8001490:	080095f8 	.word	0x080095f8
 8001494:	0800961c 	.word	0x0800961c
 8001498:	08009634 	.word	0x08009634
 800149c:	40011000 	.word	0x40011000
 80014a0:	08009660 	.word	0x08009660
 80014a4:	200002bc 	.word	0x200002bc
 80014a8:	200002b0 	.word	0x200002b0
 80014ac:	08009670 	.word	0x08009670
 80014b0:	200002b8 	.word	0x200002b8
 80014b4:	08009688 	.word	0x08009688
 80014b8:	2000028c 	.word	0x2000028c
 80014bc:	1839f380 	.word	0x1839f380
 80014c0:	41200000 	.word	0x41200000
 80014c4:	200002a4 	.word	0x200002a4
 80014c8:	200002ac 	.word	0x200002ac
 80014cc:	080096d0 	.word	0x080096d0
 80014d0:	080096e4 	.word	0x080096e4
 80014d4:	08009704 	.word	0x08009704
 80014d8:	08009728 	.word	0x08009728
 80014dc:	00000000 	.word	0x00000000

080014e0 <readSensors>:
    }
}

void readSensors(void) {
 80014e0:	b5b0      	push	{r4, r5, r7, lr}
 80014e2:	b08c      	sub	sp, #48	@ 0x30
 80014e4:	af02      	add	r7, sp, #8
    ADC_ChannelConfTypeDef sConfig = {0};
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
    uint32_t adcChannels[NUM_SENSORS] = {ADC_CHANNEL_1, ADC_CHANNEL_2}; // PA1, PA2
 80014f2:	4ab1      	ldr	r2, [pc, #708]	@ (80017b8 <readSensors+0x2d8>)
 80014f4:	463b      	mov	r3, r7
 80014f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014fa:	e883 0003 	stmia.w	r3, {r0, r1}

    for (int i = 0; i < NUM_SENSORS; i++) {
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	@ 0x24
 8001502:	e1ac      	b.n	800185e <readSensors+0x37e>
        /* Configure ADC channel */
        sConfig.Channel = adcChannels[i];
 8001504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	3328      	adds	r3, #40	@ 0x28
 800150a:	443b      	add	r3, r7
 800150c:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001510:	60bb      	str	r3, [r7, #8]
        sConfig.Rank = 1;
 8001512:	2301      	movs	r3, #1
 8001514:	60fb      	str	r3, [r7, #12]
        sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001516:	2307      	movs	r3, #7
 8001518:	613b      	str	r3, [r7, #16]

        if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	4619      	mov	r1, r3
 8001520:	48a6      	ldr	r0, [pc, #664]	@ (80017bc <readSensors+0x2dc>)
 8001522:	f001 f947 	bl	80027b4 <HAL_ADC_ConfigChannel>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d014      	beq.n	8001556 <readSensors+0x76>
            sprintf(uartBuffer, "ERROR: ADC channel %d config failed\r\n", i+1);
 800152c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152e:	3301      	adds	r3, #1
 8001530:	461a      	mov	r2, r3
 8001532:	49a3      	ldr	r1, [pc, #652]	@ (80017c0 <readSensors+0x2e0>)
 8001534:	48a3      	ldr	r0, [pc, #652]	@ (80017c4 <readSensors+0x2e4>)
 8001536:	f004 fa11 	bl	800595c <siprintf>
            UART_Print(uartBuffer);
 800153a:	48a2      	ldr	r0, [pc, #648]	@ (80017c4 <readSensors+0x2e4>)
 800153c:	f000 fa08 	bl	8001950 <UART_Print>
            temperature[i] = 25.0f; // Default safe value
 8001540:	4aa1      	ldr	r2, [pc, #644]	@ (80017c8 <readSensors+0x2e8>)
 8001542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001544:	49a1      	ldr	r1, [pc, #644]	@ (80017cc <readSensors+0x2ec>)
 8001546:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            errorCount++;
 800154a:	4ba1      	ldr	r3, [pc, #644]	@ (80017d0 <readSensors+0x2f0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	3301      	adds	r3, #1
 8001550:	4a9f      	ldr	r2, [pc, #636]	@ (80017d0 <readSensors+0x2f0>)
 8001552:	6013      	str	r3, [r2, #0]
            continue;
 8001554:	e180      	b.n	8001858 <readSensors+0x378>
        }

        /* Start ADC conversion */
        HAL_ADC_Start(&hadc1);
 8001556:	4899      	ldr	r0, [pc, #612]	@ (80017bc <readSensors+0x2dc>)
 8001558:	f000 ff40 	bl	80023dc <HAL_ADC_Start>

        /* Check for conversion completion */
        if (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK) {
 800155c:	2164      	movs	r1, #100	@ 0x64
 800155e:	4897      	ldr	r0, [pc, #604]	@ (80017bc <readSensors+0x2dc>)
 8001560:	f001 f816 	bl	8002590 <HAL_ADC_PollForConversion>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d017      	beq.n	800159a <readSensors+0xba>
            sprintf(uartBuffer, "ADC %d conversion timeout\r\n", i+1);
 800156a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156c:	3301      	adds	r3, #1
 800156e:	461a      	mov	r2, r3
 8001570:	4998      	ldr	r1, [pc, #608]	@ (80017d4 <readSensors+0x2f4>)
 8001572:	4894      	ldr	r0, [pc, #592]	@ (80017c4 <readSensors+0x2e4>)
 8001574:	f004 f9f2 	bl	800595c <siprintf>
            UART_Print(uartBuffer);
 8001578:	4892      	ldr	r0, [pc, #584]	@ (80017c4 <readSensors+0x2e4>)
 800157a:	f000 f9e9 	bl	8001950 <UART_Print>
            temperature[i] = 25.0f;
 800157e:	4a92      	ldr	r2, [pc, #584]	@ (80017c8 <readSensors+0x2e8>)
 8001580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001582:	4992      	ldr	r1, [pc, #584]	@ (80017cc <readSensors+0x2ec>)
 8001584:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            errorCount++;
 8001588:	4b91      	ldr	r3, [pc, #580]	@ (80017d0 <readSensors+0x2f0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	3301      	adds	r3, #1
 800158e:	4a90      	ldr	r2, [pc, #576]	@ (80017d0 <readSensors+0x2f0>)
 8001590:	6013      	str	r3, [r2, #0]
            HAL_ADC_Stop(&hadc1);
 8001592:	488a      	ldr	r0, [pc, #552]	@ (80017bc <readSensors+0x2dc>)
 8001594:	f000 ffd0 	bl	8002538 <HAL_ADC_Stop>
            continue;
 8001598:	e15e      	b.n	8001858 <readSensors+0x378>
        }

        uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 800159a:	4888      	ldr	r0, [pc, #544]	@ (80017bc <readSensors+0x2dc>)
 800159c:	f001 f8fe 	bl	800279c <HAL_ADC_GetValue>
 80015a0:	6238      	str	r0, [r7, #32]
        HAL_ADC_Stop(&hadc1);
 80015a2:	4886      	ldr	r0, [pc, #536]	@ (80017bc <readSensors+0x2dc>)
 80015a4:	f000 ffc8 	bl	8002538 <HAL_ADC_Stop>

        /* Debug raw ADC output */
        sprintf(uartBuffer, "ADC%d Raw: %lu | ", i+1, adcValue);
 80015a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	498a      	ldr	r1, [pc, #552]	@ (80017d8 <readSensors+0x2f8>)
 80015b0:	4884      	ldr	r0, [pc, #528]	@ (80017c4 <readSensors+0x2e4>)
 80015b2:	f004 f9d3 	bl	800595c <siprintf>
        UART_Print(uartBuffer);
 80015b6:	4883      	ldr	r0, [pc, #524]	@ (80017c4 <readSensors+0x2e4>)
 80015b8:	f000 f9ca 	bl	8001950 <UART_Print>

        /* Check for open circuit (ADC near VCC) or short circuit (ADC near 0) */
        if (adcValue > 4000) { // Open circuit (thermistor disconnected)
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80015c2:	d911      	bls.n	80015e8 <readSensors+0x108>
            sprintf(uartBuffer, "OPEN CIRCUIT | ");
 80015c4:	4985      	ldr	r1, [pc, #532]	@ (80017dc <readSensors+0x2fc>)
 80015c6:	487f      	ldr	r0, [pc, #508]	@ (80017c4 <readSensors+0x2e4>)
 80015c8:	f004 f9c8 	bl	800595c <siprintf>
            UART_Print(uartBuffer);
 80015cc:	487d      	ldr	r0, [pc, #500]	@ (80017c4 <readSensors+0x2e4>)
 80015ce:	f000 f9bf 	bl	8001950 <UART_Print>
            temperature[i] = 25.0f; // Default value
 80015d2:	4a7d      	ldr	r2, [pc, #500]	@ (80017c8 <readSensors+0x2e8>)
 80015d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d6:	497d      	ldr	r1, [pc, #500]	@ (80017cc <readSensors+0x2ec>)
 80015d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            errorCount++;
 80015dc:	4b7c      	ldr	r3, [pc, #496]	@ (80017d0 <readSensors+0x2f0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	3301      	adds	r3, #1
 80015e2:	4a7b      	ldr	r2, [pc, #492]	@ (80017d0 <readSensors+0x2f0>)
 80015e4:	6013      	str	r3, [r2, #0]
            continue;
 80015e6:	e137      	b.n	8001858 <readSensors+0x378>
        }
        else if (adcValue < 10) { // Short circuit (thermistor shorted)
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	2b09      	cmp	r3, #9
 80015ec:	d811      	bhi.n	8001612 <readSensors+0x132>
            sprintf(uartBuffer, "SHORT CIRCUIT | ");
 80015ee:	497c      	ldr	r1, [pc, #496]	@ (80017e0 <readSensors+0x300>)
 80015f0:	4874      	ldr	r0, [pc, #464]	@ (80017c4 <readSensors+0x2e4>)
 80015f2:	f004 f9b3 	bl	800595c <siprintf>
            UART_Print(uartBuffer);
 80015f6:	4873      	ldr	r0, [pc, #460]	@ (80017c4 <readSensors+0x2e4>)
 80015f8:	f000 f9aa 	bl	8001950 <UART_Print>
            temperature[i] = 25.0f;
 80015fc:	4a72      	ldr	r2, [pc, #456]	@ (80017c8 <readSensors+0x2e8>)
 80015fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001600:	4972      	ldr	r1, [pc, #456]	@ (80017cc <readSensors+0x2ec>)
 8001602:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            errorCount++;
 8001606:	4b72      	ldr	r3, [pc, #456]	@ (80017d0 <readSensors+0x2f0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	3301      	adds	r3, #1
 800160c:	4a70      	ldr	r2, [pc, #448]	@ (80017d0 <readSensors+0x2f0>)
 800160e:	6013      	str	r3, [r2, #0]
            continue;
 8001610:	e122      	b.n	8001858 <readSensors+0x378>
        }

        /* Calculate temperature */
        float voltage = (float)adcValue * VCC / 4095.0f;
 8001612:	6a38      	ldr	r0, [r7, #32]
 8001614:	f7ff fb5e 	bl	8000cd4 <__aeabi_ui2f>
 8001618:	4603      	mov	r3, r0
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ff04 	bl	8000428 <__aeabi_f2d>
 8001620:	a35b      	add	r3, pc, #364	@ (adr r3, 8001790 <readSensors+0x2b0>)
 8001622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001626:	f7fe ff57 	bl	80004d8 <__aeabi_dmul>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	a359      	add	r3, pc, #356	@ (adr r3, 8001798 <readSensors+0x2b8>)
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	f7ff f878 	bl	800072c <__aeabi_ddiv>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	f7ff fa40 	bl	8000ac8 <__aeabi_d2f>
 8001648:	4603      	mov	r3, r0
 800164a:	61fb      	str	r3, [r7, #28]
        float resistance = R * (VCC - voltage) / voltage; // Fixed formula
 800164c:	69f8      	ldr	r0, [r7, #28]
 800164e:	f7fe feeb 	bl	8000428 <__aeabi_f2d>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	a14e      	add	r1, pc, #312	@ (adr r1, 8001790 <readSensors+0x2b0>)
 8001658:	e9d1 0100 	ldrd	r0, r1, [r1]
 800165c:	f7fe fd84 	bl	8000168 <__aeabi_dsub>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	a34d      	add	r3, pc, #308	@ (adr r3, 80017a0 <readSensors+0x2c0>)
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166e:	f7fe ff33 	bl	80004d8 <__aeabi_dmul>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4614      	mov	r4, r2
 8001678:	461d      	mov	r5, r3
 800167a:	69f8      	ldr	r0, [r7, #28]
 800167c:	f7fe fed4 	bl	8000428 <__aeabi_f2d>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4620      	mov	r0, r4
 8001686:	4629      	mov	r1, r5
 8001688:	f7ff f850 	bl	800072c <__aeabi_ddiv>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fa18 	bl	8000ac8 <__aeabi_d2f>
 8001698:	4603      	mov	r3, r0
 800169a:	61bb      	str	r3, [r7, #24]

        sprintf(uartBuffer, "V: %.3fV | R: %.0fΩ | ", voltage, resistance);
 800169c:	69f8      	ldr	r0, [r7, #28]
 800169e:	f7fe fec3 	bl	8000428 <__aeabi_f2d>
 80016a2:	4604      	mov	r4, r0
 80016a4:	460d      	mov	r5, r1
 80016a6:	69b8      	ldr	r0, [r7, #24]
 80016a8:	f7fe febe 	bl	8000428 <__aeabi_f2d>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	e9cd 2300 	strd	r2, r3, [sp]
 80016b4:	4622      	mov	r2, r4
 80016b6:	462b      	mov	r3, r5
 80016b8:	494a      	ldr	r1, [pc, #296]	@ (80017e4 <readSensors+0x304>)
 80016ba:	4842      	ldr	r0, [pc, #264]	@ (80017c4 <readSensors+0x2e4>)
 80016bc:	f004 f94e 	bl	800595c <siprintf>
        UART_Print(uartBuffer);
 80016c0:	4840      	ldr	r0, [pc, #256]	@ (80017c4 <readSensors+0x2e4>)
 80016c2:	f000 f945 	bl	8001950 <UART_Print>

        /* Only calculate if resistance is valid */
        if (resistance > 100 && resistance < 100000) { // Reasonable range for NTC
 80016c6:	4948      	ldr	r1, [pc, #288]	@ (80017e8 <readSensors+0x308>)
 80016c8:	69b8      	ldr	r0, [r7, #24]
 80016ca:	f7ff fd17 	bl	80010fc <__aeabi_fcmpgt>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 80b0 	beq.w	8001836 <readSensors+0x356>
 80016d6:	4945      	ldr	r1, [pc, #276]	@ (80017ec <readSensors+0x30c>)
 80016d8:	69b8      	ldr	r0, [r7, #24]
 80016da:	f7ff fcf1 	bl	80010c0 <__aeabi_fcmplt>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 80a8 	beq.w	8001836 <readSensors+0x356>
            float steinhart;
            steinhart = log(resistance / RT0) / B;    // ln(R/R0)/B
 80016e6:	4942      	ldr	r1, [pc, #264]	@ (80017f0 <readSensors+0x310>)
 80016e8:	69b8      	ldr	r0, [r7, #24]
 80016ea:	f7ff fbff 	bl	8000eec <__aeabi_fdiv>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe fe99 	bl	8000428 <__aeabi_f2d>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4610      	mov	r0, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	f007 fd59 	bl	80091b4 <log>
 8001702:	a329      	add	r3, pc, #164	@ (adr r3, 80017a8 <readSensors+0x2c8>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	f7ff f810 	bl	800072c <__aeabi_ddiv>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	f7ff f9d8 	bl	8000ac8 <__aeabi_d2f>
 8001718:	4603      	mov	r3, r0
 800171a:	617b      	str	r3, [r7, #20]
            steinhart += 1.0f / T0;                   // + (1/T0)
 800171c:	6978      	ldr	r0, [r7, #20]
 800171e:	f7fe fe83 	bl	8000428 <__aeabi_f2d>
 8001722:	a323      	add	r3, pc, #140	@ (adr r3, 80017b0 <readSensors+0x2d0>)
 8001724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001728:	f7fe fd20 	bl	800016c <__adddf3>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f7ff f9c8 	bl	8000ac8 <__aeabi_d2f>
 8001738:	4603      	mov	r3, r0
 800173a:	617b      	str	r3, [r7, #20]
            steinhart = 1.0f / steinhart;             // Invert
 800173c:	6979      	ldr	r1, [r7, #20]
 800173e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001742:	f7ff fbd3 	bl	8000eec <__aeabi_fdiv>
 8001746:	4603      	mov	r3, r0
 8001748:	617b      	str	r3, [r7, #20]
            temperature[i] = steinhart - 273.15f;      // Convert to °C
 800174a:	492a      	ldr	r1, [pc, #168]	@ (80017f4 <readSensors+0x314>)
 800174c:	6978      	ldr	r0, [r7, #20]
 800174e:	f7ff fa0f 	bl	8000b70 <__aeabi_fsub>
 8001752:	4603      	mov	r3, r0
 8001754:	4619      	mov	r1, r3
 8001756:	4a1c      	ldr	r2, [pc, #112]	@ (80017c8 <readSensors+0x2e8>)
 8001758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

            /* Sanity check */
            if (temperature[i] < -40.0f || temperature[i] > 125.0f) {
 800175e:	4a1a      	ldr	r2, [pc, #104]	@ (80017c8 <readSensors+0x2e8>)
 8001760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001766:	4924      	ldr	r1, [pc, #144]	@ (80017f8 <readSensors+0x318>)
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fca9 	bl	80010c0 <__aeabi_fcmplt>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d145      	bne.n	8001800 <readSensors+0x320>
 8001774:	4a14      	ldr	r2, [pc, #80]	@ (80017c8 <readSensors+0x2e8>)
 8001776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177c:	491f      	ldr	r1, [pc, #124]	@ (80017fc <readSensors+0x31c>)
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fcbc 	bl	80010fc <__aeabi_fcmpgt>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d13a      	bne.n	8001800 <readSensors+0x320>
        if (resistance > 100 && resistance < 100000) { // Reasonable range for NTC
 800178a:	e065      	b.n	8001858 <readSensors+0x378>
 800178c:	f3af 8000 	nop.w
 8001790:	66666666 	.word	0x66666666
 8001794:	400a6666 	.word	0x400a6666
 8001798:	00000000 	.word	0x00000000
 800179c:	40affe00 	.word	0x40affe00
 80017a0:	00000000 	.word	0x00000000
 80017a4:	40c38800 	.word	0x40c38800
 80017a8:	00000000 	.word	0x00000000
 80017ac:	40bd4c00 	.word	0x40bd4c00
 80017b0:	dcb5db83 	.word	0xdcb5db83
 80017b4:	3f6b79e1 	.word	0x3f6b79e1
 80017b8:	08009820 	.word	0x08009820
 80017bc:	200001f0 	.word	0x200001f0
 80017c0:	08009754 	.word	0x08009754
 80017c4:	200002bc 	.word	0x200002bc
 80017c8:	200002b0 	.word	0x200002b0
 80017cc:	41c80000 	.word	0x41c80000
 80017d0:	200002b8 	.word	0x200002b8
 80017d4:	0800977c 	.word	0x0800977c
 80017d8:	08009798 	.word	0x08009798
 80017dc:	080097ac 	.word	0x080097ac
 80017e0:	080097bc 	.word	0x080097bc
 80017e4:	080097d0 	.word	0x080097d0
 80017e8:	42c80000 	.word	0x42c80000
 80017ec:	47c35000 	.word	0x47c35000
 80017f0:	461c4000 	.word	0x461c4000
 80017f4:	43889333 	.word	0x43889333
 80017f8:	c2200000 	.word	0xc2200000
 80017fc:	42fa0000 	.word	0x42fa0000
                sprintf(uartBuffer, "INVALID RANGE (%.1f°C) | ", temperature[i]);
 8001800:	4a1c      	ldr	r2, [pc, #112]	@ (8001874 <readSensors+0x394>)
 8001802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fe0d 	bl	8000428 <__aeabi_f2d>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4919      	ldr	r1, [pc, #100]	@ (8001878 <readSensors+0x398>)
 8001814:	4819      	ldr	r0, [pc, #100]	@ (800187c <readSensors+0x39c>)
 8001816:	f004 f8a1 	bl	800595c <siprintf>
                UART_Print(uartBuffer);
 800181a:	4818      	ldr	r0, [pc, #96]	@ (800187c <readSensors+0x39c>)
 800181c:	f000 f898 	bl	8001950 <UART_Print>
                temperature[i] = 25.0f;
 8001820:	4a14      	ldr	r2, [pc, #80]	@ (8001874 <readSensors+0x394>)
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001824:	4916      	ldr	r1, [pc, #88]	@ (8001880 <readSensors+0x3a0>)
 8001826:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                errorCount++;
 800182a:	4b16      	ldr	r3, [pc, #88]	@ (8001884 <readSensors+0x3a4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	3301      	adds	r3, #1
 8001830:	4a14      	ldr	r2, [pc, #80]	@ (8001884 <readSensors+0x3a4>)
 8001832:	6013      	str	r3, [r2, #0]
        if (resistance > 100 && resistance < 100000) { // Reasonable range for NTC
 8001834:	e010      	b.n	8001858 <readSensors+0x378>
            }
        }
        else {
            sprintf(uartBuffer, "INVALID RESISTANCE | ");
 8001836:	4914      	ldr	r1, [pc, #80]	@ (8001888 <readSensors+0x3a8>)
 8001838:	4810      	ldr	r0, [pc, #64]	@ (800187c <readSensors+0x39c>)
 800183a:	f004 f88f 	bl	800595c <siprintf>
            UART_Print(uartBuffer);
 800183e:	480f      	ldr	r0, [pc, #60]	@ (800187c <readSensors+0x39c>)
 8001840:	f000 f886 	bl	8001950 <UART_Print>
            temperature[i] = 25.0f;
 8001844:	4a0b      	ldr	r2, [pc, #44]	@ (8001874 <readSensors+0x394>)
 8001846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001848:	490d      	ldr	r1, [pc, #52]	@ (8001880 <readSensors+0x3a0>)
 800184a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            errorCount++;
 800184e:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <readSensors+0x3a4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	3301      	adds	r3, #1
 8001854:	4a0b      	ldr	r2, [pc, #44]	@ (8001884 <readSensors+0x3a4>)
 8001856:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < NUM_SENSORS; i++) {
 8001858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185a:	3301      	adds	r3, #1
 800185c:	627b      	str	r3, [r7, #36]	@ 0x24
 800185e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001860:	2b01      	cmp	r3, #1
 8001862:	f77f ae4f 	ble.w	8001504 <readSensors+0x24>
        }
    }
    UART_Print("\r\n");
 8001866:	4809      	ldr	r0, [pc, #36]	@ (800188c <readSensors+0x3ac>)
 8001868:	f000 f872 	bl	8001950 <UART_Print>
}
 800186c:	bf00      	nop
 800186e:	3728      	adds	r7, #40	@ 0x28
 8001870:	46bd      	mov	sp, r7
 8001872:	bdb0      	pop	{r4, r5, r7, pc}
 8001874:	200002b0 	.word	0x200002b0
 8001878:	080097e8 	.word	0x080097e8
 800187c:	200002bc 	.word	0x200002bc
 8001880:	41c80000 	.word	0x41c80000
 8001884:	200002b8 	.word	0x200002b8
 8001888:	08009804 	.word	0x08009804
 800188c:	0800981c 	.word	0x0800981c

08001890 <calculateTemperatures>:

void calculateTemperatures(float *Tmax, float *Tmin, float *avg) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
    *Tmax = temperature[0];
 800189c:	4b2b      	ldr	r3, [pc, #172]	@ (800194c <calculateTemperatures+0xbc>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	601a      	str	r2, [r3, #0]
    *Tmin = temperature[0];
 80018a4:	4b29      	ldr	r3, [pc, #164]	@ (800194c <calculateTemperatures+0xbc>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	601a      	str	r2, [r3, #0]
    *avg = temperature[0];
 80018ac:	4b27      	ldr	r3, [pc, #156]	@ (800194c <calculateTemperatures+0xbc>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	601a      	str	r2, [r3, #0]

    for (int i = 1; i < NUM_SENSORS; i++) {
 80018b4:	2301      	movs	r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	e036      	b.n	8001928 <calculateTemperatures+0x98>
        if (temperature[i] > *Tmax) *Tmax = temperature[i];
 80018ba:	4a24      	ldr	r2, [pc, #144]	@ (800194c <calculateTemperatures+0xbc>)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4619      	mov	r1, r3
 80018c8:	4610      	mov	r0, r2
 80018ca:	f7ff fc17 	bl	80010fc <__aeabi_fcmpgt>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <calculateTemperatures+0x50>
 80018d4:	4a1d      	ldr	r2, [pc, #116]	@ (800194c <calculateTemperatures+0xbc>)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	601a      	str	r2, [r3, #0]
        if (temperature[i] < *Tmin) *Tmin = temperature[i];
 80018e0:	4a1a      	ldr	r2, [pc, #104]	@ (800194c <calculateTemperatures+0xbc>)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4619      	mov	r1, r3
 80018ee:	4610      	mov	r0, r2
 80018f0:	f7ff fbe6 	bl	80010c0 <__aeabi_fcmplt>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d005      	beq.n	8001906 <calculateTemperatures+0x76>
 80018fa:	4a14      	ldr	r2, [pc, #80]	@ (800194c <calculateTemperatures+0xbc>)
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	601a      	str	r2, [r3, #0]
        *avg += temperature[i];
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4910      	ldr	r1, [pc, #64]	@ (800194c <calculateTemperatures+0xbc>)
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001912:	4619      	mov	r1, r3
 8001914:	4610      	mov	r0, r2
 8001916:	f7ff f92d 	bl	8000b74 <__addsf3>
 800191a:	4603      	mov	r3, r0
 800191c:	461a      	mov	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	601a      	str	r2, [r3, #0]
    for (int i = 1; i < NUM_SENSORS; i++) {
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3301      	adds	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	2b01      	cmp	r3, #1
 800192c:	ddc5      	ble.n	80018ba <calculateTemperatures+0x2a>
    }

    *avg /= NUM_SENSORS;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fad8 	bl	8000eec <__aeabi_fdiv>
 800193c:	4603      	mov	r3, r0
 800193e:	461a      	mov	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	601a      	str	r2, [r3, #0]
}
 8001944:	bf00      	nop
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200002b0 	.word	0x200002b0

08001950 <UART_Print>:

void UART_Print(char* message) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
    HAL_USART_Transmit(&husart1, (uint8_t*)message, strlen(message), 100); // Use USART function
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7fe fbf9 	bl	8000150 <strlen>
 800195e:	4603      	mov	r3, r0
 8001960:	b29a      	uxth	r2, r3
 8001962:	2364      	movs	r3, #100	@ 0x64
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	480e      	ldr	r0, [pc, #56]	@ (80019a0 <UART_Print+0x50>)
 8001968:	f002 feeb 	bl	8004742 <HAL_USART_Transmit>

    // Also send to ITM for debug console
    for (int i = 0; i < strlen(message); i++) {
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	e009      	b.n	8001986 <UART_Print+0x36>
        ITM_SendChar(message[i]);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	4413      	add	r3, r2
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fc24 	bl	80011c8 <ITM_SendChar>
    for (int i = 0; i < strlen(message); i++) {
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	3301      	adds	r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7fe fbe2 	bl	8000150 <strlen>
 800198c:	4602      	mov	r2, r0
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	429a      	cmp	r2, r3
 8001992:	d8ee      	bhi.n	8001972 <UART_Print+0x22>
    }
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000248 	.word	0x20000248

080019a4 <MX_ADC1_Init>:

static void MX_ADC1_Init(void) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
    hadc1.Instance = ADC1;
 80019a8:	4b13      	ldr	r3, [pc, #76]	@ (80019f8 <MX_ADC1_Init+0x54>)
 80019aa:	4a14      	ldr	r2, [pc, #80]	@ (80019fc <MX_ADC1_Init+0x58>)
 80019ac:	601a      	str	r2, [r3, #0]
    hadc1.Init.ScanConvMode = DISABLE;
 80019ae:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <MX_ADC1_Init+0x54>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
    hadc1.Init.ContinuousConvMode = DISABLE;
 80019b4:	4b10      	ldr	r3, [pc, #64]	@ (80019f8 <MX_ADC1_Init+0x54>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	731a      	strb	r2, [r3, #12]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019ba:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <MX_ADC1_Init+0x54>)
 80019bc:	2200      	movs	r2, #0
 80019be:	751a      	strb	r2, [r3, #20]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019c0:	4b0d      	ldr	r3, [pc, #52]	@ (80019f8 <MX_ADC1_Init+0x54>)
 80019c2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80019c6:	61da      	str	r2, [r3, #28]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019c8:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <MX_ADC1_Init+0x54>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	605a      	str	r2, [r3, #4]
    hadc1.Init.NbrOfConversion = 1;
 80019ce:	4b0a      	ldr	r3, [pc, #40]	@ (80019f8 <MX_ADC1_Init+0x54>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	611a      	str	r2, [r3, #16]

    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80019d4:	4808      	ldr	r0, [pc, #32]	@ (80019f8 <MX_ADC1_Init+0x54>)
 80019d6:	f000 fc29 	bl	800222c <HAL_ADC_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_ADC1_Init+0x40>
        Error_Handler();
 80019e0:	f000 f920 	bl	8001c24 <Error_Handler>
    }

    /* Calibrate ADC before use */
    if (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK) {
 80019e4:	4804      	ldr	r0, [pc, #16]	@ (80019f8 <MX_ADC1_Init+0x54>)
 80019e6:	f001 f879 	bl	8002adc <HAL_ADCEx_Calibration_Start>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_ADC1_Init+0x50>
        Error_Handler();
 80019f0:	f000 f918 	bl	8001c24 <Error_Handler>
    }
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200001f0 	.word	0x200001f0
 80019fc:	40012400 	.word	0x40012400

08001a00 <MX_CAN_Init>:

static void MX_CAN_Init(void) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
    hcan.Instance = CAN1;
 8001a04:	4b17      	ldr	r3, [pc, #92]	@ (8001a64 <MX_CAN_Init+0x64>)
 8001a06:	4a18      	ldr	r2, [pc, #96]	@ (8001a68 <MX_CAN_Init+0x68>)
 8001a08:	601a      	str	r2, [r3, #0]
    hcan.Init.Prescaler = 9;  // 72MHz/(9*(1+13+2)) = 250kbps standard CAN baud rate
 8001a0a:	4b16      	ldr	r3, [pc, #88]	@ (8001a64 <MX_CAN_Init+0x64>)
 8001a0c:	2209      	movs	r2, #9
 8001a0e:	605a      	str	r2, [r3, #4]
    hcan.Init.Mode = CAN_MODE_NORMAL;
 8001a10:	4b14      	ldr	r3, [pc, #80]	@ (8001a64 <MX_CAN_Init+0x64>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
    hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a16:	4b13      	ldr	r3, [pc, #76]	@ (8001a64 <MX_CAN_Init+0x64>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	60da      	str	r2, [r3, #12]
    hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <MX_CAN_Init+0x64>)
 8001a1e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8001a22:	611a      	str	r2, [r3, #16]
    hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001a24:	4b0f      	ldr	r3, [pc, #60]	@ (8001a64 <MX_CAN_Init+0x64>)
 8001a26:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001a2a:	615a      	str	r2, [r3, #20]
    hcan.Init.TimeTriggeredMode = DISABLE;
 8001a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a64 <MX_CAN_Init+0x64>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	761a      	strb	r2, [r3, #24]
    hcan.Init.AutoBusOff = ENABLE;
 8001a32:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <MX_CAN_Init+0x64>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	765a      	strb	r2, [r3, #25]
    hcan.Init.AutoWakeUp = DISABLE;
 8001a38:	4b0a      	ldr	r3, [pc, #40]	@ (8001a64 <MX_CAN_Init+0x64>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	769a      	strb	r2, [r3, #26]
    hcan.Init.AutoRetransmission = ENABLE;
 8001a3e:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <MX_CAN_Init+0x64>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	76da      	strb	r2, [r3, #27]
    hcan.Init.ReceiveFifoLocked = DISABLE;
 8001a44:	4b07      	ldr	r3, [pc, #28]	@ (8001a64 <MX_CAN_Init+0x64>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	771a      	strb	r2, [r3, #28]
    hcan.Init.TransmitFifoPriority = DISABLE;
 8001a4a:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <MX_CAN_Init+0x64>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	775a      	strb	r2, [r3, #29]

    if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8001a50:	4804      	ldr	r0, [pc, #16]	@ (8001a64 <MX_CAN_Init+0x64>)
 8001a52:	f001 f8f1 	bl	8002c38 <HAL_CAN_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_CAN_Init+0x60>
        Error_Handler();
 8001a5c:	f000 f8e2 	bl	8001c24 <Error_Handler>
    }
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000220 	.word	0x20000220
 8001a68:	40006400 	.word	0x40006400

08001a6c <MX_USART1_Init>:

static void MX_USART1_Init(void) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
    husart1.Instance = USART1;
 8001a70:	4b12      	ldr	r3, [pc, #72]	@ (8001abc <MX_USART1_Init+0x50>)
 8001a72:	4a13      	ldr	r2, [pc, #76]	@ (8001ac0 <MX_USART1_Init+0x54>)
 8001a74:	601a      	str	r2, [r3, #0]
    husart1.Init.BaudRate = 115200;
 8001a76:	4b11      	ldr	r3, [pc, #68]	@ (8001abc <MX_USART1_Init+0x50>)
 8001a78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a7c:	605a      	str	r2, [r3, #4]
    husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8001a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001abc <MX_USART1_Init+0x50>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
    husart1.Init.StopBits = USART_STOPBITS_1;
 8001a84:	4b0d      	ldr	r3, [pc, #52]	@ (8001abc <MX_USART1_Init+0x50>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
    husart1.Init.Parity = USART_PARITY_NONE;
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <MX_USART1_Init+0x50>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
    husart1.Init.Mode = USART_MODE_TX_RX;
 8001a90:	4b0a      	ldr	r3, [pc, #40]	@ (8001abc <MX_USART1_Init+0x50>)
 8001a92:	220c      	movs	r2, #12
 8001a94:	615a      	str	r2, [r3, #20]
    husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8001a96:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <MX_USART1_Init+0x50>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
    husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8001a9c:	4b07      	ldr	r3, [pc, #28]	@ (8001abc <MX_USART1_Init+0x50>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	61da      	str	r2, [r3, #28]
    husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001aa2:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <MX_USART1_Init+0x50>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	621a      	str	r2, [r3, #32]

    if (HAL_USART_Init(&husart1) != HAL_OK) {
 8001aa8:	4804      	ldr	r0, [pc, #16]	@ (8001abc <MX_USART1_Init+0x50>)
 8001aaa:	f002 fe09 	bl	80046c0 <HAL_USART_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_USART1_Init+0x4c>
        Error_Handler();
 8001ab4:	f000 f8b6 	bl	8001c24 <Error_Handler>
    }
}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000248 	.word	0x20000248
 8001ac0:	40013800 	.word	0x40013800

08001ac4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aca:	f107 0310 	add.w	r3, r7, #16
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b54 <MX_GPIO_Init+0x90>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	4a1d      	ldr	r2, [pc, #116]	@ (8001b54 <MX_GPIO_Init+0x90>)
 8001ade:	f043 0310 	orr.w	r3, r3, #16
 8001ae2:	6193      	str	r3, [r2, #24]
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b54 <MX_GPIO_Init+0x90>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f003 0310 	and.w	r3, r3, #16
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af0:	4b18      	ldr	r3, [pc, #96]	@ (8001b54 <MX_GPIO_Init+0x90>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4a17      	ldr	r2, [pc, #92]	@ (8001b54 <MX_GPIO_Init+0x90>)
 8001af6:	f043 0304 	orr.w	r3, r3, #4
 8001afa:	6193      	str	r3, [r2, #24]
 8001afc:	4b15      	ldr	r3, [pc, #84]	@ (8001b54 <MX_GPIO_Init+0x90>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b08:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <MX_GPIO_Init+0x90>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	4a11      	ldr	r2, [pc, #68]	@ (8001b54 <MX_GPIO_Init+0x90>)
 8001b0e:	f043 0308 	orr.w	r3, r3, #8
 8001b12:	6193      	str	r3, [r2, #24]
 8001b14:	4b0f      	ldr	r3, [pc, #60]	@ (8001b54 <MX_GPIO_Init+0x90>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]

    /* Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b26:	480c      	ldr	r0, [pc, #48]	@ (8001b58 <MX_GPIO_Init+0x94>)
 8001b28:	f002 f81c 	bl	8003b64 <HAL_GPIO_WritePin>

    /* Configure GPIO pin : PC13 */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b32:	2301      	movs	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b3e:	f107 0310 	add.w	r3, r7, #16
 8001b42:	4619      	mov	r1, r3
 8001b44:	4804      	ldr	r0, [pc, #16]	@ (8001b58 <MX_GPIO_Init+0x94>)
 8001b46:	f001 fe89 	bl	800385c <HAL_GPIO_Init>
}
 8001b4a:	bf00      	nop
 8001b4c:	3720      	adds	r7, #32
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40011000 	.word	0x40011000

08001b5c <SystemClock_Config>:

void SystemClock_Config(void) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b094      	sub	sp, #80	@ 0x50
 8001b60:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b66:	2228      	movs	r2, #40	@ 0x28
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f003 ff59 	bl	8005a22 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]

    /* Initialize the RCC Oscillators */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;                  // Enable HSE
 8001b90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;              // Enable PLL
 8001b96:	2302      	movs	r3, #2
 8001b98:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;      // Set HSE as PLL source
 8001b9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;              // Multiply HSE by 9 (for 8 MHz, gives 72 MHz)
 8001ba0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Initialize the RCC Oscillator */
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001ba6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001baa:	4618      	mov	r0, r3
 8001bac:	f002 f80c 	bl	8003bc8 <HAL_RCC_OscConfig>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <SystemClock_Config+0x5e>
        Error_Handler();  // Handle error
 8001bb6:	f000 f835 	bl	8001c24 <Error_Handler>
    }

    /* Select PLL as system clock source and configure the HCLK, PCLK1, and PCLK2 clocks */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bba:	230e      	movs	r3, #14
 8001bbc:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK; // Select PLL as system clock
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;       // Set AHB clock divider
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;        // Set APB1 clock divider
 8001bc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bca:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;        // Set APB2 clock divider
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Initialize the CPU, AHB and APB clocks */
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	2102      	movs	r1, #2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f002 fa78 	bl	80040cc <HAL_RCC_ClockConfig>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <SystemClock_Config+0x8a>
        Error_Handler();  // Handle error
 8001be2:	f000 f81f 	bl	8001c24 <Error_Handler>
    }

    /* Configure ADC clock source */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001be6:	2302      	movs	r3, #2
 8001be8:	607b      	str	r3, [r7, #4]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;  // 72MHz/6 = 12MHz ADC clock
 8001bea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bee:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f002 fbf8 	bl	80043e8 <HAL_RCCEx_PeriphCLKConfig>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <SystemClock_Config+0xa6>
        Error_Handler();
 8001bfe:	f000 f811 	bl	8001c24 <Error_Handler>
    }

    /* Enable the ITM peripheral */
    ITM->LAR = 0xC5ACCE55;
 8001c02:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001c06:	4a06      	ldr	r2, [pc, #24]	@ (8001c20 <SystemClock_Config+0xc4>)
 8001c08:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
    ITM->TER = 0xFFFFFFFF;
 8001c0c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001c10:	f04f 32ff 	mov.w	r2, #4294967295
 8001c14:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
}
 8001c18:	bf00      	nop
 8001c1a:	3750      	adds	r7, #80	@ 0x50
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	c5acce55 	.word	0xc5acce55

08001c24 <Error_Handler>:

void Error_Handler(void) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
    errorCount++;
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c68 <Error_Handler+0x44>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	4a0d      	ldr	r2, [pc, #52]	@ (8001c68 <Error_Handler+0x44>)
 8001c32:	6013      	str	r3, [r2, #0]

    /* Send error message */
    UART_Print("*** ERROR DETECTED ***\r\n");
 8001c34:	480d      	ldr	r0, [pc, #52]	@ (8001c6c <Error_Handler+0x48>)
 8001c36:	f7ff fe8b 	bl	8001950 <UART_Print>

    /* Visual feedback for errors */
    for(int i = 0; i < 6; i++) {
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	e00a      	b.n	8001c56 <Error_Handler+0x32>
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001c40:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c44:	480a      	ldr	r0, [pc, #40]	@ (8001c70 <Error_Handler+0x4c>)
 8001c46:	f001 ffa5 	bl	8003b94 <HAL_GPIO_TogglePin>
        HAL_Delay(100);
 8001c4a:	2064      	movs	r0, #100	@ 0x64
 8001c4c:	f000 faca 	bl	80021e4 <HAL_Delay>
    for(int i = 0; i < 6; i++) {
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3301      	adds	r3, #1
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b05      	cmp	r3, #5
 8001c5a:	ddf1      	ble.n	8001c40 <Error_Handler+0x1c>
    }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200002b8 	.word	0x200002b8
 8001c6c:	08009828 	.word	0x08009828
 8001c70:	40011000 	.word	0x40011000

08001c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c7a:	4b15      	ldr	r3, [pc, #84]	@ (8001cd0 <HAL_MspInit+0x5c>)
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	4a14      	ldr	r2, [pc, #80]	@ (8001cd0 <HAL_MspInit+0x5c>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6193      	str	r3, [r2, #24]
 8001c86:	4b12      	ldr	r3, [pc, #72]	@ (8001cd0 <HAL_MspInit+0x5c>)
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c92:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd0 <HAL_MspInit+0x5c>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	4a0e      	ldr	r2, [pc, #56]	@ (8001cd0 <HAL_MspInit+0x5c>)
 8001c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c9c:	61d3      	str	r3, [r2, #28]
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd0 <HAL_MspInit+0x5c>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001caa:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd4 <HAL_MspInit+0x60>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	4a04      	ldr	r2, [pc, #16]	@ (8001cd4 <HAL_MspInit+0x60>)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40010000 	.word	0x40010000

08001cd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 0310 	add.w	r3, r7, #16
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a14      	ldr	r2, [pc, #80]	@ (8001d44 <HAL_ADC_MspInit+0x6c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d121      	bne.n	8001d3c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cf8:	4b13      	ldr	r3, [pc, #76]	@ (8001d48 <HAL_ADC_MspInit+0x70>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	4a12      	ldr	r2, [pc, #72]	@ (8001d48 <HAL_ADC_MspInit+0x70>)
 8001cfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d02:	6193      	str	r3, [r2, #24]
 8001d04:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <HAL_ADC_MspInit+0x70>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d10:	4b0d      	ldr	r3, [pc, #52]	@ (8001d48 <HAL_ADC_MspInit+0x70>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	4a0c      	ldr	r2, [pc, #48]	@ (8001d48 <HAL_ADC_MspInit+0x70>)
 8001d16:	f043 0304 	orr.w	r3, r3, #4
 8001d1a:	6193      	str	r3, [r2, #24]
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <HAL_ADC_MspInit+0x70>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001d28:	231e      	movs	r3, #30
 8001d2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d30:	f107 0310 	add.w	r3, r7, #16
 8001d34:	4619      	mov	r1, r3
 8001d36:	4805      	ldr	r0, [pc, #20]	@ (8001d4c <HAL_ADC_MspInit+0x74>)
 8001d38:	f001 fd90 	bl	800385c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d3c:	bf00      	nop
 8001d3e:	3720      	adds	r7, #32
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40012400 	.word	0x40012400
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40010800 	.word	0x40010800

08001d50 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0310 	add.w	r3, r7, #16
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a28      	ldr	r2, [pc, #160]	@ (8001e0c <HAL_CAN_MspInit+0xbc>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d149      	bne.n	8001e04 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d70:	4b27      	ldr	r3, [pc, #156]	@ (8001e10 <HAL_CAN_MspInit+0xc0>)
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	4a26      	ldr	r2, [pc, #152]	@ (8001e10 <HAL_CAN_MspInit+0xc0>)
 8001d76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d7a:	61d3      	str	r3, [r2, #28]
 8001d7c:	4b24      	ldr	r3, [pc, #144]	@ (8001e10 <HAL_CAN_MspInit+0xc0>)
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d88:	4b21      	ldr	r3, [pc, #132]	@ (8001e10 <HAL_CAN_MspInit+0xc0>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	4a20      	ldr	r2, [pc, #128]	@ (8001e10 <HAL_CAN_MspInit+0xc0>)
 8001d8e:	f043 0304 	orr.w	r3, r3, #4
 8001d92:	6193      	str	r3, [r2, #24]
 8001d94:	4b1e      	ldr	r3, [pc, #120]	@ (8001e10 <HAL_CAN_MspInit+0xc0>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001da0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001da4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dae:	f107 0310 	add.w	r3, r7, #16
 8001db2:	4619      	mov	r1, r3
 8001db4:	4817      	ldr	r0, [pc, #92]	@ (8001e14 <HAL_CAN_MspInit+0xc4>)
 8001db6:	f001 fd51 	bl	800385c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001dba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	f107 0310 	add.w	r3, r7, #16
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4811      	ldr	r0, [pc, #68]	@ (8001e14 <HAL_CAN_MspInit+0xc4>)
 8001dd0:	f001 fd44 	bl	800385c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	2013      	movs	r0, #19
 8001dda:	f001 fd08 	bl	80037ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001dde:	2013      	movs	r0, #19
 8001de0:	f001 fd21 	bl	8003826 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001de4:	2200      	movs	r2, #0
 8001de6:	2100      	movs	r1, #0
 8001de8:	2014      	movs	r0, #20
 8001dea:	f001 fd00 	bl	80037ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001dee:	2014      	movs	r0, #20
 8001df0:	f001 fd19 	bl	8003826 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001df4:	2200      	movs	r2, #0
 8001df6:	2100      	movs	r1, #0
 8001df8:	2015      	movs	r0, #21
 8001dfa:	f001 fcf8 	bl	80037ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001dfe:	2015      	movs	r0, #21
 8001e00:	f001 fd11 	bl	8003826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001e04:	bf00      	nop
 8001e06:	3720      	adds	r7, #32
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40006400 	.word	0x40006400
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40010800 	.word	0x40010800

08001e18 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 0310 	add.w	r3, r7, #16
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
  if(husart->Instance==USART1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1c      	ldr	r2, [pc, #112]	@ (8001ea4 <HAL_USART_MspInit+0x8c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d131      	bne.n	8001e9c <HAL_USART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea8 <HAL_USART_MspInit+0x90>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ea8 <HAL_USART_MspInit+0x90>)
 8001e3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e42:	6193      	str	r3, [r2, #24]
 8001e44:	4b18      	ldr	r3, [pc, #96]	@ (8001ea8 <HAL_USART_MspInit+0x90>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e50:	4b15      	ldr	r3, [pc, #84]	@ (8001ea8 <HAL_USART_MspInit+0x90>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	4a14      	ldr	r2, [pc, #80]	@ (8001ea8 <HAL_USART_MspInit+0x90>)
 8001e56:	f043 0304 	orr.w	r3, r3, #4
 8001e5a:	6193      	str	r3, [r2, #24]
 8001e5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ea8 <HAL_USART_MspInit+0x90>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e68:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e76:	f107 0310 	add.w	r3, r7, #16
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	480b      	ldr	r0, [pc, #44]	@ (8001eac <HAL_USART_MspInit+0x94>)
 8001e7e:	f001 fced 	bl	800385c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e90:	f107 0310 	add.w	r3, r7, #16
 8001e94:	4619      	mov	r1, r3
 8001e96:	4805      	ldr	r0, [pc, #20]	@ (8001eac <HAL_USART_MspInit+0x94>)
 8001e98:	f001 fce0 	bl	800385c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e9c:	bf00      	nop
 8001e9e:	3720      	adds	r7, #32
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40013800 	.word	0x40013800
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40010800 	.word	0x40010800

08001eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001eb4:	bf00      	nop
 8001eb6:	e7fd      	b.n	8001eb4 <NMI_Handler+0x4>

08001eb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ebc:	bf00      	nop
 8001ebe:	e7fd      	b.n	8001ebc <HardFault_Handler+0x4>

08001ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <MemManage_Handler+0x4>

08001ec8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ecc:	bf00      	nop
 8001ece:	e7fd      	b.n	8001ecc <BusFault_Handler+0x4>

08001ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed4:	bf00      	nop
 8001ed6:	e7fd      	b.n	8001ed4 <UsageFault_Handler+0x4>

08001ed8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr

08001efc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f00:	f000 f954 	bl	80021ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001f0c:	4802      	ldr	r0, [pc, #8]	@ (8001f18 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001f0e:	f001 f96a 	bl	80031e6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000220 	.word	0x20000220

08001f1c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001f20:	4802      	ldr	r0, [pc, #8]	@ (8001f2c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001f22:	f001 f960 	bl	80031e6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000220 	.word	0x20000220

08001f30 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001f34:	4802      	ldr	r0, [pc, #8]	@ (8001f40 <CAN1_RX1_IRQHandler+0x10>)
 8001f36:	f001 f956 	bl	80031e6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000220 	.word	0x20000220

08001f44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return 1;
 8001f48:	2301      	movs	r3, #1
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <_kill>:

int _kill(int pid, int sig)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f5c:	f003 fdb4 	bl	8005ac8 <__errno>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2216      	movs	r2, #22
 8001f64:	601a      	str	r2, [r3, #0]
  return -1;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <_exit>:

void _exit (int status)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f7a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff ffe7 	bl	8001f52 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <_exit+0x12>

08001f88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	e00a      	b.n	8001fb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f9a:	f3af 8000 	nop.w
 8001f9e:	4601      	mov	r1, r0
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	60ba      	str	r2, [r7, #8]
 8001fa6:	b2ca      	uxtb	r2, r1
 8001fa8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	3301      	adds	r3, #1
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	dbf0      	blt.n	8001f9a <_read+0x12>
  }

  return len;
 8001fb8:	687b      	ldr	r3, [r7, #4]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b086      	sub	sp, #24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	e009      	b.n	8001fe8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	60ba      	str	r2, [r7, #8]
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	dbf1      	blt.n	8001fd4 <_write+0x12>
  }
  return len;
 8001ff0:	687b      	ldr	r3, [r7, #4]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <_close>:

int _close(int file)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002002:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002020:	605a      	str	r2, [r3, #4]
  return 0;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <_isatty>:

int _isatty(int file)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002036:	2301      	movs	r3, #1
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr

08002042 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002042:	b480      	push	{r7}
 8002044:	b085      	sub	sp, #20
 8002046:	af00      	add	r7, sp, #0
 8002048:	60f8      	str	r0, [r7, #12]
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
	...

0800205c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002064:	4a14      	ldr	r2, [pc, #80]	@ (80020b8 <_sbrk+0x5c>)
 8002066:	4b15      	ldr	r3, [pc, #84]	@ (80020bc <_sbrk+0x60>)
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002070:	4b13      	ldr	r3, [pc, #76]	@ (80020c0 <_sbrk+0x64>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d102      	bne.n	800207e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002078:	4b11      	ldr	r3, [pc, #68]	@ (80020c0 <_sbrk+0x64>)
 800207a:	4a12      	ldr	r2, [pc, #72]	@ (80020c4 <_sbrk+0x68>)
 800207c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800207e:	4b10      	ldr	r3, [pc, #64]	@ (80020c0 <_sbrk+0x64>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	429a      	cmp	r2, r3
 800208a:	d207      	bcs.n	800209c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800208c:	f003 fd1c 	bl	8005ac8 <__errno>
 8002090:	4603      	mov	r3, r0
 8002092:	220c      	movs	r2, #12
 8002094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002096:	f04f 33ff 	mov.w	r3, #4294967295
 800209a:	e009      	b.n	80020b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800209c:	4b08      	ldr	r3, [pc, #32]	@ (80020c0 <_sbrk+0x64>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020a2:	4b07      	ldr	r3, [pc, #28]	@ (80020c0 <_sbrk+0x64>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	4a05      	ldr	r2, [pc, #20]	@ (80020c0 <_sbrk+0x64>)
 80020ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ae:	68fb      	ldr	r3, [r7, #12]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20005000 	.word	0x20005000
 80020bc:	00000400 	.word	0x00000400
 80020c0:	2000033c 	.word	0x2000033c
 80020c4:	20000490 	.word	0x20000490

080020c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020d4:	f7ff fff8 	bl	80020c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020d8:	480b      	ldr	r0, [pc, #44]	@ (8002108 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020da:	490c      	ldr	r1, [pc, #48]	@ (800210c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002110 <LoopFillZerobss+0x16>)
  movs r3, #0
 80020de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e0:	e002      	b.n	80020e8 <LoopCopyDataInit>

080020e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e6:	3304      	adds	r3, #4

080020e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020ec:	d3f9      	bcc.n	80020e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ee:	4a09      	ldr	r2, [pc, #36]	@ (8002114 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80020f0:	4c09      	ldr	r4, [pc, #36]	@ (8002118 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f4:	e001      	b.n	80020fa <LoopFillZerobss>

080020f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f8:	3204      	adds	r2, #4

080020fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020fc:	d3fb      	bcc.n	80020f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020fe:	f003 fce9 	bl	8005ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002102:	f7ff f887 	bl	8001214 <main>
  bx lr
 8002106:	4770      	bx	lr
  ldr r0, =_sdata
 8002108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800210c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002110:	08009cc0 	.word	0x08009cc0
  ldr r2, =_sbss
 8002114:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002118:	20000490 	.word	0x20000490

0800211c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800211c:	e7fe      	b.n	800211c <ADC1_2_IRQHandler>
	...

08002120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002124:	4b08      	ldr	r3, [pc, #32]	@ (8002148 <HAL_Init+0x28>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a07      	ldr	r2, [pc, #28]	@ (8002148 <HAL_Init+0x28>)
 800212a:	f043 0310 	orr.w	r3, r3, #16
 800212e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002130:	2003      	movs	r0, #3
 8002132:	f001 fb51 	bl	80037d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002136:	200f      	movs	r0, #15
 8002138:	f000 f808 	bl	800214c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800213c:	f7ff fd9a 	bl	8001c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40022000 	.word	0x40022000

0800214c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002154:	4b12      	ldr	r3, [pc, #72]	@ (80021a0 <HAL_InitTick+0x54>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4b12      	ldr	r3, [pc, #72]	@ (80021a4 <HAL_InitTick+0x58>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	4619      	mov	r1, r3
 800215e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002162:	fbb3 f3f1 	udiv	r3, r3, r1
 8002166:	fbb2 f3f3 	udiv	r3, r2, r3
 800216a:	4618      	mov	r0, r3
 800216c:	f001 fb69 	bl	8003842 <HAL_SYSTICK_Config>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e00e      	b.n	8002198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b0f      	cmp	r3, #15
 800217e:	d80a      	bhi.n	8002196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002180:	2200      	movs	r2, #0
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	f04f 30ff 	mov.w	r0, #4294967295
 8002188:	f001 fb31 	bl	80037ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800218c:	4a06      	ldr	r2, [pc, #24]	@ (80021a8 <HAL_InitTick+0x5c>)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	e000      	b.n	8002198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000000 	.word	0x20000000
 80021a4:	20000008 	.word	0x20000008
 80021a8:	20000004 	.word	0x20000004

080021ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b0:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <HAL_IncTick+0x1c>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	4b05      	ldr	r3, [pc, #20]	@ (80021cc <HAL_IncTick+0x20>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4413      	add	r3, r2
 80021bc:	4a03      	ldr	r2, [pc, #12]	@ (80021cc <HAL_IncTick+0x20>)
 80021be:	6013      	str	r3, [r2, #0]
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr
 80021c8:	20000008 	.word	0x20000008
 80021cc:	20000340 	.word	0x20000340

080021d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return uwTick;
 80021d4:	4b02      	ldr	r3, [pc, #8]	@ (80021e0 <HAL_GetTick+0x10>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	20000340 	.word	0x20000340

080021e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021ec:	f7ff fff0 	bl	80021d0 <HAL_GetTick>
 80021f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fc:	d005      	beq.n	800220a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <HAL_Delay+0x44>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4413      	add	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800220a:	bf00      	nop
 800220c:	f7ff ffe0 	bl	80021d0 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	429a      	cmp	r2, r3
 800221a:	d8f7      	bhi.n	800220c <HAL_Delay+0x28>
  {
  }
}
 800221c:	bf00      	nop
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000008 	.word	0x20000008

0800222c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e0be      	b.n	80023cc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002258:	2b00      	cmp	r3, #0
 800225a:	d109      	bne.n	8002270 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff fd34 	bl	8001cd8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 fbf1 	bl	8002a58 <ADC_ConversionStop_Disable>
 8002276:	4603      	mov	r3, r0
 8002278:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 8099 	bne.w	80023ba <HAL_ADC_Init+0x18e>
 8002288:	7dfb      	ldrb	r3, [r7, #23]
 800228a:	2b00      	cmp	r3, #0
 800228c:	f040 8095 	bne.w	80023ba <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002294:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002298:	f023 0302 	bic.w	r3, r3, #2
 800229c:	f043 0202 	orr.w	r2, r3, #2
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022ac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	7b1b      	ldrb	r3, [r3, #12]
 80022b2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022b4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022c4:	d003      	beq.n	80022ce <HAL_ADC_Init+0xa2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d102      	bne.n	80022d4 <HAL_ADC_Init+0xa8>
 80022ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022d2:	e000      	b.n	80022d6 <HAL_ADC_Init+0xaa>
 80022d4:	2300      	movs	r3, #0
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	7d1b      	ldrb	r3, [r3, #20]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d119      	bne.n	8002318 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	7b1b      	ldrb	r3, [r3, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d109      	bne.n	8002300 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	035a      	lsls	r2, r3, #13
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	e00b      	b.n	8002318 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002304:	f043 0220 	orr.w	r2, r3, #32
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002310:	f043 0201 	orr.w	r2, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	430a      	orrs	r2, r1
 800232a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	4b28      	ldr	r3, [pc, #160]	@ (80023d4 <HAL_ADC_Init+0x1a8>)
 8002334:	4013      	ands	r3, r2
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6812      	ldr	r2, [r2, #0]
 800233a:	68b9      	ldr	r1, [r7, #8]
 800233c:	430b      	orrs	r3, r1
 800233e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002348:	d003      	beq.n	8002352 <HAL_ADC_Init+0x126>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d104      	bne.n	800235c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	3b01      	subs	r3, #1
 8002358:	051b      	lsls	r3, r3, #20
 800235a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002362:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	430a      	orrs	r2, r1
 800236e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	4b18      	ldr	r3, [pc, #96]	@ (80023d8 <HAL_ADC_Init+0x1ac>)
 8002378:	4013      	ands	r3, r2
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	429a      	cmp	r2, r3
 800237e:	d10b      	bne.n	8002398 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238a:	f023 0303 	bic.w	r3, r3, #3
 800238e:	f043 0201 	orr.w	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002396:	e018      	b.n	80023ca <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239c:	f023 0312 	bic.w	r3, r3, #18
 80023a0:	f043 0210 	orr.w	r2, r3, #16
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ac:	f043 0201 	orr.w	r2, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023b8:	e007      	b.n	80023ca <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023be:	f043 0210 	orr.w	r2, r3, #16
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	ffe1f7fd 	.word	0xffe1f7fd
 80023d8:	ff1f0efe 	.word	0xff1f0efe

080023dc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_Start+0x1a>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e098      	b.n	8002528 <HAL_ADC_Start+0x14c>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fad0 	bl	80029a4 <ADC_Enable>
 8002404:	4603      	mov	r3, r0
 8002406:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f040 8087 	bne.w	800251e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002414:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a41      	ldr	r2, [pc, #260]	@ (8002530 <HAL_ADC_Start+0x154>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d105      	bne.n	800243a <HAL_ADC_Start+0x5e>
 800242e:	4b41      	ldr	r3, [pc, #260]	@ (8002534 <HAL_ADC_Start+0x158>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d115      	bne.n	8002466 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002450:	2b00      	cmp	r3, #0
 8002452:	d026      	beq.n	80024a2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002458:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800245c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002464:	e01d      	b.n	80024a2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a2f      	ldr	r2, [pc, #188]	@ (8002534 <HAL_ADC_Start+0x158>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d004      	beq.n	8002486 <HAL_ADC_Start+0xaa>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a2b      	ldr	r2, [pc, #172]	@ (8002530 <HAL_ADC_Start+0x154>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d10d      	bne.n	80024a2 <HAL_ADC_Start+0xc6>
 8002486:	4b2b      	ldr	r3, [pc, #172]	@ (8002534 <HAL_ADC_Start+0x158>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800248e:	2b00      	cmp	r3, #0
 8002490:	d007      	beq.n	80024a2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002496:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800249a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d006      	beq.n	80024bc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b2:	f023 0206 	bic.w	r2, r3, #6
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80024ba:	e002      	b.n	80024c2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f06f 0202 	mvn.w	r2, #2
 80024d2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80024de:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80024e2:	d113      	bne.n	800250c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80024e8:	4a11      	ldr	r2, [pc, #68]	@ (8002530 <HAL_ADC_Start+0x154>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d105      	bne.n	80024fa <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80024ee:	4b11      	ldr	r3, [pc, #68]	@ (8002534 <HAL_ADC_Start+0x158>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d108      	bne.n	800250c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	e00c      	b.n	8002526 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	e003      	b.n	8002526 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002526:	7bfb      	ldrb	r3, [r7, #15]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40012800 	.word	0x40012800
 8002534:	40012400 	.word	0x40012400

08002538 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_ADC_Stop+0x1a>
 800254e:	2302      	movs	r3, #2
 8002550:	e01a      	b.n	8002588 <HAL_ADC_Stop+0x50>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 fa7c 	bl	8002a58 <ADC_ConversionStop_Disable>
 8002560:	4603      	mov	r3, r0
 8002562:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d109      	bne.n	800257e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002572:	f023 0301 	bic.w	r3, r3, #1
 8002576:	f043 0201 	orr.w	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002586:	7bfb      	ldrb	r3, [r7, #15]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002590:	b590      	push	{r4, r7, lr}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80025a6:	f7ff fe13 	bl	80021d0 <HAL_GetTick>
 80025aa:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00b      	beq.n	80025d2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025be:	f043 0220 	orr.w	r2, r3, #32
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e0d3      	b.n	800277a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d131      	bne.n	8002644 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d12a      	bne.n	8002644 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80025ee:	e021      	b.n	8002634 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f6:	d01d      	beq.n	8002634 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d007      	beq.n	800260e <HAL_ADC_PollForConversion+0x7e>
 80025fe:	f7ff fde7 	bl	80021d0 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d212      	bcs.n	8002634 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10b      	bne.n	8002634 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002620:	f043 0204 	orr.w	r2, r3, #4
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e0a2      	b.n	800277a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0d6      	beq.n	80025f0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002642:	e070      	b.n	8002726 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002644:	4b4f      	ldr	r3, [pc, #316]	@ (8002784 <HAL_ADC_PollForConversion+0x1f4>)
 8002646:	681c      	ldr	r4, [r3, #0]
 8002648:	2002      	movs	r0, #2
 800264a:	f001 ff83 	bl	8004554 <HAL_RCCEx_GetPeriphCLKFreq>
 800264e:	4603      	mov	r3, r0
 8002650:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6919      	ldr	r1, [r3, #16]
 800265a:	4b4b      	ldr	r3, [pc, #300]	@ (8002788 <HAL_ADC_PollForConversion+0x1f8>)
 800265c:	400b      	ands	r3, r1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d118      	bne.n	8002694 <HAL_ADC_PollForConversion+0x104>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68d9      	ldr	r1, [r3, #12]
 8002668:	4b48      	ldr	r3, [pc, #288]	@ (800278c <HAL_ADC_PollForConversion+0x1fc>)
 800266a:	400b      	ands	r3, r1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d111      	bne.n	8002694 <HAL_ADC_PollForConversion+0x104>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6919      	ldr	r1, [r3, #16]
 8002676:	4b46      	ldr	r3, [pc, #280]	@ (8002790 <HAL_ADC_PollForConversion+0x200>)
 8002678:	400b      	ands	r3, r1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d108      	bne.n	8002690 <HAL_ADC_PollForConversion+0x100>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68d9      	ldr	r1, [r3, #12]
 8002684:	4b43      	ldr	r3, [pc, #268]	@ (8002794 <HAL_ADC_PollForConversion+0x204>)
 8002686:	400b      	ands	r3, r1
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_ADC_PollForConversion+0x100>
 800268c:	2314      	movs	r3, #20
 800268e:	e020      	b.n	80026d2 <HAL_ADC_PollForConversion+0x142>
 8002690:	2329      	movs	r3, #41	@ 0x29
 8002692:	e01e      	b.n	80026d2 <HAL_ADC_PollForConversion+0x142>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6919      	ldr	r1, [r3, #16]
 800269a:	4b3d      	ldr	r3, [pc, #244]	@ (8002790 <HAL_ADC_PollForConversion+0x200>)
 800269c:	400b      	ands	r3, r1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d106      	bne.n	80026b0 <HAL_ADC_PollForConversion+0x120>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68d9      	ldr	r1, [r3, #12]
 80026a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002794 <HAL_ADC_PollForConversion+0x204>)
 80026aa:	400b      	ands	r3, r1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00d      	beq.n	80026cc <HAL_ADC_PollForConversion+0x13c>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6919      	ldr	r1, [r3, #16]
 80026b6:	4b38      	ldr	r3, [pc, #224]	@ (8002798 <HAL_ADC_PollForConversion+0x208>)
 80026b8:	400b      	ands	r3, r1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d108      	bne.n	80026d0 <HAL_ADC_PollForConversion+0x140>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68d9      	ldr	r1, [r3, #12]
 80026c4:	4b34      	ldr	r3, [pc, #208]	@ (8002798 <HAL_ADC_PollForConversion+0x208>)
 80026c6:	400b      	ands	r3, r1
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_ADC_PollForConversion+0x140>
 80026cc:	2354      	movs	r3, #84	@ 0x54
 80026ce:	e000      	b.n	80026d2 <HAL_ADC_PollForConversion+0x142>
 80026d0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80026d8:	e021      	b.n	800271e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e0:	d01a      	beq.n	8002718 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d007      	beq.n	80026f8 <HAL_ADC_PollForConversion+0x168>
 80026e8:	f7ff fd72 	bl	80021d0 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d20f      	bcs.n	8002718 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d90b      	bls.n	8002718 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002704:	f043 0204 	orr.w	r2, r3, #4
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e030      	b.n	800277a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	3301      	adds	r3, #1
 800271c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	429a      	cmp	r2, r3
 8002724:	d8d9      	bhi.n	80026da <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f06f 0212 	mvn.w	r2, #18
 800272e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002734:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002746:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800274a:	d115      	bne.n	8002778 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002750:	2b00      	cmp	r3, #0
 8002752:	d111      	bne.n	8002778 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002758:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002764:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d105      	bne.n	8002778 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002770:	f043 0201 	orr.w	r2, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	371c      	adds	r7, #28
 800277e:	46bd      	mov	sp, r7
 8002780:	bd90      	pop	{r4, r7, pc}
 8002782:	bf00      	nop
 8002784:	20000000 	.word	0x20000000
 8002788:	24924924 	.word	0x24924924
 800278c:	00924924 	.word	0x00924924
 8002790:	12492492 	.word	0x12492492
 8002794:	00492492 	.word	0x00492492
 8002798:	00249249 	.word	0x00249249

0800279c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x20>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e0dc      	b.n	800298e <HAL_ADC_ConfigChannel+0x1da>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b06      	cmp	r3, #6
 80027e2:	d81c      	bhi.n	800281e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	3b05      	subs	r3, #5
 80027f6:	221f      	movs	r2, #31
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	4019      	ands	r1, r3
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	6818      	ldr	r0, [r3, #0]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	3b05      	subs	r3, #5
 8002810:	fa00 f203 	lsl.w	r2, r0, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	635a      	str	r2, [r3, #52]	@ 0x34
 800281c:	e03c      	b.n	8002898 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b0c      	cmp	r3, #12
 8002824:	d81c      	bhi.n	8002860 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	3b23      	subs	r3, #35	@ 0x23
 8002838:	221f      	movs	r2, #31
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43db      	mvns	r3, r3
 8002840:	4019      	ands	r1, r3
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	3b23      	subs	r3, #35	@ 0x23
 8002852:	fa00 f203 	lsl.w	r2, r0, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	631a      	str	r2, [r3, #48]	@ 0x30
 800285e:	e01b      	b.n	8002898 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	3b41      	subs	r3, #65	@ 0x41
 8002872:	221f      	movs	r2, #31
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	4019      	ands	r1, r3
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	6818      	ldr	r0, [r3, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	3b41      	subs	r3, #65	@ 0x41
 800288c:	fa00 f203 	lsl.w	r2, r0, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b09      	cmp	r3, #9
 800289e:	d91c      	bls.n	80028da <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68d9      	ldr	r1, [r3, #12]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	4613      	mov	r3, r2
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	4413      	add	r3, r2
 80028b0:	3b1e      	subs	r3, #30
 80028b2:	2207      	movs	r2, #7
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	4019      	ands	r1, r3
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	6898      	ldr	r0, [r3, #8]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	3b1e      	subs	r3, #30
 80028cc:	fa00 f203 	lsl.w	r2, r0, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	60da      	str	r2, [r3, #12]
 80028d8:	e019      	b.n	800290e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6919      	ldr	r1, [r3, #16]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4613      	mov	r3, r2
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	4413      	add	r3, r2
 80028ea:	2207      	movs	r2, #7
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	4019      	ands	r1, r3
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	6898      	ldr	r0, [r3, #8]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4613      	mov	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4413      	add	r3, r2
 8002902:	fa00 f203 	lsl.w	r2, r0, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b10      	cmp	r3, #16
 8002914:	d003      	beq.n	800291e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800291a:	2b11      	cmp	r3, #17
 800291c:	d132      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a1d      	ldr	r2, [pc, #116]	@ (8002998 <HAL_ADC_ConfigChannel+0x1e4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d125      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d126      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002944:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b10      	cmp	r3, #16
 800294c:	d11a      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800294e:	4b13      	ldr	r3, [pc, #76]	@ (800299c <HAL_ADC_ConfigChannel+0x1e8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a13      	ldr	r2, [pc, #76]	@ (80029a0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002954:	fba2 2303 	umull	r2, r3, r2, r3
 8002958:	0c9a      	lsrs	r2, r3, #18
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002964:	e002      	b.n	800296c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	3b01      	subs	r3, #1
 800296a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f9      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x1b2>
 8002972:	e007      	b.n	8002984 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002978:	f043 0220 	orr.w	r2, r3, #32
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800298c:	7bfb      	ldrb	r3, [r7, #15]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr
 8002998:	40012400 	.word	0x40012400
 800299c:	20000000 	.word	0x20000000
 80029a0:	431bde83 	.word	0x431bde83

080029a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d040      	beq.n	8002a44 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0201 	orr.w	r2, r2, #1
 80029d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002a50 <ADC_Enable+0xac>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a54 <ADC_Enable+0xb0>)
 80029d8:	fba2 2303 	umull	r2, r3, r2, r3
 80029dc:	0c9b      	lsrs	r3, r3, #18
 80029de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029e0:	e002      	b.n	80029e8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	3b01      	subs	r3, #1
 80029e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f9      	bne.n	80029e2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029ee:	f7ff fbef 	bl	80021d0 <HAL_GetTick>
 80029f2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80029f4:	e01f      	b.n	8002a36 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029f6:	f7ff fbeb 	bl	80021d0 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d918      	bls.n	8002a36 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d011      	beq.n	8002a36 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a16:	f043 0210 	orr.w	r2, r3, #16
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a22:	f043 0201 	orr.w	r2, r3, #1
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e007      	b.n	8002a46 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d1d8      	bne.n	80029f6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000000 	.word	0x20000000
 8002a54:	431bde83 	.word	0x431bde83

08002a58 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d12e      	bne.n	8002ad0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0201 	bic.w	r2, r2, #1
 8002a80:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a82:	f7ff fba5 	bl	80021d0 <HAL_GetTick>
 8002a86:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a88:	e01b      	b.n	8002ac2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a8a:	f7ff fba1 	bl	80021d0 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d914      	bls.n	8002ac2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d10d      	bne.n	8002ac2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aaa:	f043 0210 	orr.w	r2, r3, #16
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab6:	f043 0201 	orr.w	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e007      	b.n	8002ad2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d0dc      	beq.n	8002a8a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002adc:	b590      	push	{r4, r7, lr}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d101      	bne.n	8002afa <HAL_ADCEx_Calibration_Start+0x1e>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e097      	b.n	8002c2a <HAL_ADCEx_Calibration_Start+0x14e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff ffa8 	bl	8002a58 <ADC_ConversionStop_Disable>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff ff49 	bl	80029a4 <ADC_Enable>
 8002b12:	4603      	mov	r3, r0
 8002b14:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002b16:	7dfb      	ldrb	r3, [r7, #23]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f040 8081 	bne.w	8002c20 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b22:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b26:	f023 0302 	bic.w	r3, r3, #2
 8002b2a:	f043 0202 	orr.w	r2, r3, #2
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002b32:	4b40      	ldr	r3, [pc, #256]	@ (8002c34 <HAL_ADCEx_Calibration_Start+0x158>)
 8002b34:	681c      	ldr	r4, [r3, #0]
 8002b36:	2002      	movs	r0, #2
 8002b38:	f001 fd0c 	bl	8004554 <HAL_RCCEx_GetPeriphCLKFreq>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002b42:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002b44:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002b46:	e002      	b.n	8002b4e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f9      	bne.n	8002b48 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0208 	orr.w	r2, r2, #8
 8002b62:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002b64:	f7ff fb34 	bl	80021d0 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002b6a:	e01b      	b.n	8002ba4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002b6c:	f7ff fb30 	bl	80021d0 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b0a      	cmp	r3, #10
 8002b78:	d914      	bls.n	8002ba4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00d      	beq.n	8002ba4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8c:	f023 0312 	bic.w	r3, r3, #18
 8002b90:	f043 0210 	orr.w	r2, r3, #16
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e042      	b.n	8002c2a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1dc      	bne.n	8002b6c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f042 0204 	orr.w	r2, r2, #4
 8002bc0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002bc2:	f7ff fb05 	bl	80021d0 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002bc8:	e01b      	b.n	8002c02 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002bca:	f7ff fb01 	bl	80021d0 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b0a      	cmp	r3, #10
 8002bd6:	d914      	bls.n	8002c02 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00d      	beq.n	8002c02 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bea:	f023 0312 	bic.w	r3, r3, #18
 8002bee:	f043 0210 	orr.w	r2, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e013      	b.n	8002c2a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1dc      	bne.n	8002bca <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c14:	f023 0303 	bic.w	r3, r3, #3
 8002c18:	f043 0201 	orr.w	r2, r3, #1
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	371c      	adds	r7, #28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd90      	pop	{r4, r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000000 	.word	0x20000000

08002c38 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e0ed      	b.n	8002e26 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d102      	bne.n	8002c5c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff f87a 	bl	8001d50 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c6c:	f7ff fab0 	bl	80021d0 <HAL_GetTick>
 8002c70:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c72:	e012      	b.n	8002c9a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c74:	f7ff faac 	bl	80021d0 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b0a      	cmp	r3, #10
 8002c80:	d90b      	bls.n	8002c9a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c86:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2205      	movs	r2, #5
 8002c92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e0c5      	b.n	8002e26 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0e5      	beq.n	8002c74 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0202 	bic.w	r2, r2, #2
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cb8:	f7ff fa8a 	bl	80021d0 <HAL_GetTick>
 8002cbc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002cbe:	e012      	b.n	8002ce6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cc0:	f7ff fa86 	bl	80021d0 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b0a      	cmp	r3, #10
 8002ccc:	d90b      	bls.n	8002ce6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2205      	movs	r2, #5
 8002cde:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e09f      	b.n	8002e26 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1e5      	bne.n	8002cc0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	7e1b      	ldrb	r3, [r3, #24]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d108      	bne.n	8002d0e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e007      	b.n	8002d1e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	7e5b      	ldrb	r3, [r3, #25]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d108      	bne.n	8002d38 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	e007      	b.n	8002d48 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d46:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	7e9b      	ldrb	r3, [r3, #26]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d108      	bne.n	8002d62 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0220 	orr.w	r2, r2, #32
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	e007      	b.n	8002d72 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0220 	bic.w	r2, r2, #32
 8002d70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	7edb      	ldrb	r3, [r3, #27]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d108      	bne.n	8002d8c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0210 	bic.w	r2, r2, #16
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	e007      	b.n	8002d9c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0210 	orr.w	r2, r2, #16
 8002d9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	7f1b      	ldrb	r3, [r3, #28]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d108      	bne.n	8002db6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0208 	orr.w	r2, r2, #8
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	e007      	b.n	8002dc6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0208 	bic.w	r2, r2, #8
 8002dc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	7f5b      	ldrb	r3, [r3, #29]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d108      	bne.n	8002de0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 0204 	orr.w	r2, r2, #4
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	e007      	b.n	8002df0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0204 	bic.w	r2, r2, #4
 8002dee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	ea42 0103 	orr.w	r1, r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	1e5a      	subs	r2, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b087      	sub	sp, #28
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e44:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002e46:	7cfb      	ldrb	r3, [r7, #19]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d003      	beq.n	8002e54 <HAL_CAN_ConfigFilter+0x26>
 8002e4c:	7cfb      	ldrb	r3, [r7, #19]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	f040 80aa 	bne.w	8002fa8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002e5a:	f043 0201 	orr.w	r2, r3, #1
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	401a      	ands	r2, r3
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d123      	bne.n	8002ed6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	43db      	mvns	r3, r3
 8002e98:	401a      	ands	r2, r3
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002eb0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	3248      	adds	r2, #72	@ 0x48
 8002eb6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002eca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ecc:	6979      	ldr	r1, [r7, #20]
 8002ece:	3348      	adds	r3, #72	@ 0x48
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	440b      	add	r3, r1
 8002ed4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d122      	bne.n	8002f24 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002efe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	3248      	adds	r2, #72	@ 0x48
 8002f04:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f18:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f1a:	6979      	ldr	r1, [r7, #20]
 8002f1c:	3348      	adds	r3, #72	@ 0x48
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	440b      	add	r3, r1
 8002f22:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d109      	bne.n	8002f40 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	401a      	ands	r2, r3
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002f3e:	e007      	b.n	8002f50 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d109      	bne.n	8002f6c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	43db      	mvns	r3, r3
 8002f62:	401a      	ands	r2, r3
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002f6a:	e007      	b.n	8002f7c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	431a      	orrs	r2, r3
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d107      	bne.n	8002f94 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002f9a:	f023 0201 	bic.w	r2, r3, #1
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e006      	b.n	8002fb6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
  }
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	371c      	adds	r7, #28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d12e      	bne.n	8003032 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fec:	f7ff f8f0 	bl	80021d0 <HAL_GetTick>
 8002ff0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ff2:	e012      	b.n	800301a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ff4:	f7ff f8ec 	bl	80021d0 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b0a      	cmp	r3, #10
 8003000:	d90b      	bls.n	800301a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003006:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2205      	movs	r2, #5
 8003012:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e012      	b.n	8003040 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1e5      	bne.n	8002ff4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	e006      	b.n	8003040 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003036:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
  }
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003048:	b480      	push	{r7}
 800304a:	b089      	sub	sp, #36	@ 0x24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
 8003054:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 3020 	ldrb.w	r3, [r3, #32]
 800305c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003066:	7ffb      	ldrb	r3, [r7, #31]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d003      	beq.n	8003074 <HAL_CAN_AddTxMessage+0x2c>
 800306c:	7ffb      	ldrb	r3, [r7, #31]
 800306e:	2b02      	cmp	r3, #2
 8003070:	f040 80ad 	bne.w	80031ce <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10a      	bne.n	8003094 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003084:	2b00      	cmp	r3, #0
 8003086:	d105      	bne.n	8003094 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 8095 	beq.w	80031be <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	0e1b      	lsrs	r3, r3, #24
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800309e:	2201      	movs	r2, #1
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	409a      	lsls	r2, r3
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10d      	bne.n	80030cc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80030ba:	68f9      	ldr	r1, [r7, #12]
 80030bc:	6809      	ldr	r1, [r1, #0]
 80030be:	431a      	orrs	r2, r3
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	3318      	adds	r3, #24
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	440b      	add	r3, r1
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	e00f      	b.n	80030ec <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030d6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030dc:	68f9      	ldr	r1, [r7, #12]
 80030de:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80030e0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	3318      	adds	r3, #24
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	440b      	add	r3, r1
 80030ea:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6819      	ldr	r1, [r3, #0]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	691a      	ldr	r2, [r3, #16]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	3318      	adds	r3, #24
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	440b      	add	r3, r1
 80030fc:	3304      	adds	r3, #4
 80030fe:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	7d1b      	ldrb	r3, [r3, #20]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d111      	bne.n	800312c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	3318      	adds	r3, #24
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	4413      	add	r3, r2
 8003114:	3304      	adds	r3, #4
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	6811      	ldr	r1, [r2, #0]
 800311c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	3318      	adds	r3, #24
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	440b      	add	r3, r1
 8003128:	3304      	adds	r3, #4
 800312a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3307      	adds	r3, #7
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	061a      	lsls	r2, r3, #24
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3306      	adds	r3, #6
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	041b      	lsls	r3, r3, #16
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3305      	adds	r3, #5
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	021b      	lsls	r3, r3, #8
 8003146:	4313      	orrs	r3, r2
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	3204      	adds	r2, #4
 800314c:	7812      	ldrb	r2, [r2, #0]
 800314e:	4610      	mov	r0, r2
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	6811      	ldr	r1, [r2, #0]
 8003154:	ea43 0200 	orr.w	r2, r3, r0
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	440b      	add	r3, r1
 800315e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003162:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3303      	adds	r3, #3
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	061a      	lsls	r2, r3, #24
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3302      	adds	r3, #2
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	041b      	lsls	r3, r3, #16
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3301      	adds	r3, #1
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	021b      	lsls	r3, r3, #8
 800317e:	4313      	orrs	r3, r2
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	7812      	ldrb	r2, [r2, #0]
 8003184:	4610      	mov	r0, r2
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	6811      	ldr	r1, [r2, #0]
 800318a:	ea43 0200 	orr.w	r2, r3, r0
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	440b      	add	r3, r1
 8003194:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003198:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	3318      	adds	r3, #24
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	4413      	add	r3, r2
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	6811      	ldr	r1, [r2, #0]
 80031ac:	f043 0201 	orr.w	r2, r3, #1
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	3318      	adds	r3, #24
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	440b      	add	r3, r1
 80031b8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80031ba:	2300      	movs	r3, #0
 80031bc:	e00e      	b.n	80031dc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e006      	b.n	80031dc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
  }
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3724      	adds	r7, #36	@ 0x24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr

080031e6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b08a      	sub	sp, #40	@ 0x28
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80031ee:	2300      	movs	r3, #0
 80031f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d07c      	beq.n	8003326 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d023      	beq.n	800327e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2201      	movs	r2, #1
 800323c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f983 	bl	8003554 <HAL_CAN_TxMailbox0CompleteCallback>
 800324e:	e016      	b.n	800327e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b00      	cmp	r3, #0
 8003258:	d004      	beq.n	8003264 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003260:	627b      	str	r3, [r7, #36]	@ 0x24
 8003262:	e00c      	b.n	800327e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d004      	beq.n	8003278 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003274:	627b      	str	r3, [r7, #36]	@ 0x24
 8003276:	e002      	b.n	800327e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f986 	bl	800358a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003284:	2b00      	cmp	r3, #0
 8003286:	d024      	beq.n	80032d2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003290:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f962 	bl	8003566 <HAL_CAN_TxMailbox1CompleteCallback>
 80032a2:	e016      	b.n	80032d2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d004      	beq.n	80032b8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80032ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80032b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80032b6:	e00c      	b.n	80032d2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d004      	beq.n	80032cc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ca:	e002      	b.n	80032d2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f965 	bl	800359c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d024      	beq.n	8003326 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80032e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f941 	bl	8003578 <HAL_CAN_TxMailbox2CompleteCallback>
 80032f6:	e016      	b.n	8003326 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d004      	beq.n	800330c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003304:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003308:	627b      	str	r3, [r7, #36]	@ 0x24
 800330a:	e00c      	b.n	8003326 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d004      	beq.n	8003320 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800331c:	627b      	str	r3, [r7, #36]	@ 0x24
 800331e:	e002      	b.n	8003326 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f944 	bl	80035ae <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00c      	beq.n	800334a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	2b00      	cmp	r3, #0
 8003338:	d007      	beq.n	800334a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800333a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003340:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2210      	movs	r2, #16
 8003348:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00b      	beq.n	800336c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d006      	beq.n	800336c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2208      	movs	r2, #8
 8003364:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f933 	bl	80035d2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d009      	beq.n	800338a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d002      	beq.n	800338a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f91b 	bl	80035c0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00c      	beq.n	80033ae <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f003 0310 	and.w	r3, r3, #16
 800339a:	2b00      	cmp	r3, #0
 800339c:	d007      	beq.n	80033ae <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800339e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033a4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2210      	movs	r2, #16
 80033ac:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	f003 0320 	and.w	r3, r3, #32
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00b      	beq.n	80033d0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d006      	beq.n	80033d0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2208      	movs	r2, #8
 80033c8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f913 	bl	80035f6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d009      	beq.n	80033ee <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f8fb 	bl	80035e4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00b      	beq.n	8003410 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d006      	beq.n	8003410 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2210      	movs	r2, #16
 8003408:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f8fc 	bl	8003608 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00b      	beq.n	8003432 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b00      	cmp	r3, #0
 8003422:	d006      	beq.n	8003432 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2208      	movs	r2, #8
 800342a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f8f4 	bl	800361a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d07b      	beq.n	8003534 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b00      	cmp	r3, #0
 8003444:	d072      	beq.n	800352c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800345a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003478:	f043 0302 	orr.w	r3, r3, #2
 800347c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003494:	f043 0304 	orr.w	r3, r3, #4
 8003498:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d043      	beq.n	800352c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d03e      	beq.n	800352c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034b4:	2b60      	cmp	r3, #96	@ 0x60
 80034b6:	d02b      	beq.n	8003510 <HAL_CAN_IRQHandler+0x32a>
 80034b8:	2b60      	cmp	r3, #96	@ 0x60
 80034ba:	d82e      	bhi.n	800351a <HAL_CAN_IRQHandler+0x334>
 80034bc:	2b50      	cmp	r3, #80	@ 0x50
 80034be:	d022      	beq.n	8003506 <HAL_CAN_IRQHandler+0x320>
 80034c0:	2b50      	cmp	r3, #80	@ 0x50
 80034c2:	d82a      	bhi.n	800351a <HAL_CAN_IRQHandler+0x334>
 80034c4:	2b40      	cmp	r3, #64	@ 0x40
 80034c6:	d019      	beq.n	80034fc <HAL_CAN_IRQHandler+0x316>
 80034c8:	2b40      	cmp	r3, #64	@ 0x40
 80034ca:	d826      	bhi.n	800351a <HAL_CAN_IRQHandler+0x334>
 80034cc:	2b30      	cmp	r3, #48	@ 0x30
 80034ce:	d010      	beq.n	80034f2 <HAL_CAN_IRQHandler+0x30c>
 80034d0:	2b30      	cmp	r3, #48	@ 0x30
 80034d2:	d822      	bhi.n	800351a <HAL_CAN_IRQHandler+0x334>
 80034d4:	2b10      	cmp	r3, #16
 80034d6:	d002      	beq.n	80034de <HAL_CAN_IRQHandler+0x2f8>
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d005      	beq.n	80034e8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80034dc:	e01d      	b.n	800351a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	f043 0308 	orr.w	r3, r3, #8
 80034e4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80034e6:	e019      	b.n	800351c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80034e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ea:	f043 0310 	orr.w	r3, r3, #16
 80034ee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80034f0:	e014      	b.n	800351c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80034f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f4:	f043 0320 	orr.w	r3, r3, #32
 80034f8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80034fa:	e00f      	b.n	800351c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80034fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003502:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003504:	e00a      	b.n	800351c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003508:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800350c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800350e:	e005      	b.n	800351c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003516:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003518:	e000      	b.n	800351c <HAL_CAN_IRQHandler+0x336>
            break;
 800351a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699a      	ldr	r2, [r3, #24]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800352a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2204      	movs	r2, #4
 8003532:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003536:	2b00      	cmp	r3, #0
 8003538:	d008      	beq.n	800354c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800353e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f870 	bl	800362c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800354c:	bf00      	nop
 800354e:	3728      	adds	r7, #40	@ 0x28
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	bc80      	pop	{r7}
 8003564:	4770      	bx	lr

08003566 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr

08003578 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	bc80      	pop	{r7}
 8003588:	4770      	bx	lr

0800358a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr

0800359c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bc80      	pop	{r7}
 80035ac:	4770      	bx	lr

080035ae <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr

080035c0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr

080035d2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr

080035e4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr

080035f6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr

08003608 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr

0800361a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr

0800362c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	4770      	bx	lr
	...

08003640 <__NVIC_SetPriorityGrouping>:
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003650:	4b0c      	ldr	r3, [pc, #48]	@ (8003684 <__NVIC_SetPriorityGrouping+0x44>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800365c:	4013      	ands	r3, r2
 800365e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003668:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800366c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003672:	4a04      	ldr	r2, [pc, #16]	@ (8003684 <__NVIC_SetPriorityGrouping+0x44>)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	60d3      	str	r3, [r2, #12]
}
 8003678:	bf00      	nop
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	bc80      	pop	{r7}
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	e000ed00 	.word	0xe000ed00

08003688 <__NVIC_GetPriorityGrouping>:
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800368c:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <__NVIC_GetPriorityGrouping+0x18>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	0a1b      	lsrs	r3, r3, #8
 8003692:	f003 0307 	and.w	r3, r3, #7
}
 8003696:	4618      	mov	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	bc80      	pop	{r7}
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	e000ed00 	.word	0xe000ed00

080036a4 <__NVIC_EnableIRQ>:
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	4603      	mov	r3, r0
 80036ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	db0b      	blt.n	80036ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	f003 021f 	and.w	r2, r3, #31
 80036bc:	4906      	ldr	r1, [pc, #24]	@ (80036d8 <__NVIC_EnableIRQ+0x34>)
 80036be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c2:	095b      	lsrs	r3, r3, #5
 80036c4:	2001      	movs	r0, #1
 80036c6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr
 80036d8:	e000e100 	.word	0xe000e100

080036dc <__NVIC_SetPriority>:
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	6039      	str	r1, [r7, #0]
 80036e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	db0a      	blt.n	8003706 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	490c      	ldr	r1, [pc, #48]	@ (8003728 <__NVIC_SetPriority+0x4c>)
 80036f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fa:	0112      	lsls	r2, r2, #4
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	440b      	add	r3, r1
 8003700:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003704:	e00a      	b.n	800371c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	b2da      	uxtb	r2, r3
 800370a:	4908      	ldr	r1, [pc, #32]	@ (800372c <__NVIC_SetPriority+0x50>)
 800370c:	79fb      	ldrb	r3, [r7, #7]
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	3b04      	subs	r3, #4
 8003714:	0112      	lsls	r2, r2, #4
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	440b      	add	r3, r1
 800371a:	761a      	strb	r2, [r3, #24]
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	e000e100 	.word	0xe000e100
 800372c:	e000ed00 	.word	0xe000ed00

08003730 <NVIC_EncodePriority>:
{
 8003730:	b480      	push	{r7}
 8003732:	b089      	sub	sp, #36	@ 0x24
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f1c3 0307 	rsb	r3, r3, #7
 800374a:	2b04      	cmp	r3, #4
 800374c:	bf28      	it	cs
 800374e:	2304      	movcs	r3, #4
 8003750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	3304      	adds	r3, #4
 8003756:	2b06      	cmp	r3, #6
 8003758:	d902      	bls.n	8003760 <NVIC_EncodePriority+0x30>
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	3b03      	subs	r3, #3
 800375e:	e000      	b.n	8003762 <NVIC_EncodePriority+0x32>
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003764:	f04f 32ff 	mov.w	r2, #4294967295
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43da      	mvns	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	401a      	ands	r2, r3
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003778:	f04f 31ff 	mov.w	r1, #4294967295
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	fa01 f303 	lsl.w	r3, r1, r3
 8003782:	43d9      	mvns	r1, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003788:	4313      	orrs	r3, r2
}
 800378a:	4618      	mov	r0, r3
 800378c:	3724      	adds	r7, #36	@ 0x24
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr

08003794 <SysTick_Config>:
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3b01      	subs	r3, #1
 80037a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037a4:	d301      	bcc.n	80037aa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80037a6:	2301      	movs	r3, #1
 80037a8:	e00f      	b.n	80037ca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037aa:	4a0a      	ldr	r2, [pc, #40]	@ (80037d4 <SysTick_Config+0x40>)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037b2:	210f      	movs	r1, #15
 80037b4:	f04f 30ff 	mov.w	r0, #4294967295
 80037b8:	f7ff ff90 	bl	80036dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037bc:	4b05      	ldr	r3, [pc, #20]	@ (80037d4 <SysTick_Config+0x40>)
 80037be:	2200      	movs	r2, #0
 80037c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037c2:	4b04      	ldr	r3, [pc, #16]	@ (80037d4 <SysTick_Config+0x40>)
 80037c4:	2207      	movs	r2, #7
 80037c6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	e000e010 	.word	0xe000e010

080037d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff ff2d 	bl	8003640 <__NVIC_SetPriorityGrouping>
}
 80037e6:	bf00      	nop
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b086      	sub	sp, #24
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	4603      	mov	r3, r0
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	607a      	str	r2, [r7, #4]
 80037fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003800:	f7ff ff42 	bl	8003688 <__NVIC_GetPriorityGrouping>
 8003804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	68b9      	ldr	r1, [r7, #8]
 800380a:	6978      	ldr	r0, [r7, #20]
 800380c:	f7ff ff90 	bl	8003730 <NVIC_EncodePriority>
 8003810:	4602      	mov	r2, r0
 8003812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003816:	4611      	mov	r1, r2
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff ff5f 	bl	80036dc <__NVIC_SetPriority>
}
 800381e:	bf00      	nop
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	4603      	mov	r3, r0
 800382e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff ff35 	bl	80036a4 <__NVIC_EnableIRQ>
}
 800383a:	bf00      	nop
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff ffa2 	bl	8003794 <SysTick_Config>
 8003850:	4603      	mov	r3, r0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800385c:	b480      	push	{r7}
 800385e:	b08b      	sub	sp, #44	@ 0x2c
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003866:	2300      	movs	r3, #0
 8003868:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800386a:	2300      	movs	r3, #0
 800386c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800386e:	e169      	b.n	8003b44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003870:	2201      	movs	r2, #1
 8003872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	4013      	ands	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	429a      	cmp	r2, r3
 800388a:	f040 8158 	bne.w	8003b3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	4a9a      	ldr	r2, [pc, #616]	@ (8003afc <HAL_GPIO_Init+0x2a0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d05e      	beq.n	8003956 <HAL_GPIO_Init+0xfa>
 8003898:	4a98      	ldr	r2, [pc, #608]	@ (8003afc <HAL_GPIO_Init+0x2a0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d875      	bhi.n	800398a <HAL_GPIO_Init+0x12e>
 800389e:	4a98      	ldr	r2, [pc, #608]	@ (8003b00 <HAL_GPIO_Init+0x2a4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d058      	beq.n	8003956 <HAL_GPIO_Init+0xfa>
 80038a4:	4a96      	ldr	r2, [pc, #600]	@ (8003b00 <HAL_GPIO_Init+0x2a4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d86f      	bhi.n	800398a <HAL_GPIO_Init+0x12e>
 80038aa:	4a96      	ldr	r2, [pc, #600]	@ (8003b04 <HAL_GPIO_Init+0x2a8>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d052      	beq.n	8003956 <HAL_GPIO_Init+0xfa>
 80038b0:	4a94      	ldr	r2, [pc, #592]	@ (8003b04 <HAL_GPIO_Init+0x2a8>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d869      	bhi.n	800398a <HAL_GPIO_Init+0x12e>
 80038b6:	4a94      	ldr	r2, [pc, #592]	@ (8003b08 <HAL_GPIO_Init+0x2ac>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d04c      	beq.n	8003956 <HAL_GPIO_Init+0xfa>
 80038bc:	4a92      	ldr	r2, [pc, #584]	@ (8003b08 <HAL_GPIO_Init+0x2ac>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d863      	bhi.n	800398a <HAL_GPIO_Init+0x12e>
 80038c2:	4a92      	ldr	r2, [pc, #584]	@ (8003b0c <HAL_GPIO_Init+0x2b0>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d046      	beq.n	8003956 <HAL_GPIO_Init+0xfa>
 80038c8:	4a90      	ldr	r2, [pc, #576]	@ (8003b0c <HAL_GPIO_Init+0x2b0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d85d      	bhi.n	800398a <HAL_GPIO_Init+0x12e>
 80038ce:	2b12      	cmp	r3, #18
 80038d0:	d82a      	bhi.n	8003928 <HAL_GPIO_Init+0xcc>
 80038d2:	2b12      	cmp	r3, #18
 80038d4:	d859      	bhi.n	800398a <HAL_GPIO_Init+0x12e>
 80038d6:	a201      	add	r2, pc, #4	@ (adr r2, 80038dc <HAL_GPIO_Init+0x80>)
 80038d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038dc:	08003957 	.word	0x08003957
 80038e0:	08003931 	.word	0x08003931
 80038e4:	08003943 	.word	0x08003943
 80038e8:	08003985 	.word	0x08003985
 80038ec:	0800398b 	.word	0x0800398b
 80038f0:	0800398b 	.word	0x0800398b
 80038f4:	0800398b 	.word	0x0800398b
 80038f8:	0800398b 	.word	0x0800398b
 80038fc:	0800398b 	.word	0x0800398b
 8003900:	0800398b 	.word	0x0800398b
 8003904:	0800398b 	.word	0x0800398b
 8003908:	0800398b 	.word	0x0800398b
 800390c:	0800398b 	.word	0x0800398b
 8003910:	0800398b 	.word	0x0800398b
 8003914:	0800398b 	.word	0x0800398b
 8003918:	0800398b 	.word	0x0800398b
 800391c:	0800398b 	.word	0x0800398b
 8003920:	08003939 	.word	0x08003939
 8003924:	0800394d 	.word	0x0800394d
 8003928:	4a79      	ldr	r2, [pc, #484]	@ (8003b10 <HAL_GPIO_Init+0x2b4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d013      	beq.n	8003956 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800392e:	e02c      	b.n	800398a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	623b      	str	r3, [r7, #32]
          break;
 8003936:	e029      	b.n	800398c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	3304      	adds	r3, #4
 800393e:	623b      	str	r3, [r7, #32]
          break;
 8003940:	e024      	b.n	800398c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	3308      	adds	r3, #8
 8003948:	623b      	str	r3, [r7, #32]
          break;
 800394a:	e01f      	b.n	800398c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	330c      	adds	r3, #12
 8003952:	623b      	str	r3, [r7, #32]
          break;
 8003954:	e01a      	b.n	800398c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d102      	bne.n	8003964 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800395e:	2304      	movs	r3, #4
 8003960:	623b      	str	r3, [r7, #32]
          break;
 8003962:	e013      	b.n	800398c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d105      	bne.n	8003978 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800396c:	2308      	movs	r3, #8
 800396e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	611a      	str	r2, [r3, #16]
          break;
 8003976:	e009      	b.n	800398c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003978:	2308      	movs	r3, #8
 800397a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69fa      	ldr	r2, [r7, #28]
 8003980:	615a      	str	r2, [r3, #20]
          break;
 8003982:	e003      	b.n	800398c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003984:	2300      	movs	r3, #0
 8003986:	623b      	str	r3, [r7, #32]
          break;
 8003988:	e000      	b.n	800398c <HAL_GPIO_Init+0x130>
          break;
 800398a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	2bff      	cmp	r3, #255	@ 0xff
 8003990:	d801      	bhi.n	8003996 <HAL_GPIO_Init+0x13a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	e001      	b.n	800399a <HAL_GPIO_Init+0x13e>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	3304      	adds	r3, #4
 800399a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	2bff      	cmp	r3, #255	@ 0xff
 80039a0:	d802      	bhi.n	80039a8 <HAL_GPIO_Init+0x14c>
 80039a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	e002      	b.n	80039ae <HAL_GPIO_Init+0x152>
 80039a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039aa:	3b08      	subs	r3, #8
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	210f      	movs	r1, #15
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	fa01 f303 	lsl.w	r3, r1, r3
 80039bc:	43db      	mvns	r3, r3
 80039be:	401a      	ands	r2, r3
 80039c0:	6a39      	ldr	r1, [r7, #32]
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	fa01 f303 	lsl.w	r3, r1, r3
 80039c8:	431a      	orrs	r2, r3
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 80b1 	beq.w	8003b3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80039dc:	4b4d      	ldr	r3, [pc, #308]	@ (8003b14 <HAL_GPIO_Init+0x2b8>)
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	4a4c      	ldr	r2, [pc, #304]	@ (8003b14 <HAL_GPIO_Init+0x2b8>)
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	6193      	str	r3, [r2, #24]
 80039e8:	4b4a      	ldr	r3, [pc, #296]	@ (8003b14 <HAL_GPIO_Init+0x2b8>)
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80039f4:	4a48      	ldr	r2, [pc, #288]	@ (8003b18 <HAL_GPIO_Init+0x2bc>)
 80039f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f8:	089b      	lsrs	r3, r3, #2
 80039fa:	3302      	adds	r3, #2
 80039fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a04:	f003 0303 	and.w	r3, r3, #3
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	220f      	movs	r2, #15
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	43db      	mvns	r3, r3
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	4013      	ands	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a40      	ldr	r2, [pc, #256]	@ (8003b1c <HAL_GPIO_Init+0x2c0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d013      	beq.n	8003a48 <HAL_GPIO_Init+0x1ec>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a3f      	ldr	r2, [pc, #252]	@ (8003b20 <HAL_GPIO_Init+0x2c4>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00d      	beq.n	8003a44 <HAL_GPIO_Init+0x1e8>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a3e      	ldr	r2, [pc, #248]	@ (8003b24 <HAL_GPIO_Init+0x2c8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d007      	beq.n	8003a40 <HAL_GPIO_Init+0x1e4>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a3d      	ldr	r2, [pc, #244]	@ (8003b28 <HAL_GPIO_Init+0x2cc>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d101      	bne.n	8003a3c <HAL_GPIO_Init+0x1e0>
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e006      	b.n	8003a4a <HAL_GPIO_Init+0x1ee>
 8003a3c:	2304      	movs	r3, #4
 8003a3e:	e004      	b.n	8003a4a <HAL_GPIO_Init+0x1ee>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e002      	b.n	8003a4a <HAL_GPIO_Init+0x1ee>
 8003a44:	2301      	movs	r3, #1
 8003a46:	e000      	b.n	8003a4a <HAL_GPIO_Init+0x1ee>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a4c:	f002 0203 	and.w	r2, r2, #3
 8003a50:	0092      	lsls	r2, r2, #2
 8003a52:	4093      	lsls	r3, r2
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a5a:	492f      	ldr	r1, [pc, #188]	@ (8003b18 <HAL_GPIO_Init+0x2bc>)
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5e:	089b      	lsrs	r3, r3, #2
 8003a60:	3302      	adds	r3, #2
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d006      	beq.n	8003a82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a74:	4b2d      	ldr	r3, [pc, #180]	@ (8003b2c <HAL_GPIO_Init+0x2d0>)
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	492c      	ldr	r1, [pc, #176]	@ (8003b2c <HAL_GPIO_Init+0x2d0>)
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	608b      	str	r3, [r1, #8]
 8003a80:	e006      	b.n	8003a90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003a82:	4b2a      	ldr	r3, [pc, #168]	@ (8003b2c <HAL_GPIO_Init+0x2d0>)
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	4928      	ldr	r1, [pc, #160]	@ (8003b2c <HAL_GPIO_Init+0x2d0>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d006      	beq.n	8003aaa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a9c:	4b23      	ldr	r3, [pc, #140]	@ (8003b2c <HAL_GPIO_Init+0x2d0>)
 8003a9e:	68da      	ldr	r2, [r3, #12]
 8003aa0:	4922      	ldr	r1, [pc, #136]	@ (8003b2c <HAL_GPIO_Init+0x2d0>)
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60cb      	str	r3, [r1, #12]
 8003aa8:	e006      	b.n	8003ab8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003aaa:	4b20      	ldr	r3, [pc, #128]	@ (8003b2c <HAL_GPIO_Init+0x2d0>)
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	491e      	ldr	r1, [pc, #120]	@ (8003b2c <HAL_GPIO_Init+0x2d0>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d006      	beq.n	8003ad2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ac4:	4b19      	ldr	r3, [pc, #100]	@ (8003b2c <HAL_GPIO_Init+0x2d0>)
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	4918      	ldr	r1, [pc, #96]	@ (8003b2c <HAL_GPIO_Init+0x2d0>)
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	604b      	str	r3, [r1, #4]
 8003ad0:	e006      	b.n	8003ae0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ad2:	4b16      	ldr	r3, [pc, #88]	@ (8003b2c <HAL_GPIO_Init+0x2d0>)
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	4914      	ldr	r1, [pc, #80]	@ (8003b2c <HAL_GPIO_Init+0x2d0>)
 8003adc:	4013      	ands	r3, r2
 8003ade:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d021      	beq.n	8003b30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003aec:	4b0f      	ldr	r3, [pc, #60]	@ (8003b2c <HAL_GPIO_Init+0x2d0>)
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	490e      	ldr	r1, [pc, #56]	@ (8003b2c <HAL_GPIO_Init+0x2d0>)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	600b      	str	r3, [r1, #0]
 8003af8:	e021      	b.n	8003b3e <HAL_GPIO_Init+0x2e2>
 8003afa:	bf00      	nop
 8003afc:	10320000 	.word	0x10320000
 8003b00:	10310000 	.word	0x10310000
 8003b04:	10220000 	.word	0x10220000
 8003b08:	10210000 	.word	0x10210000
 8003b0c:	10120000 	.word	0x10120000
 8003b10:	10110000 	.word	0x10110000
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40010000 	.word	0x40010000
 8003b1c:	40010800 	.word	0x40010800
 8003b20:	40010c00 	.word	0x40010c00
 8003b24:	40011000 	.word	0x40011000
 8003b28:	40011400 	.word	0x40011400
 8003b2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b30:	4b0b      	ldr	r3, [pc, #44]	@ (8003b60 <HAL_GPIO_Init+0x304>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	43db      	mvns	r3, r3
 8003b38:	4909      	ldr	r1, [pc, #36]	@ (8003b60 <HAL_GPIO_Init+0x304>)
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b40:	3301      	adds	r3, #1
 8003b42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f47f ae8e 	bne.w	8003870 <HAL_GPIO_Init+0x14>
  }
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	372c      	adds	r7, #44	@ 0x2c
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr
 8003b60:	40010400 	.word	0x40010400

08003b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	807b      	strh	r3, [r7, #2]
 8003b70:	4613      	mov	r3, r2
 8003b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b74:	787b      	ldrb	r3, [r7, #1]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b7a:	887a      	ldrh	r2, [r7, #2]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003b80:	e003      	b.n	8003b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b82:	887b      	ldrh	r3, [r7, #2]
 8003b84:	041a      	lsls	r2, r3, #16
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	611a      	str	r2, [r3, #16]
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr

08003b94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ba6:	887a      	ldrh	r2, [r7, #2]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4013      	ands	r3, r2
 8003bac:	041a      	lsls	r2, r3, #16
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	43d9      	mvns	r1, r3
 8003bb2:	887b      	ldrh	r3, [r7, #2]
 8003bb4:	400b      	ands	r3, r1
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	611a      	str	r2, [r3, #16]
}
 8003bbc:	bf00      	nop
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr
	...

08003bc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e272      	b.n	80040c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 8087 	beq.w	8003cf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003be8:	4b92      	ldr	r3, [pc, #584]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 030c 	and.w	r3, r3, #12
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d00c      	beq.n	8003c0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bf4:	4b8f      	ldr	r3, [pc, #572]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 030c 	and.w	r3, r3, #12
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d112      	bne.n	8003c26 <HAL_RCC_OscConfig+0x5e>
 8003c00:	4b8c      	ldr	r3, [pc, #560]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c0c:	d10b      	bne.n	8003c26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c0e:	4b89      	ldr	r3, [pc, #548]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d06c      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x12c>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d168      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e24c      	b.n	80040c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c2e:	d106      	bne.n	8003c3e <HAL_RCC_OscConfig+0x76>
 8003c30:	4b80      	ldr	r3, [pc, #512]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a7f      	ldr	r2, [pc, #508]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003c36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	e02e      	b.n	8003c9c <HAL_RCC_OscConfig+0xd4>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10c      	bne.n	8003c60 <HAL_RCC_OscConfig+0x98>
 8003c46:	4b7b      	ldr	r3, [pc, #492]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a7a      	ldr	r2, [pc, #488]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003c4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	4b78      	ldr	r3, [pc, #480]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a77      	ldr	r2, [pc, #476]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003c58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	e01d      	b.n	8003c9c <HAL_RCC_OscConfig+0xd4>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c68:	d10c      	bne.n	8003c84 <HAL_RCC_OscConfig+0xbc>
 8003c6a:	4b72      	ldr	r3, [pc, #456]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a71      	ldr	r2, [pc, #452]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003c70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	4b6f      	ldr	r3, [pc, #444]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a6e      	ldr	r2, [pc, #440]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	e00b      	b.n	8003c9c <HAL_RCC_OscConfig+0xd4>
 8003c84:	4b6b      	ldr	r3, [pc, #428]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a6a      	ldr	r2, [pc, #424]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003c8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	4b68      	ldr	r3, [pc, #416]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a67      	ldr	r2, [pc, #412]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003c96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d013      	beq.n	8003ccc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fe fa94 	bl	80021d0 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cac:	f7fe fa90 	bl	80021d0 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b64      	cmp	r3, #100	@ 0x64
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e200      	b.n	80040c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cbe:	4b5d      	ldr	r3, [pc, #372]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCC_OscConfig+0xe4>
 8003cca:	e014      	b.n	8003cf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ccc:	f7fe fa80 	bl	80021d0 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cd4:	f7fe fa7c 	bl	80021d0 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b64      	cmp	r3, #100	@ 0x64
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e1ec      	b.n	80040c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ce6:	4b53      	ldr	r3, [pc, #332]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x10c>
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d063      	beq.n	8003dca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d02:	4b4c      	ldr	r3, [pc, #304]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f003 030c 	and.w	r3, r3, #12
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00b      	beq.n	8003d26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d0e:	4b49      	ldr	r3, [pc, #292]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f003 030c 	and.w	r3, r3, #12
 8003d16:	2b08      	cmp	r3, #8
 8003d18:	d11c      	bne.n	8003d54 <HAL_RCC_OscConfig+0x18c>
 8003d1a:	4b46      	ldr	r3, [pc, #280]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d116      	bne.n	8003d54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d26:	4b43      	ldr	r3, [pc, #268]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d005      	beq.n	8003d3e <HAL_RCC_OscConfig+0x176>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d001      	beq.n	8003d3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e1c0      	b.n	80040c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4939      	ldr	r1, [pc, #228]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d52:	e03a      	b.n	8003dca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d020      	beq.n	8003d9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d5c:	4b36      	ldr	r3, [pc, #216]	@ (8003e38 <HAL_RCC_OscConfig+0x270>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d62:	f7fe fa35 	bl	80021d0 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d6a:	f7fe fa31 	bl	80021d0 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e1a1      	b.n	80040c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d88:	4b2a      	ldr	r3, [pc, #168]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	4927      	ldr	r1, [pc, #156]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	600b      	str	r3, [r1, #0]
 8003d9c:	e015      	b.n	8003dca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d9e:	4b26      	ldr	r3, [pc, #152]	@ (8003e38 <HAL_RCC_OscConfig+0x270>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da4:	f7fe fa14 	bl	80021d0 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dac:	f7fe fa10 	bl	80021d0 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e180      	b.n	80040c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d03a      	beq.n	8003e4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d019      	beq.n	8003e12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dde:	4b17      	ldr	r3, [pc, #92]	@ (8003e3c <HAL_RCC_OscConfig+0x274>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de4:	f7fe f9f4 	bl	80021d0 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dec:	f7fe f9f0 	bl	80021d0 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e160      	b.n	80040c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8003e34 <HAL_RCC_OscConfig+0x26c>)
 8003e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0f0      	beq.n	8003dec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	f000 face 	bl	80043ac <RCC_Delay>
 8003e10:	e01c      	b.n	8003e4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e12:	4b0a      	ldr	r3, [pc, #40]	@ (8003e3c <HAL_RCC_OscConfig+0x274>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e18:	f7fe f9da 	bl	80021d0 <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e1e:	e00f      	b.n	8003e40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e20:	f7fe f9d6 	bl	80021d0 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d908      	bls.n	8003e40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e146      	b.n	80040c0 <HAL_RCC_OscConfig+0x4f8>
 8003e32:	bf00      	nop
 8003e34:	40021000 	.word	0x40021000
 8003e38:	42420000 	.word	0x42420000
 8003e3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e40:	4b92      	ldr	r3, [pc, #584]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1e9      	bne.n	8003e20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80a6 	beq.w	8003fa6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e5e:	4b8b      	ldr	r3, [pc, #556]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10d      	bne.n	8003e86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e6a:	4b88      	ldr	r3, [pc, #544]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	4a87      	ldr	r2, [pc, #540]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003e70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e74:	61d3      	str	r3, [r2, #28]
 8003e76:	4b85      	ldr	r3, [pc, #532]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e7e:	60bb      	str	r3, [r7, #8]
 8003e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e82:	2301      	movs	r3, #1
 8003e84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e86:	4b82      	ldr	r3, [pc, #520]	@ (8004090 <HAL_RCC_OscConfig+0x4c8>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d118      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e92:	4b7f      	ldr	r3, [pc, #508]	@ (8004090 <HAL_RCC_OscConfig+0x4c8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a7e      	ldr	r2, [pc, #504]	@ (8004090 <HAL_RCC_OscConfig+0x4c8>)
 8003e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e9e:	f7fe f997 	bl	80021d0 <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea6:	f7fe f993 	bl	80021d0 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b64      	cmp	r3, #100	@ 0x64
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e103      	b.n	80040c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb8:	4b75      	ldr	r3, [pc, #468]	@ (8004090 <HAL_RCC_OscConfig+0x4c8>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0f0      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d106      	bne.n	8003eda <HAL_RCC_OscConfig+0x312>
 8003ecc:	4b6f      	ldr	r3, [pc, #444]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	4a6e      	ldr	r2, [pc, #440]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003ed2:	f043 0301 	orr.w	r3, r3, #1
 8003ed6:	6213      	str	r3, [r2, #32]
 8003ed8:	e02d      	b.n	8003f36 <HAL_RCC_OscConfig+0x36e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10c      	bne.n	8003efc <HAL_RCC_OscConfig+0x334>
 8003ee2:	4b6a      	ldr	r3, [pc, #424]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	4a69      	ldr	r2, [pc, #420]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003ee8:	f023 0301 	bic.w	r3, r3, #1
 8003eec:	6213      	str	r3, [r2, #32]
 8003eee:	4b67      	ldr	r3, [pc, #412]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	4a66      	ldr	r2, [pc, #408]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003ef4:	f023 0304 	bic.w	r3, r3, #4
 8003ef8:	6213      	str	r3, [r2, #32]
 8003efa:	e01c      	b.n	8003f36 <HAL_RCC_OscConfig+0x36e>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	2b05      	cmp	r3, #5
 8003f02:	d10c      	bne.n	8003f1e <HAL_RCC_OscConfig+0x356>
 8003f04:	4b61      	ldr	r3, [pc, #388]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	4a60      	ldr	r2, [pc, #384]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003f0a:	f043 0304 	orr.w	r3, r3, #4
 8003f0e:	6213      	str	r3, [r2, #32]
 8003f10:	4b5e      	ldr	r3, [pc, #376]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	4a5d      	ldr	r2, [pc, #372]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	6213      	str	r3, [r2, #32]
 8003f1c:	e00b      	b.n	8003f36 <HAL_RCC_OscConfig+0x36e>
 8003f1e:	4b5b      	ldr	r3, [pc, #364]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	4a5a      	ldr	r2, [pc, #360]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003f24:	f023 0301 	bic.w	r3, r3, #1
 8003f28:	6213      	str	r3, [r2, #32]
 8003f2a:	4b58      	ldr	r3, [pc, #352]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	4a57      	ldr	r2, [pc, #348]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003f30:	f023 0304 	bic.w	r3, r3, #4
 8003f34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d015      	beq.n	8003f6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f3e:	f7fe f947 	bl	80021d0 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f44:	e00a      	b.n	8003f5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f46:	f7fe f943 	bl	80021d0 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e0b1      	b.n	80040c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5c:	4b4b      	ldr	r3, [pc, #300]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0ee      	beq.n	8003f46 <HAL_RCC_OscConfig+0x37e>
 8003f68:	e014      	b.n	8003f94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f6a:	f7fe f931 	bl	80021d0 <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f70:	e00a      	b.n	8003f88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f72:	f7fe f92d 	bl	80021d0 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e09b      	b.n	80040c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f88:	4b40      	ldr	r3, [pc, #256]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1ee      	bne.n	8003f72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f94:	7dfb      	ldrb	r3, [r7, #23]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d105      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f9a:	4b3c      	ldr	r3, [pc, #240]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	4a3b      	ldr	r2, [pc, #236]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003fa0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fa4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 8087 	beq.w	80040be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fb0:	4b36      	ldr	r3, [pc, #216]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 030c 	and.w	r3, r3, #12
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d061      	beq.n	8004080 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d146      	bne.n	8004052 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc4:	4b33      	ldr	r3, [pc, #204]	@ (8004094 <HAL_RCC_OscConfig+0x4cc>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fca:	f7fe f901 	bl	80021d0 <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd2:	f7fe f8fd 	bl	80021d0 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e06d      	b.n	80040c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fe4:	4b29      	ldr	r3, [pc, #164]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1f0      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ff8:	d108      	bne.n	800400c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ffa:	4b24      	ldr	r3, [pc, #144]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	4921      	ldr	r1, [pc, #132]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8004008:	4313      	orrs	r3, r2
 800400a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800400c:	4b1f      	ldr	r3, [pc, #124]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a19      	ldr	r1, [r3, #32]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	430b      	orrs	r3, r1
 800401e:	491b      	ldr	r1, [pc, #108]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8004020:	4313      	orrs	r3, r2
 8004022:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004024:	4b1b      	ldr	r3, [pc, #108]	@ (8004094 <HAL_RCC_OscConfig+0x4cc>)
 8004026:	2201      	movs	r2, #1
 8004028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402a:	f7fe f8d1 	bl	80021d0 <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004032:	f7fe f8cd 	bl	80021d0 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e03d      	b.n	80040c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004044:	4b11      	ldr	r3, [pc, #68]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d0f0      	beq.n	8004032 <HAL_RCC_OscConfig+0x46a>
 8004050:	e035      	b.n	80040be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004052:	4b10      	ldr	r3, [pc, #64]	@ (8004094 <HAL_RCC_OscConfig+0x4cc>)
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004058:	f7fe f8ba 	bl	80021d0 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004060:	f7fe f8b6 	bl	80021d0 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e026      	b.n	80040c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004072:	4b06      	ldr	r3, [pc, #24]	@ (800408c <HAL_RCC_OscConfig+0x4c4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f0      	bne.n	8004060 <HAL_RCC_OscConfig+0x498>
 800407e:	e01e      	b.n	80040be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d107      	bne.n	8004098 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e019      	b.n	80040c0 <HAL_RCC_OscConfig+0x4f8>
 800408c:	40021000 	.word	0x40021000
 8004090:	40007000 	.word	0x40007000
 8004094:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004098:	4b0b      	ldr	r3, [pc, #44]	@ (80040c8 <HAL_RCC_OscConfig+0x500>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d106      	bne.n	80040ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d001      	beq.n	80040be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e000      	b.n	80040c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40021000 	.word	0x40021000

080040cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e0d0      	b.n	8004282 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040e0:	4b6a      	ldr	r3, [pc, #424]	@ (800428c <HAL_RCC_ClockConfig+0x1c0>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d910      	bls.n	8004110 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ee:	4b67      	ldr	r3, [pc, #412]	@ (800428c <HAL_RCC_ClockConfig+0x1c0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f023 0207 	bic.w	r2, r3, #7
 80040f6:	4965      	ldr	r1, [pc, #404]	@ (800428c <HAL_RCC_ClockConfig+0x1c0>)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fe:	4b63      	ldr	r3, [pc, #396]	@ (800428c <HAL_RCC_ClockConfig+0x1c0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d001      	beq.n	8004110 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e0b8      	b.n	8004282 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d020      	beq.n	800415e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004128:	4b59      	ldr	r3, [pc, #356]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	4a58      	ldr	r2, [pc, #352]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 800412e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004132:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0308 	and.w	r3, r3, #8
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004140:	4b53      	ldr	r3, [pc, #332]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	4a52      	ldr	r2, [pc, #328]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 8004146:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800414a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800414c:	4b50      	ldr	r3, [pc, #320]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	494d      	ldr	r1, [pc, #308]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 800415a:	4313      	orrs	r3, r2
 800415c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d040      	beq.n	80041ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d107      	bne.n	8004182 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004172:	4b47      	ldr	r3, [pc, #284]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d115      	bne.n	80041aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e07f      	b.n	8004282 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b02      	cmp	r3, #2
 8004188:	d107      	bne.n	800419a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418a:	4b41      	ldr	r3, [pc, #260]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d109      	bne.n	80041aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e073      	b.n	8004282 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800419a:	4b3d      	ldr	r3, [pc, #244]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e06b      	b.n	8004282 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041aa:	4b39      	ldr	r3, [pc, #228]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f023 0203 	bic.w	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	4936      	ldr	r1, [pc, #216]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041bc:	f7fe f808 	bl	80021d0 <HAL_GetTick>
 80041c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c2:	e00a      	b.n	80041da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c4:	f7fe f804 	bl	80021d0 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e053      	b.n	8004282 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041da:	4b2d      	ldr	r3, [pc, #180]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f003 020c 	and.w	r2, r3, #12
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d1eb      	bne.n	80041c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041ec:	4b27      	ldr	r3, [pc, #156]	@ (800428c <HAL_RCC_ClockConfig+0x1c0>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d210      	bcs.n	800421c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fa:	4b24      	ldr	r3, [pc, #144]	@ (800428c <HAL_RCC_ClockConfig+0x1c0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f023 0207 	bic.w	r2, r3, #7
 8004202:	4922      	ldr	r1, [pc, #136]	@ (800428c <HAL_RCC_ClockConfig+0x1c0>)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	4313      	orrs	r3, r2
 8004208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800420a:	4b20      	ldr	r3, [pc, #128]	@ (800428c <HAL_RCC_ClockConfig+0x1c0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d001      	beq.n	800421c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e032      	b.n	8004282 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	d008      	beq.n	800423a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004228:	4b19      	ldr	r3, [pc, #100]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	4916      	ldr	r1, [pc, #88]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 8004236:	4313      	orrs	r3, r2
 8004238:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d009      	beq.n	800425a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004246:	4b12      	ldr	r3, [pc, #72]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	490e      	ldr	r1, [pc, #56]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 8004256:	4313      	orrs	r3, r2
 8004258:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800425a:	f000 f821 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 800425e:	4602      	mov	r2, r0
 8004260:	4b0b      	ldr	r3, [pc, #44]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	091b      	lsrs	r3, r3, #4
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	490a      	ldr	r1, [pc, #40]	@ (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 800426c:	5ccb      	ldrb	r3, [r1, r3]
 800426e:	fa22 f303 	lsr.w	r3, r2, r3
 8004272:	4a09      	ldr	r2, [pc, #36]	@ (8004298 <HAL_RCC_ClockConfig+0x1cc>)
 8004274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004276:	4b09      	ldr	r3, [pc, #36]	@ (800429c <HAL_RCC_ClockConfig+0x1d0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f7fd ff66 	bl	800214c <HAL_InitTick>

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	40022000 	.word	0x40022000
 8004290:	40021000 	.word	0x40021000
 8004294:	08009844 	.word	0x08009844
 8004298:	20000000 	.word	0x20000000
 800429c:	20000004 	.word	0x20000004

080042a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	2300      	movs	r3, #0
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	2300      	movs	r3, #0
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	2300      	movs	r3, #0
 80042b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80042ba:	4b1e      	ldr	r3, [pc, #120]	@ (8004334 <HAL_RCC_GetSysClockFreq+0x94>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 030c 	and.w	r3, r3, #12
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d002      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0x30>
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d003      	beq.n	80042d6 <HAL_RCC_GetSysClockFreq+0x36>
 80042ce:	e027      	b.n	8004320 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042d0:	4b19      	ldr	r3, [pc, #100]	@ (8004338 <HAL_RCC_GetSysClockFreq+0x98>)
 80042d2:	613b      	str	r3, [r7, #16]
      break;
 80042d4:	e027      	b.n	8004326 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	0c9b      	lsrs	r3, r3, #18
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	4a17      	ldr	r2, [pc, #92]	@ (800433c <HAL_RCC_GetSysClockFreq+0x9c>)
 80042e0:	5cd3      	ldrb	r3, [r2, r3]
 80042e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d010      	beq.n	8004310 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042ee:	4b11      	ldr	r3, [pc, #68]	@ (8004334 <HAL_RCC_GetSysClockFreq+0x94>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	0c5b      	lsrs	r3, r3, #17
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	4a11      	ldr	r2, [pc, #68]	@ (8004340 <HAL_RCC_GetSysClockFreq+0xa0>)
 80042fa:	5cd3      	ldrb	r3, [r2, r3]
 80042fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a0d      	ldr	r2, [pc, #52]	@ (8004338 <HAL_RCC_GetSysClockFreq+0x98>)
 8004302:	fb03 f202 	mul.w	r2, r3, r2
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	fbb2 f3f3 	udiv	r3, r2, r3
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	e004      	b.n	800431a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a0c      	ldr	r2, [pc, #48]	@ (8004344 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004314:	fb02 f303 	mul.w	r3, r2, r3
 8004318:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	613b      	str	r3, [r7, #16]
      break;
 800431e:	e002      	b.n	8004326 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004320:	4b05      	ldr	r3, [pc, #20]	@ (8004338 <HAL_RCC_GetSysClockFreq+0x98>)
 8004322:	613b      	str	r3, [r7, #16]
      break;
 8004324:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004326:	693b      	ldr	r3, [r7, #16]
}
 8004328:	4618      	mov	r0, r3
 800432a:	371c      	adds	r7, #28
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40021000 	.word	0x40021000
 8004338:	007a1200 	.word	0x007a1200
 800433c:	0800985c 	.word	0x0800985c
 8004340:	0800986c 	.word	0x0800986c
 8004344:	003d0900 	.word	0x003d0900

08004348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800434c:	4b02      	ldr	r3, [pc, #8]	@ (8004358 <HAL_RCC_GetHCLKFreq+0x10>)
 800434e:	681b      	ldr	r3, [r3, #0]
}
 8004350:	4618      	mov	r0, r3
 8004352:	46bd      	mov	sp, r7
 8004354:	bc80      	pop	{r7}
 8004356:	4770      	bx	lr
 8004358:	20000000 	.word	0x20000000

0800435c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004360:	f7ff fff2 	bl	8004348 <HAL_RCC_GetHCLKFreq>
 8004364:	4602      	mov	r2, r0
 8004366:	4b05      	ldr	r3, [pc, #20]	@ (800437c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	0a1b      	lsrs	r3, r3, #8
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	4903      	ldr	r1, [pc, #12]	@ (8004380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004372:	5ccb      	ldrb	r3, [r1, r3]
 8004374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004378:	4618      	mov	r0, r3
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40021000 	.word	0x40021000
 8004380:	08009854 	.word	0x08009854

08004384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004388:	f7ff ffde 	bl	8004348 <HAL_RCC_GetHCLKFreq>
 800438c:	4602      	mov	r2, r0
 800438e:	4b05      	ldr	r3, [pc, #20]	@ (80043a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	0adb      	lsrs	r3, r3, #11
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	4903      	ldr	r1, [pc, #12]	@ (80043a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800439a:	5ccb      	ldrb	r3, [r1, r3]
 800439c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40021000 	.word	0x40021000
 80043a8:	08009854 	.word	0x08009854

080043ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80043b4:	4b0a      	ldr	r3, [pc, #40]	@ (80043e0 <RCC_Delay+0x34>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a0a      	ldr	r2, [pc, #40]	@ (80043e4 <RCC_Delay+0x38>)
 80043ba:	fba2 2303 	umull	r2, r3, r2, r3
 80043be:	0a5b      	lsrs	r3, r3, #9
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	fb02 f303 	mul.w	r3, r2, r3
 80043c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80043c8:	bf00      	nop
  }
  while (Delay --);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	1e5a      	subs	r2, r3, #1
 80043ce:	60fa      	str	r2, [r7, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1f9      	bne.n	80043c8 <RCC_Delay+0x1c>
}
 80043d4:	bf00      	nop
 80043d6:	bf00      	nop
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	bc80      	pop	{r7}
 80043de:	4770      	bx	lr
 80043e0:	20000000 	.word	0x20000000
 80043e4:	10624dd3 	.word	0x10624dd3

080043e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b00      	cmp	r3, #0
 8004402:	d07d      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004404:	2300      	movs	r3, #0
 8004406:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004408:	4b4f      	ldr	r3, [pc, #316]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10d      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004414:	4b4c      	ldr	r3, [pc, #304]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	4a4b      	ldr	r2, [pc, #300]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800441a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800441e:	61d3      	str	r3, [r2, #28]
 8004420:	4b49      	ldr	r3, [pc, #292]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004428:	60bb      	str	r3, [r7, #8]
 800442a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800442c:	2301      	movs	r3, #1
 800442e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004430:	4b46      	ldr	r3, [pc, #280]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004438:	2b00      	cmp	r3, #0
 800443a:	d118      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800443c:	4b43      	ldr	r3, [pc, #268]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a42      	ldr	r2, [pc, #264]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004442:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004446:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004448:	f7fd fec2 	bl	80021d0 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444e:	e008      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004450:	f7fd febe 	bl	80021d0 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b64      	cmp	r3, #100	@ 0x64
 800445c:	d901      	bls.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e06d      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004462:	4b3a      	ldr	r3, [pc, #232]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0f0      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800446e:	4b36      	ldr	r3, [pc, #216]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004476:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d02e      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	429a      	cmp	r2, r3
 800448a:	d027      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800448c:	4b2e      	ldr	r3, [pc, #184]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004494:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004496:	4b2e      	ldr	r3, [pc, #184]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004498:	2201      	movs	r2, #1
 800449a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800449c:	4b2c      	ldr	r3, [pc, #176]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80044a2:	4a29      	ldr	r2, [pc, #164]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d014      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b2:	f7fd fe8d 	bl	80021d0 <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b8:	e00a      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ba:	f7fd fe89 	bl	80021d0 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e036      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0ee      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	4917      	ldr	r1, [pc, #92]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044ee:	7dfb      	ldrb	r3, [r7, #23]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d105      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f4:	4b14      	ldr	r3, [pc, #80]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	4a13      	ldr	r2, [pc, #76]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800450c:	4b0e      	ldr	r3, [pc, #56]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	490b      	ldr	r1, [pc, #44]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800451a:	4313      	orrs	r3, r2
 800451c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0310 	and.w	r3, r3, #16
 8004526:	2b00      	cmp	r3, #0
 8004528:	d008      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800452a:	4b07      	ldr	r3, [pc, #28]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	4904      	ldr	r1, [pc, #16]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004538:	4313      	orrs	r3, r2
 800453a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40021000 	.word	0x40021000
 800454c:	40007000 	.word	0x40007000
 8004550:	42420440 	.word	0x42420440

08004554 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	2300      	movs	r3, #0
 8004562:	61fb      	str	r3, [r7, #28]
 8004564:	2300      	movs	r3, #0
 8004566:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	2300      	movs	r3, #0
 800456e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b10      	cmp	r3, #16
 8004574:	d00a      	beq.n	800458c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b10      	cmp	r3, #16
 800457a:	f200 808a 	bhi.w	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d045      	beq.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d075      	beq.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800458a:	e082      	b.n	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800458c:	4b46      	ldr	r3, [pc, #280]	@ (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004592:	4b45      	ldr	r3, [pc, #276]	@ (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d07b      	beq.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	0c9b      	lsrs	r3, r3, #18
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	4a41      	ldr	r2, [pc, #260]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80045a8:	5cd3      	ldrb	r3, [r2, r3]
 80045aa:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d015      	beq.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045b6:	4b3c      	ldr	r3, [pc, #240]	@ (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	0c5b      	lsrs	r3, r3, #17
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	4a3b      	ldr	r2, [pc, #236]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80045c2:	5cd3      	ldrb	r3, [r2, r3]
 80045c4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00d      	beq.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80045d0:	4a38      	ldr	r2, [pc, #224]	@ (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	fb02 f303 	mul.w	r3, r2, r3
 80045de:	61fb      	str	r3, [r7, #28]
 80045e0:	e004      	b.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	4a34      	ldr	r2, [pc, #208]	@ (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80045e6:	fb02 f303 	mul.w	r3, r2, r3
 80045ea:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80045ec:	4b2e      	ldr	r3, [pc, #184]	@ (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045f8:	d102      	bne.n	8004600 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	61bb      	str	r3, [r7, #24]
      break;
 80045fe:	e04a      	b.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	4a2d      	ldr	r2, [pc, #180]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004606:	fba2 2303 	umull	r2, r3, r2, r3
 800460a:	085b      	lsrs	r3, r3, #1
 800460c:	61bb      	str	r3, [r7, #24]
      break;
 800460e:	e042      	b.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004610:	4b25      	ldr	r3, [pc, #148]	@ (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800461c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004620:	d108      	bne.n	8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800462c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004630:	61bb      	str	r3, [r7, #24]
 8004632:	e01f      	b.n	8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800463a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800463e:	d109      	bne.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004640:	4b19      	ldr	r3, [pc, #100]	@ (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800464c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004650:	61bb      	str	r3, [r7, #24]
 8004652:	e00f      	b.n	8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800465a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800465e:	d11c      	bne.n	800469a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004660:	4b11      	ldr	r3, [pc, #68]	@ (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d016      	beq.n	800469a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800466c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004670:	61bb      	str	r3, [r7, #24]
      break;
 8004672:	e012      	b.n	800469a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004674:	e011      	b.n	800469a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004676:	f7ff fe85 	bl	8004384 <HAL_RCC_GetPCLK2Freq>
 800467a:	4602      	mov	r2, r0
 800467c:	4b0a      	ldr	r3, [pc, #40]	@ (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	0b9b      	lsrs	r3, r3, #14
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	3301      	adds	r3, #1
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	fbb2 f3f3 	udiv	r3, r2, r3
 800468e:	61bb      	str	r3, [r7, #24]
      break;
 8004690:	e004      	b.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004692:	bf00      	nop
 8004694:	e002      	b.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004696:	bf00      	nop
 8004698:	e000      	b.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800469a:	bf00      	nop
    }
  }
  return (frequency);
 800469c:	69bb      	ldr	r3, [r7, #24]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3720      	adds	r7, #32
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40021000 	.word	0x40021000
 80046ac:	08009870 	.word	0x08009870
 80046b0:	08009880 	.word	0x08009880
 80046b4:	007a1200 	.word	0x007a1200
 80046b8:	003d0900 	.word	0x003d0900
 80046bc:	aaaaaaab 	.word	0xaaaaaaab

080046c0 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e033      	b.n	800473a <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fd fb96 	bl	8001e18 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f90b 	bl	8004910 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004708:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695a      	ldr	r2, [r3, #20]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004718:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004728:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	641a      	str	r2, [r3, #64]	@ 0x40
  husart->State = HAL_USART_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b08a      	sub	sp, #40	@ 0x28
 8004746:	af02      	add	r7, sp, #8
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	603b      	str	r3, [r7, #0]
 800474e:	4613      	mov	r3, r2
 8004750:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b01      	cmp	r3, #1
 800475c:	d17c      	bne.n	8004858 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d002      	beq.n	800476a <HAL_USART_Transmit+0x28>
 8004764:	88fb      	ldrh	r3, [r7, #6]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e075      	b.n	800485a <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <HAL_USART_Transmit+0x3a>
 8004778:	2302      	movs	r3, #2
 800477a:	e06e      	b.n	800485a <HAL_USART_Transmit+0x118>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	641a      	str	r2, [r3, #64]	@ 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2212      	movs	r2, #18
 800478e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004792:	f7fd fd1d 	bl	80021d0 <HAL_GetTick>
 8004796:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	88fa      	ldrh	r2, [r7, #6]
 800479c:	851a      	strh	r2, [r3, #40]	@ 0x28
    husart->TxXferCount = Size;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	88fa      	ldrh	r2, [r7, #6]
 80047a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ac:	d108      	bne.n	80047c0 <HAL_USART_Transmit+0x7e>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d104      	bne.n	80047c0 <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	61bb      	str	r3, [r7, #24]
 80047be:	e003      	b.n	80047c8 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80047c4:	2300      	movs	r3, #0
 80047c6:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 80047c8:	e02a      	b.n	8004820 <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2200      	movs	r2, #0
 80047d2:	2180      	movs	r1, #128	@ 0x80
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 f844 	bl	8004862 <USART_WaitOnFlagUntilTimeout>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e03a      	b.n	800485a <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10b      	bne.n	8004802 <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047f8:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	3302      	adds	r3, #2
 80047fe:	61bb      	str	r3, [r7, #24]
 8004800:	e007      	b.n	8004812 <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	781a      	ldrb	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	3301      	adds	r3, #1
 8004810:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004816:	b29b      	uxth	r3, r3
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (husart->TxXferCount > 0U)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1cf      	bne.n	80047ca <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2200      	movs	r2, #0
 8004832:	2140      	movs	r1, #64	@ 0x40
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f814 	bl	8004862 <USART_WaitOnFlagUntilTimeout>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e00a      	b.n	800485a <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	e000      	b.n	800485a <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8004858:	2302      	movs	r3, #2
  }
}
 800485a:	4618      	mov	r0, r3
 800485c:	3720      	adds	r7, #32
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	603b      	str	r3, [r7, #0]
 800486e:	4613      	mov	r3, r2
 8004870:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8004872:	e038      	b.n	80048e6 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487a:	d034      	beq.n	80048e6 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d007      	beq.n	8004892 <USART_WaitOnFlagUntilTimeout+0x30>
 8004882:	f7fd fca5 	bl	80021d0 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	429a      	cmp	r2, r3
 8004890:	d229      	bcs.n	80048e6 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048a0:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0220 	bic.w	r2, r2, #32
 80048b0:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048c0:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695a      	ldr	r2, [r3, #20]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0201 	bic.w	r2, r2, #1
 80048d0:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e00f      	b.n	8004906 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4013      	ands	r3, r2
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	bf0c      	ite	eq
 80048f6:	2301      	moveq	r3, #1
 80048f8:	2300      	movne	r3, #0
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	461a      	mov	r2, r3
 80048fe:	79fb      	ldrb	r3, [r7, #7]
 8004900:	429a      	cmp	r2, r3
 8004902:	d0b7      	beq.n	8004874 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
	...

08004910 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8004918:	2300      	movs	r3, #0
 800491a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 020c 	bic.w	r2, r2, #12
 800492a:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800493a:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8004944:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	431a      	orrs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8004950:	431a      	orrs	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4313      	orrs	r3, r2
 8004956:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800495a:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004972:	f023 030c 	bic.w	r3, r3, #12
 8004976:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	4313      	orrs	r3, r2
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	695a      	ldr	r2, [r3, #20]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80049a4:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if (husart->Instance == USART1)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a53      	ldr	r2, [pc, #332]	@ (8004af8 <USART_SetConfig+0x1e8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d14f      	bne.n	8004a50 <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80049b0:	f7ff fce8 	bl	8004384 <HAL_RCC_GetPCLK2Freq>
 80049b4:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	4613      	mov	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	009a      	lsls	r2, r3, #2
 80049c0:	441a      	add	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049cc:	4a4b      	ldr	r2, [pc, #300]	@ (8004afc <USART_SetConfig+0x1ec>)
 80049ce:	fba2 2303 	umull	r2, r3, r2, r3
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	0119      	lsls	r1, r3, #4
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	009a      	lsls	r2, r3, #2
 80049e0:	441a      	add	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80049ec:	4b43      	ldr	r3, [pc, #268]	@ (8004afc <USART_SetConfig+0x1ec>)
 80049ee:	fba3 0302 	umull	r0, r3, r3, r2
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	2064      	movs	r0, #100	@ 0x64
 80049f6:	fb00 f303 	mul.w	r3, r0, r3
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	3332      	adds	r3, #50	@ 0x32
 8004a00:	4a3e      	ldr	r2, [pc, #248]	@ (8004afc <USART_SetConfig+0x1ec>)
 8004a02:	fba2 2303 	umull	r2, r3, r2, r3
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	f403 73f0 	and.w	r3, r3, #480	@ 0x1e0
 8004a0e:	4419      	add	r1, r3
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	009a      	lsls	r2, r3, #2
 8004a1a:	441a      	add	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a26:	4b35      	ldr	r3, [pc, #212]	@ (8004afc <USART_SetConfig+0x1ec>)
 8004a28:	fba3 0302 	umull	r0, r3, r3, r2
 8004a2c:	095b      	lsrs	r3, r3, #5
 8004a2e:	2064      	movs	r0, #100	@ 0x64
 8004a30:	fb00 f303 	mul.w	r3, r0, r3
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	3332      	adds	r3, #50	@ 0x32
 8004a3a:	4a30      	ldr	r2, [pc, #192]	@ (8004afc <USART_SetConfig+0x1ec>)
 8004a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a40:	095b      	lsrs	r3, r3, #5
 8004a42:	f003 020f 	and.w	r2, r3, #15
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	440a      	add	r2, r1
 8004a4c:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 8004a4e:	e04e      	b.n	8004aee <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a50:	f7ff fc84 	bl	800435c <HAL_RCC_GetPCLK1Freq>
 8004a54:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	009a      	lsls	r2, r3, #2
 8004a60:	441a      	add	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6c:	4a23      	ldr	r2, [pc, #140]	@ (8004afc <USART_SetConfig+0x1ec>)
 8004a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	0119      	lsls	r1, r3, #4
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009a      	lsls	r2, r3, #2
 8004a80:	441a      	add	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004afc <USART_SetConfig+0x1ec>)
 8004a8e:	fba3 0302 	umull	r0, r3, r3, r2
 8004a92:	095b      	lsrs	r3, r3, #5
 8004a94:	2064      	movs	r0, #100	@ 0x64
 8004a96:	fb00 f303 	mul.w	r3, r0, r3
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	011b      	lsls	r3, r3, #4
 8004a9e:	3332      	adds	r3, #50	@ 0x32
 8004aa0:	4a16      	ldr	r2, [pc, #88]	@ (8004afc <USART_SetConfig+0x1ec>)
 8004aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	f403 73f0 	and.w	r3, r3, #480	@ 0x1e0
 8004aae:	4419      	add	r1, r3
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	009a      	lsls	r2, r3, #2
 8004aba:	441a      	add	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8004afc <USART_SetConfig+0x1ec>)
 8004ac8:	fba3 0302 	umull	r0, r3, r3, r2
 8004acc:	095b      	lsrs	r3, r3, #5
 8004ace:	2064      	movs	r0, #100	@ 0x64
 8004ad0:	fb00 f303 	mul.w	r3, r0, r3
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	3332      	adds	r3, #50	@ 0x32
 8004ada:	4a08      	ldr	r2, [pc, #32]	@ (8004afc <USART_SetConfig+0x1ec>)
 8004adc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae0:	095b      	lsrs	r3, r3, #5
 8004ae2:	f003 020f 	and.w	r2, r3, #15
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	440a      	add	r2, r1
 8004aec:	609a      	str	r2, [r3, #8]
}
 8004aee:	bf00      	nop
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40013800 	.word	0x40013800
 8004afc:	51eb851f 	.word	0x51eb851f

08004b00 <__cvt>:
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b06:	461d      	mov	r5, r3
 8004b08:	bfbb      	ittet	lt
 8004b0a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004b0e:	461d      	movlt	r5, r3
 8004b10:	2300      	movge	r3, #0
 8004b12:	232d      	movlt	r3, #45	@ 0x2d
 8004b14:	b088      	sub	sp, #32
 8004b16:	4614      	mov	r4, r2
 8004b18:	bfb8      	it	lt
 8004b1a:	4614      	movlt	r4, r2
 8004b1c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004b1e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004b20:	7013      	strb	r3, [r2, #0]
 8004b22:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004b24:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004b28:	f023 0820 	bic.w	r8, r3, #32
 8004b2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004b30:	d005      	beq.n	8004b3e <__cvt+0x3e>
 8004b32:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004b36:	d100      	bne.n	8004b3a <__cvt+0x3a>
 8004b38:	3601      	adds	r6, #1
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	e000      	b.n	8004b40 <__cvt+0x40>
 8004b3e:	2303      	movs	r3, #3
 8004b40:	aa07      	add	r2, sp, #28
 8004b42:	9204      	str	r2, [sp, #16]
 8004b44:	aa06      	add	r2, sp, #24
 8004b46:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004b4a:	e9cd 3600 	strd	r3, r6, [sp]
 8004b4e:	4622      	mov	r2, r4
 8004b50:	462b      	mov	r3, r5
 8004b52:	f001 f881 	bl	8005c58 <_dtoa_r>
 8004b56:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004b5a:	4607      	mov	r7, r0
 8004b5c:	d119      	bne.n	8004b92 <__cvt+0x92>
 8004b5e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004b60:	07db      	lsls	r3, r3, #31
 8004b62:	d50e      	bpl.n	8004b82 <__cvt+0x82>
 8004b64:	eb00 0906 	add.w	r9, r0, r6
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	4629      	mov	r1, r5
 8004b70:	f7fb ff1a 	bl	80009a8 <__aeabi_dcmpeq>
 8004b74:	b108      	cbz	r0, 8004b7a <__cvt+0x7a>
 8004b76:	f8cd 901c 	str.w	r9, [sp, #28]
 8004b7a:	2230      	movs	r2, #48	@ 0x30
 8004b7c:	9b07      	ldr	r3, [sp, #28]
 8004b7e:	454b      	cmp	r3, r9
 8004b80:	d31e      	bcc.n	8004bc0 <__cvt+0xc0>
 8004b82:	4638      	mov	r0, r7
 8004b84:	9b07      	ldr	r3, [sp, #28]
 8004b86:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004b88:	1bdb      	subs	r3, r3, r7
 8004b8a:	6013      	str	r3, [r2, #0]
 8004b8c:	b008      	add	sp, #32
 8004b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b92:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004b96:	eb00 0906 	add.w	r9, r0, r6
 8004b9a:	d1e5      	bne.n	8004b68 <__cvt+0x68>
 8004b9c:	7803      	ldrb	r3, [r0, #0]
 8004b9e:	2b30      	cmp	r3, #48	@ 0x30
 8004ba0:	d10a      	bne.n	8004bb8 <__cvt+0xb8>
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	4629      	mov	r1, r5
 8004baa:	f7fb fefd 	bl	80009a8 <__aeabi_dcmpeq>
 8004bae:	b918      	cbnz	r0, 8004bb8 <__cvt+0xb8>
 8004bb0:	f1c6 0601 	rsb	r6, r6, #1
 8004bb4:	f8ca 6000 	str.w	r6, [sl]
 8004bb8:	f8da 3000 	ldr.w	r3, [sl]
 8004bbc:	4499      	add	r9, r3
 8004bbe:	e7d3      	b.n	8004b68 <__cvt+0x68>
 8004bc0:	1c59      	adds	r1, r3, #1
 8004bc2:	9107      	str	r1, [sp, #28]
 8004bc4:	701a      	strb	r2, [r3, #0]
 8004bc6:	e7d9      	b.n	8004b7c <__cvt+0x7c>

08004bc8 <__exponent>:
 8004bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bca:	2900      	cmp	r1, #0
 8004bcc:	bfb6      	itet	lt
 8004bce:	232d      	movlt	r3, #45	@ 0x2d
 8004bd0:	232b      	movge	r3, #43	@ 0x2b
 8004bd2:	4249      	neglt	r1, r1
 8004bd4:	2909      	cmp	r1, #9
 8004bd6:	7002      	strb	r2, [r0, #0]
 8004bd8:	7043      	strb	r3, [r0, #1]
 8004bda:	dd29      	ble.n	8004c30 <__exponent+0x68>
 8004bdc:	f10d 0307 	add.w	r3, sp, #7
 8004be0:	461d      	mov	r5, r3
 8004be2:	270a      	movs	r7, #10
 8004be4:	fbb1 f6f7 	udiv	r6, r1, r7
 8004be8:	461a      	mov	r2, r3
 8004bea:	fb07 1416 	mls	r4, r7, r6, r1
 8004bee:	3430      	adds	r4, #48	@ 0x30
 8004bf0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004bf4:	460c      	mov	r4, r1
 8004bf6:	2c63      	cmp	r4, #99	@ 0x63
 8004bf8:	4631      	mov	r1, r6
 8004bfa:	f103 33ff 	add.w	r3, r3, #4294967295
 8004bfe:	dcf1      	bgt.n	8004be4 <__exponent+0x1c>
 8004c00:	3130      	adds	r1, #48	@ 0x30
 8004c02:	1e94      	subs	r4, r2, #2
 8004c04:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004c08:	4623      	mov	r3, r4
 8004c0a:	1c41      	adds	r1, r0, #1
 8004c0c:	42ab      	cmp	r3, r5
 8004c0e:	d30a      	bcc.n	8004c26 <__exponent+0x5e>
 8004c10:	f10d 0309 	add.w	r3, sp, #9
 8004c14:	1a9b      	subs	r3, r3, r2
 8004c16:	42ac      	cmp	r4, r5
 8004c18:	bf88      	it	hi
 8004c1a:	2300      	movhi	r3, #0
 8004c1c:	3302      	adds	r3, #2
 8004c1e:	4403      	add	r3, r0
 8004c20:	1a18      	subs	r0, r3, r0
 8004c22:	b003      	add	sp, #12
 8004c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c26:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004c2a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004c2e:	e7ed      	b.n	8004c0c <__exponent+0x44>
 8004c30:	2330      	movs	r3, #48	@ 0x30
 8004c32:	3130      	adds	r1, #48	@ 0x30
 8004c34:	7083      	strb	r3, [r0, #2]
 8004c36:	70c1      	strb	r1, [r0, #3]
 8004c38:	1d03      	adds	r3, r0, #4
 8004c3a:	e7f1      	b.n	8004c20 <__exponent+0x58>

08004c3c <_printf_float>:
 8004c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c40:	b091      	sub	sp, #68	@ 0x44
 8004c42:	460c      	mov	r4, r1
 8004c44:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004c48:	4616      	mov	r6, r2
 8004c4a:	461f      	mov	r7, r3
 8004c4c:	4605      	mov	r5, r0
 8004c4e:	f000 fef1 	bl	8005a34 <_localeconv_r>
 8004c52:	6803      	ldr	r3, [r0, #0]
 8004c54:	4618      	mov	r0, r3
 8004c56:	9308      	str	r3, [sp, #32]
 8004c58:	f7fb fa7a 	bl	8000150 <strlen>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	930e      	str	r3, [sp, #56]	@ 0x38
 8004c60:	f8d8 3000 	ldr.w	r3, [r8]
 8004c64:	9009      	str	r0, [sp, #36]	@ 0x24
 8004c66:	3307      	adds	r3, #7
 8004c68:	f023 0307 	bic.w	r3, r3, #7
 8004c6c:	f103 0208 	add.w	r2, r3, #8
 8004c70:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004c74:	f8d4 b000 	ldr.w	fp, [r4]
 8004c78:	f8c8 2000 	str.w	r2, [r8]
 8004c7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c80:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004c84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c86:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004c92:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004c96:	4b9c      	ldr	r3, [pc, #624]	@ (8004f08 <_printf_float+0x2cc>)
 8004c98:	f7fb feb8 	bl	8000a0c <__aeabi_dcmpun>
 8004c9c:	bb70      	cbnz	r0, 8004cfc <_printf_float+0xc0>
 8004c9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca6:	4b98      	ldr	r3, [pc, #608]	@ (8004f08 <_printf_float+0x2cc>)
 8004ca8:	f7fb fe92 	bl	80009d0 <__aeabi_dcmple>
 8004cac:	bb30      	cbnz	r0, 8004cfc <_printf_float+0xc0>
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	4640      	mov	r0, r8
 8004cb4:	4649      	mov	r1, r9
 8004cb6:	f7fb fe81 	bl	80009bc <__aeabi_dcmplt>
 8004cba:	b110      	cbz	r0, 8004cc2 <_printf_float+0x86>
 8004cbc:	232d      	movs	r3, #45	@ 0x2d
 8004cbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cc2:	4a92      	ldr	r2, [pc, #584]	@ (8004f0c <_printf_float+0x2d0>)
 8004cc4:	4b92      	ldr	r3, [pc, #584]	@ (8004f10 <_printf_float+0x2d4>)
 8004cc6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004cca:	bf94      	ite	ls
 8004ccc:	4690      	movls	r8, r2
 8004cce:	4698      	movhi	r8, r3
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	f04f 0900 	mov.w	r9, #0
 8004cd6:	6123      	str	r3, [r4, #16]
 8004cd8:	f02b 0304 	bic.w	r3, fp, #4
 8004cdc:	6023      	str	r3, [r4, #0]
 8004cde:	4633      	mov	r3, r6
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	9700      	str	r7, [sp, #0]
 8004ce6:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004ce8:	f000 f9d4 	bl	8005094 <_printf_common>
 8004cec:	3001      	adds	r0, #1
 8004cee:	f040 8090 	bne.w	8004e12 <_printf_float+0x1d6>
 8004cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf6:	b011      	add	sp, #68	@ 0x44
 8004cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cfc:	4642      	mov	r2, r8
 8004cfe:	464b      	mov	r3, r9
 8004d00:	4640      	mov	r0, r8
 8004d02:	4649      	mov	r1, r9
 8004d04:	f7fb fe82 	bl	8000a0c <__aeabi_dcmpun>
 8004d08:	b148      	cbz	r0, 8004d1e <_printf_float+0xe2>
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	bfb8      	it	lt
 8004d10:	232d      	movlt	r3, #45	@ 0x2d
 8004d12:	4a80      	ldr	r2, [pc, #512]	@ (8004f14 <_printf_float+0x2d8>)
 8004d14:	bfb8      	it	lt
 8004d16:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004d1a:	4b7f      	ldr	r3, [pc, #508]	@ (8004f18 <_printf_float+0x2dc>)
 8004d1c:	e7d3      	b.n	8004cc6 <_printf_float+0x8a>
 8004d1e:	6863      	ldr	r3, [r4, #4]
 8004d20:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	d13f      	bne.n	8004da8 <_printf_float+0x16c>
 8004d28:	2306      	movs	r3, #6
 8004d2a:	6063      	str	r3, [r4, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004d32:	6023      	str	r3, [r4, #0]
 8004d34:	9206      	str	r2, [sp, #24]
 8004d36:	aa0e      	add	r2, sp, #56	@ 0x38
 8004d38:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004d3c:	aa0d      	add	r2, sp, #52	@ 0x34
 8004d3e:	9203      	str	r2, [sp, #12]
 8004d40:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004d44:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004d48:	6863      	ldr	r3, [r4, #4]
 8004d4a:	4642      	mov	r2, r8
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	4628      	mov	r0, r5
 8004d50:	464b      	mov	r3, r9
 8004d52:	910a      	str	r1, [sp, #40]	@ 0x28
 8004d54:	f7ff fed4 	bl	8004b00 <__cvt>
 8004d58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004d5a:	4680      	mov	r8, r0
 8004d5c:	2947      	cmp	r1, #71	@ 0x47
 8004d5e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004d60:	d128      	bne.n	8004db4 <_printf_float+0x178>
 8004d62:	1cc8      	adds	r0, r1, #3
 8004d64:	db02      	blt.n	8004d6c <_printf_float+0x130>
 8004d66:	6863      	ldr	r3, [r4, #4]
 8004d68:	4299      	cmp	r1, r3
 8004d6a:	dd40      	ble.n	8004dee <_printf_float+0x1b2>
 8004d6c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004d70:	fa5f fa8a 	uxtb.w	sl, sl
 8004d74:	4652      	mov	r2, sl
 8004d76:	3901      	subs	r1, #1
 8004d78:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004d7c:	910d      	str	r1, [sp, #52]	@ 0x34
 8004d7e:	f7ff ff23 	bl	8004bc8 <__exponent>
 8004d82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004d84:	4681      	mov	r9, r0
 8004d86:	1813      	adds	r3, r2, r0
 8004d88:	2a01      	cmp	r2, #1
 8004d8a:	6123      	str	r3, [r4, #16]
 8004d8c:	dc02      	bgt.n	8004d94 <_printf_float+0x158>
 8004d8e:	6822      	ldr	r2, [r4, #0]
 8004d90:	07d2      	lsls	r2, r2, #31
 8004d92:	d501      	bpl.n	8004d98 <_printf_float+0x15c>
 8004d94:	3301      	adds	r3, #1
 8004d96:	6123      	str	r3, [r4, #16]
 8004d98:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d09e      	beq.n	8004cde <_printf_float+0xa2>
 8004da0:	232d      	movs	r3, #45	@ 0x2d
 8004da2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004da6:	e79a      	b.n	8004cde <_printf_float+0xa2>
 8004da8:	2947      	cmp	r1, #71	@ 0x47
 8004daa:	d1bf      	bne.n	8004d2c <_printf_float+0xf0>
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1bd      	bne.n	8004d2c <_printf_float+0xf0>
 8004db0:	2301      	movs	r3, #1
 8004db2:	e7ba      	b.n	8004d2a <_printf_float+0xee>
 8004db4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004db8:	d9dc      	bls.n	8004d74 <_printf_float+0x138>
 8004dba:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004dbe:	d118      	bne.n	8004df2 <_printf_float+0x1b6>
 8004dc0:	2900      	cmp	r1, #0
 8004dc2:	6863      	ldr	r3, [r4, #4]
 8004dc4:	dd0b      	ble.n	8004dde <_printf_float+0x1a2>
 8004dc6:	6121      	str	r1, [r4, #16]
 8004dc8:	b913      	cbnz	r3, 8004dd0 <_printf_float+0x194>
 8004dca:	6822      	ldr	r2, [r4, #0]
 8004dcc:	07d0      	lsls	r0, r2, #31
 8004dce:	d502      	bpl.n	8004dd6 <_printf_float+0x19a>
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	440b      	add	r3, r1
 8004dd4:	6123      	str	r3, [r4, #16]
 8004dd6:	f04f 0900 	mov.w	r9, #0
 8004dda:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004ddc:	e7dc      	b.n	8004d98 <_printf_float+0x15c>
 8004dde:	b913      	cbnz	r3, 8004de6 <_printf_float+0x1aa>
 8004de0:	6822      	ldr	r2, [r4, #0]
 8004de2:	07d2      	lsls	r2, r2, #31
 8004de4:	d501      	bpl.n	8004dea <_printf_float+0x1ae>
 8004de6:	3302      	adds	r3, #2
 8004de8:	e7f4      	b.n	8004dd4 <_printf_float+0x198>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e7f2      	b.n	8004dd4 <_printf_float+0x198>
 8004dee:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004df2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004df4:	4299      	cmp	r1, r3
 8004df6:	db05      	blt.n	8004e04 <_printf_float+0x1c8>
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	6121      	str	r1, [r4, #16]
 8004dfc:	07d8      	lsls	r0, r3, #31
 8004dfe:	d5ea      	bpl.n	8004dd6 <_printf_float+0x19a>
 8004e00:	1c4b      	adds	r3, r1, #1
 8004e02:	e7e7      	b.n	8004dd4 <_printf_float+0x198>
 8004e04:	2900      	cmp	r1, #0
 8004e06:	bfcc      	ite	gt
 8004e08:	2201      	movgt	r2, #1
 8004e0a:	f1c1 0202 	rsble	r2, r1, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	e7e0      	b.n	8004dd4 <_printf_float+0x198>
 8004e12:	6823      	ldr	r3, [r4, #0]
 8004e14:	055a      	lsls	r2, r3, #21
 8004e16:	d407      	bmi.n	8004e28 <_printf_float+0x1ec>
 8004e18:	6923      	ldr	r3, [r4, #16]
 8004e1a:	4642      	mov	r2, r8
 8004e1c:	4631      	mov	r1, r6
 8004e1e:	4628      	mov	r0, r5
 8004e20:	47b8      	blx	r7
 8004e22:	3001      	adds	r0, #1
 8004e24:	d12b      	bne.n	8004e7e <_printf_float+0x242>
 8004e26:	e764      	b.n	8004cf2 <_printf_float+0xb6>
 8004e28:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004e2c:	f240 80dc 	bls.w	8004fe8 <_printf_float+0x3ac>
 8004e30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004e34:	2200      	movs	r2, #0
 8004e36:	2300      	movs	r3, #0
 8004e38:	f7fb fdb6 	bl	80009a8 <__aeabi_dcmpeq>
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	d033      	beq.n	8004ea8 <_printf_float+0x26c>
 8004e40:	2301      	movs	r3, #1
 8004e42:	4631      	mov	r1, r6
 8004e44:	4628      	mov	r0, r5
 8004e46:	4a35      	ldr	r2, [pc, #212]	@ (8004f1c <_printf_float+0x2e0>)
 8004e48:	47b8      	blx	r7
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	f43f af51 	beq.w	8004cf2 <_printf_float+0xb6>
 8004e50:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004e54:	4543      	cmp	r3, r8
 8004e56:	db02      	blt.n	8004e5e <_printf_float+0x222>
 8004e58:	6823      	ldr	r3, [r4, #0]
 8004e5a:	07d8      	lsls	r0, r3, #31
 8004e5c:	d50f      	bpl.n	8004e7e <_printf_float+0x242>
 8004e5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e62:	4631      	mov	r1, r6
 8004e64:	4628      	mov	r0, r5
 8004e66:	47b8      	blx	r7
 8004e68:	3001      	adds	r0, #1
 8004e6a:	f43f af42 	beq.w	8004cf2 <_printf_float+0xb6>
 8004e6e:	f04f 0900 	mov.w	r9, #0
 8004e72:	f108 38ff 	add.w	r8, r8, #4294967295
 8004e76:	f104 0a1a 	add.w	sl, r4, #26
 8004e7a:	45c8      	cmp	r8, r9
 8004e7c:	dc09      	bgt.n	8004e92 <_printf_float+0x256>
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	079b      	lsls	r3, r3, #30
 8004e82:	f100 8102 	bmi.w	800508a <_printf_float+0x44e>
 8004e86:	68e0      	ldr	r0, [r4, #12]
 8004e88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e8a:	4298      	cmp	r0, r3
 8004e8c:	bfb8      	it	lt
 8004e8e:	4618      	movlt	r0, r3
 8004e90:	e731      	b.n	8004cf6 <_printf_float+0xba>
 8004e92:	2301      	movs	r3, #1
 8004e94:	4652      	mov	r2, sl
 8004e96:	4631      	mov	r1, r6
 8004e98:	4628      	mov	r0, r5
 8004e9a:	47b8      	blx	r7
 8004e9c:	3001      	adds	r0, #1
 8004e9e:	f43f af28 	beq.w	8004cf2 <_printf_float+0xb6>
 8004ea2:	f109 0901 	add.w	r9, r9, #1
 8004ea6:	e7e8      	b.n	8004e7a <_printf_float+0x23e>
 8004ea8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	dc38      	bgt.n	8004f20 <_printf_float+0x2e4>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	4631      	mov	r1, r6
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	4a19      	ldr	r2, [pc, #100]	@ (8004f1c <_printf_float+0x2e0>)
 8004eb6:	47b8      	blx	r7
 8004eb8:	3001      	adds	r0, #1
 8004eba:	f43f af1a 	beq.w	8004cf2 <_printf_float+0xb6>
 8004ebe:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004ec2:	ea59 0303 	orrs.w	r3, r9, r3
 8004ec6:	d102      	bne.n	8004ece <_printf_float+0x292>
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	07d9      	lsls	r1, r3, #31
 8004ecc:	d5d7      	bpl.n	8004e7e <_printf_float+0x242>
 8004ece:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004ed2:	4631      	mov	r1, r6
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	47b8      	blx	r7
 8004ed8:	3001      	adds	r0, #1
 8004eda:	f43f af0a 	beq.w	8004cf2 <_printf_float+0xb6>
 8004ede:	f04f 0a00 	mov.w	sl, #0
 8004ee2:	f104 0b1a 	add.w	fp, r4, #26
 8004ee6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ee8:	425b      	negs	r3, r3
 8004eea:	4553      	cmp	r3, sl
 8004eec:	dc01      	bgt.n	8004ef2 <_printf_float+0x2b6>
 8004eee:	464b      	mov	r3, r9
 8004ef0:	e793      	b.n	8004e1a <_printf_float+0x1de>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	465a      	mov	r2, fp
 8004ef6:	4631      	mov	r1, r6
 8004ef8:	4628      	mov	r0, r5
 8004efa:	47b8      	blx	r7
 8004efc:	3001      	adds	r0, #1
 8004efe:	f43f aef8 	beq.w	8004cf2 <_printf_float+0xb6>
 8004f02:	f10a 0a01 	add.w	sl, sl, #1
 8004f06:	e7ee      	b.n	8004ee6 <_printf_float+0x2aa>
 8004f08:	7fefffff 	.word	0x7fefffff
 8004f0c:	08009882 	.word	0x08009882
 8004f10:	08009886 	.word	0x08009886
 8004f14:	0800988a 	.word	0x0800988a
 8004f18:	0800988e 	.word	0x0800988e
 8004f1c:	08009892 	.word	0x08009892
 8004f20:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004f22:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004f26:	4553      	cmp	r3, sl
 8004f28:	bfa8      	it	ge
 8004f2a:	4653      	movge	r3, sl
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	4699      	mov	r9, r3
 8004f30:	dc36      	bgt.n	8004fa0 <_printf_float+0x364>
 8004f32:	f04f 0b00 	mov.w	fp, #0
 8004f36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f3a:	f104 021a 	add.w	r2, r4, #26
 8004f3e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004f40:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f42:	eba3 0309 	sub.w	r3, r3, r9
 8004f46:	455b      	cmp	r3, fp
 8004f48:	dc31      	bgt.n	8004fae <_printf_float+0x372>
 8004f4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f4c:	459a      	cmp	sl, r3
 8004f4e:	dc3a      	bgt.n	8004fc6 <_printf_float+0x38a>
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	07da      	lsls	r2, r3, #31
 8004f54:	d437      	bmi.n	8004fc6 <_printf_float+0x38a>
 8004f56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f58:	ebaa 0903 	sub.w	r9, sl, r3
 8004f5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f5e:	ebaa 0303 	sub.w	r3, sl, r3
 8004f62:	4599      	cmp	r9, r3
 8004f64:	bfa8      	it	ge
 8004f66:	4699      	movge	r9, r3
 8004f68:	f1b9 0f00 	cmp.w	r9, #0
 8004f6c:	dc33      	bgt.n	8004fd6 <_printf_float+0x39a>
 8004f6e:	f04f 0800 	mov.w	r8, #0
 8004f72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f76:	f104 0b1a 	add.w	fp, r4, #26
 8004f7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f7c:	ebaa 0303 	sub.w	r3, sl, r3
 8004f80:	eba3 0309 	sub.w	r3, r3, r9
 8004f84:	4543      	cmp	r3, r8
 8004f86:	f77f af7a 	ble.w	8004e7e <_printf_float+0x242>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	465a      	mov	r2, fp
 8004f8e:	4631      	mov	r1, r6
 8004f90:	4628      	mov	r0, r5
 8004f92:	47b8      	blx	r7
 8004f94:	3001      	adds	r0, #1
 8004f96:	f43f aeac 	beq.w	8004cf2 <_printf_float+0xb6>
 8004f9a:	f108 0801 	add.w	r8, r8, #1
 8004f9e:	e7ec      	b.n	8004f7a <_printf_float+0x33e>
 8004fa0:	4642      	mov	r2, r8
 8004fa2:	4631      	mov	r1, r6
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	47b8      	blx	r7
 8004fa8:	3001      	adds	r0, #1
 8004faa:	d1c2      	bne.n	8004f32 <_printf_float+0x2f6>
 8004fac:	e6a1      	b.n	8004cf2 <_printf_float+0xb6>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	4631      	mov	r1, r6
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	920a      	str	r2, [sp, #40]	@ 0x28
 8004fb6:	47b8      	blx	r7
 8004fb8:	3001      	adds	r0, #1
 8004fba:	f43f ae9a 	beq.w	8004cf2 <_printf_float+0xb6>
 8004fbe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004fc0:	f10b 0b01 	add.w	fp, fp, #1
 8004fc4:	e7bb      	b.n	8004f3e <_printf_float+0x302>
 8004fc6:	4631      	mov	r1, r6
 8004fc8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004fcc:	4628      	mov	r0, r5
 8004fce:	47b8      	blx	r7
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	d1c0      	bne.n	8004f56 <_printf_float+0x31a>
 8004fd4:	e68d      	b.n	8004cf2 <_printf_float+0xb6>
 8004fd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004fd8:	464b      	mov	r3, r9
 8004fda:	4631      	mov	r1, r6
 8004fdc:	4628      	mov	r0, r5
 8004fde:	4442      	add	r2, r8
 8004fe0:	47b8      	blx	r7
 8004fe2:	3001      	adds	r0, #1
 8004fe4:	d1c3      	bne.n	8004f6e <_printf_float+0x332>
 8004fe6:	e684      	b.n	8004cf2 <_printf_float+0xb6>
 8004fe8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004fec:	f1ba 0f01 	cmp.w	sl, #1
 8004ff0:	dc01      	bgt.n	8004ff6 <_printf_float+0x3ba>
 8004ff2:	07db      	lsls	r3, r3, #31
 8004ff4:	d536      	bpl.n	8005064 <_printf_float+0x428>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	4642      	mov	r2, r8
 8004ffa:	4631      	mov	r1, r6
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	47b8      	blx	r7
 8005000:	3001      	adds	r0, #1
 8005002:	f43f ae76 	beq.w	8004cf2 <_printf_float+0xb6>
 8005006:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800500a:	4631      	mov	r1, r6
 800500c:	4628      	mov	r0, r5
 800500e:	47b8      	blx	r7
 8005010:	3001      	adds	r0, #1
 8005012:	f43f ae6e 	beq.w	8004cf2 <_printf_float+0xb6>
 8005016:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800501a:	2200      	movs	r2, #0
 800501c:	2300      	movs	r3, #0
 800501e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005022:	f7fb fcc1 	bl	80009a8 <__aeabi_dcmpeq>
 8005026:	b9c0      	cbnz	r0, 800505a <_printf_float+0x41e>
 8005028:	4653      	mov	r3, sl
 800502a:	f108 0201 	add.w	r2, r8, #1
 800502e:	4631      	mov	r1, r6
 8005030:	4628      	mov	r0, r5
 8005032:	47b8      	blx	r7
 8005034:	3001      	adds	r0, #1
 8005036:	d10c      	bne.n	8005052 <_printf_float+0x416>
 8005038:	e65b      	b.n	8004cf2 <_printf_float+0xb6>
 800503a:	2301      	movs	r3, #1
 800503c:	465a      	mov	r2, fp
 800503e:	4631      	mov	r1, r6
 8005040:	4628      	mov	r0, r5
 8005042:	47b8      	blx	r7
 8005044:	3001      	adds	r0, #1
 8005046:	f43f ae54 	beq.w	8004cf2 <_printf_float+0xb6>
 800504a:	f108 0801 	add.w	r8, r8, #1
 800504e:	45d0      	cmp	r8, sl
 8005050:	dbf3      	blt.n	800503a <_printf_float+0x3fe>
 8005052:	464b      	mov	r3, r9
 8005054:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005058:	e6e0      	b.n	8004e1c <_printf_float+0x1e0>
 800505a:	f04f 0800 	mov.w	r8, #0
 800505e:	f104 0b1a 	add.w	fp, r4, #26
 8005062:	e7f4      	b.n	800504e <_printf_float+0x412>
 8005064:	2301      	movs	r3, #1
 8005066:	4642      	mov	r2, r8
 8005068:	e7e1      	b.n	800502e <_printf_float+0x3f2>
 800506a:	2301      	movs	r3, #1
 800506c:	464a      	mov	r2, r9
 800506e:	4631      	mov	r1, r6
 8005070:	4628      	mov	r0, r5
 8005072:	47b8      	blx	r7
 8005074:	3001      	adds	r0, #1
 8005076:	f43f ae3c 	beq.w	8004cf2 <_printf_float+0xb6>
 800507a:	f108 0801 	add.w	r8, r8, #1
 800507e:	68e3      	ldr	r3, [r4, #12]
 8005080:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005082:	1a5b      	subs	r3, r3, r1
 8005084:	4543      	cmp	r3, r8
 8005086:	dcf0      	bgt.n	800506a <_printf_float+0x42e>
 8005088:	e6fd      	b.n	8004e86 <_printf_float+0x24a>
 800508a:	f04f 0800 	mov.w	r8, #0
 800508e:	f104 0919 	add.w	r9, r4, #25
 8005092:	e7f4      	b.n	800507e <_printf_float+0x442>

08005094 <_printf_common>:
 8005094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005098:	4616      	mov	r6, r2
 800509a:	4698      	mov	r8, r3
 800509c:	688a      	ldr	r2, [r1, #8]
 800509e:	690b      	ldr	r3, [r1, #16]
 80050a0:	4607      	mov	r7, r0
 80050a2:	4293      	cmp	r3, r2
 80050a4:	bfb8      	it	lt
 80050a6:	4613      	movlt	r3, r2
 80050a8:	6033      	str	r3, [r6, #0]
 80050aa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80050ae:	460c      	mov	r4, r1
 80050b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80050b4:	b10a      	cbz	r2, 80050ba <_printf_common+0x26>
 80050b6:	3301      	adds	r3, #1
 80050b8:	6033      	str	r3, [r6, #0]
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	0699      	lsls	r1, r3, #26
 80050be:	bf42      	ittt	mi
 80050c0:	6833      	ldrmi	r3, [r6, #0]
 80050c2:	3302      	addmi	r3, #2
 80050c4:	6033      	strmi	r3, [r6, #0]
 80050c6:	6825      	ldr	r5, [r4, #0]
 80050c8:	f015 0506 	ands.w	r5, r5, #6
 80050cc:	d106      	bne.n	80050dc <_printf_common+0x48>
 80050ce:	f104 0a19 	add.w	sl, r4, #25
 80050d2:	68e3      	ldr	r3, [r4, #12]
 80050d4:	6832      	ldr	r2, [r6, #0]
 80050d6:	1a9b      	subs	r3, r3, r2
 80050d8:	42ab      	cmp	r3, r5
 80050da:	dc2b      	bgt.n	8005134 <_printf_common+0xa0>
 80050dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050e0:	6822      	ldr	r2, [r4, #0]
 80050e2:	3b00      	subs	r3, #0
 80050e4:	bf18      	it	ne
 80050e6:	2301      	movne	r3, #1
 80050e8:	0692      	lsls	r2, r2, #26
 80050ea:	d430      	bmi.n	800514e <_printf_common+0xba>
 80050ec:	4641      	mov	r1, r8
 80050ee:	4638      	mov	r0, r7
 80050f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050f4:	47c8      	blx	r9
 80050f6:	3001      	adds	r0, #1
 80050f8:	d023      	beq.n	8005142 <_printf_common+0xae>
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	6922      	ldr	r2, [r4, #16]
 80050fe:	f003 0306 	and.w	r3, r3, #6
 8005102:	2b04      	cmp	r3, #4
 8005104:	bf14      	ite	ne
 8005106:	2500      	movne	r5, #0
 8005108:	6833      	ldreq	r3, [r6, #0]
 800510a:	f04f 0600 	mov.w	r6, #0
 800510e:	bf08      	it	eq
 8005110:	68e5      	ldreq	r5, [r4, #12]
 8005112:	f104 041a 	add.w	r4, r4, #26
 8005116:	bf08      	it	eq
 8005118:	1aed      	subeq	r5, r5, r3
 800511a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800511e:	bf08      	it	eq
 8005120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005124:	4293      	cmp	r3, r2
 8005126:	bfc4      	itt	gt
 8005128:	1a9b      	subgt	r3, r3, r2
 800512a:	18ed      	addgt	r5, r5, r3
 800512c:	42b5      	cmp	r5, r6
 800512e:	d11a      	bne.n	8005166 <_printf_common+0xd2>
 8005130:	2000      	movs	r0, #0
 8005132:	e008      	b.n	8005146 <_printf_common+0xb2>
 8005134:	2301      	movs	r3, #1
 8005136:	4652      	mov	r2, sl
 8005138:	4641      	mov	r1, r8
 800513a:	4638      	mov	r0, r7
 800513c:	47c8      	blx	r9
 800513e:	3001      	adds	r0, #1
 8005140:	d103      	bne.n	800514a <_printf_common+0xb6>
 8005142:	f04f 30ff 	mov.w	r0, #4294967295
 8005146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800514a:	3501      	adds	r5, #1
 800514c:	e7c1      	b.n	80050d2 <_printf_common+0x3e>
 800514e:	2030      	movs	r0, #48	@ 0x30
 8005150:	18e1      	adds	r1, r4, r3
 8005152:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800515c:	4422      	add	r2, r4
 800515e:	3302      	adds	r3, #2
 8005160:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005164:	e7c2      	b.n	80050ec <_printf_common+0x58>
 8005166:	2301      	movs	r3, #1
 8005168:	4622      	mov	r2, r4
 800516a:	4641      	mov	r1, r8
 800516c:	4638      	mov	r0, r7
 800516e:	47c8      	blx	r9
 8005170:	3001      	adds	r0, #1
 8005172:	d0e6      	beq.n	8005142 <_printf_common+0xae>
 8005174:	3601      	adds	r6, #1
 8005176:	e7d9      	b.n	800512c <_printf_common+0x98>

08005178 <_printf_i>:
 8005178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800517c:	7e0f      	ldrb	r7, [r1, #24]
 800517e:	4691      	mov	r9, r2
 8005180:	2f78      	cmp	r7, #120	@ 0x78
 8005182:	4680      	mov	r8, r0
 8005184:	460c      	mov	r4, r1
 8005186:	469a      	mov	sl, r3
 8005188:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800518a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800518e:	d807      	bhi.n	80051a0 <_printf_i+0x28>
 8005190:	2f62      	cmp	r7, #98	@ 0x62
 8005192:	d80a      	bhi.n	80051aa <_printf_i+0x32>
 8005194:	2f00      	cmp	r7, #0
 8005196:	f000 80d3 	beq.w	8005340 <_printf_i+0x1c8>
 800519a:	2f58      	cmp	r7, #88	@ 0x58
 800519c:	f000 80ba 	beq.w	8005314 <_printf_i+0x19c>
 80051a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80051a8:	e03a      	b.n	8005220 <_printf_i+0xa8>
 80051aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80051ae:	2b15      	cmp	r3, #21
 80051b0:	d8f6      	bhi.n	80051a0 <_printf_i+0x28>
 80051b2:	a101      	add	r1, pc, #4	@ (adr r1, 80051b8 <_printf_i+0x40>)
 80051b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051b8:	08005211 	.word	0x08005211
 80051bc:	08005225 	.word	0x08005225
 80051c0:	080051a1 	.word	0x080051a1
 80051c4:	080051a1 	.word	0x080051a1
 80051c8:	080051a1 	.word	0x080051a1
 80051cc:	080051a1 	.word	0x080051a1
 80051d0:	08005225 	.word	0x08005225
 80051d4:	080051a1 	.word	0x080051a1
 80051d8:	080051a1 	.word	0x080051a1
 80051dc:	080051a1 	.word	0x080051a1
 80051e0:	080051a1 	.word	0x080051a1
 80051e4:	08005327 	.word	0x08005327
 80051e8:	0800524f 	.word	0x0800524f
 80051ec:	080052e1 	.word	0x080052e1
 80051f0:	080051a1 	.word	0x080051a1
 80051f4:	080051a1 	.word	0x080051a1
 80051f8:	08005349 	.word	0x08005349
 80051fc:	080051a1 	.word	0x080051a1
 8005200:	0800524f 	.word	0x0800524f
 8005204:	080051a1 	.word	0x080051a1
 8005208:	080051a1 	.word	0x080051a1
 800520c:	080052e9 	.word	0x080052e9
 8005210:	6833      	ldr	r3, [r6, #0]
 8005212:	1d1a      	adds	r2, r3, #4
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6032      	str	r2, [r6, #0]
 8005218:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800521c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005220:	2301      	movs	r3, #1
 8005222:	e09e      	b.n	8005362 <_printf_i+0x1ea>
 8005224:	6833      	ldr	r3, [r6, #0]
 8005226:	6820      	ldr	r0, [r4, #0]
 8005228:	1d19      	adds	r1, r3, #4
 800522a:	6031      	str	r1, [r6, #0]
 800522c:	0606      	lsls	r6, r0, #24
 800522e:	d501      	bpl.n	8005234 <_printf_i+0xbc>
 8005230:	681d      	ldr	r5, [r3, #0]
 8005232:	e003      	b.n	800523c <_printf_i+0xc4>
 8005234:	0645      	lsls	r5, r0, #25
 8005236:	d5fb      	bpl.n	8005230 <_printf_i+0xb8>
 8005238:	f9b3 5000 	ldrsh.w	r5, [r3]
 800523c:	2d00      	cmp	r5, #0
 800523e:	da03      	bge.n	8005248 <_printf_i+0xd0>
 8005240:	232d      	movs	r3, #45	@ 0x2d
 8005242:	426d      	negs	r5, r5
 8005244:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005248:	230a      	movs	r3, #10
 800524a:	4859      	ldr	r0, [pc, #356]	@ (80053b0 <_printf_i+0x238>)
 800524c:	e011      	b.n	8005272 <_printf_i+0xfa>
 800524e:	6821      	ldr	r1, [r4, #0]
 8005250:	6833      	ldr	r3, [r6, #0]
 8005252:	0608      	lsls	r0, r1, #24
 8005254:	f853 5b04 	ldr.w	r5, [r3], #4
 8005258:	d402      	bmi.n	8005260 <_printf_i+0xe8>
 800525a:	0649      	lsls	r1, r1, #25
 800525c:	bf48      	it	mi
 800525e:	b2ad      	uxthmi	r5, r5
 8005260:	2f6f      	cmp	r7, #111	@ 0x6f
 8005262:	6033      	str	r3, [r6, #0]
 8005264:	bf14      	ite	ne
 8005266:	230a      	movne	r3, #10
 8005268:	2308      	moveq	r3, #8
 800526a:	4851      	ldr	r0, [pc, #324]	@ (80053b0 <_printf_i+0x238>)
 800526c:	2100      	movs	r1, #0
 800526e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005272:	6866      	ldr	r6, [r4, #4]
 8005274:	2e00      	cmp	r6, #0
 8005276:	bfa8      	it	ge
 8005278:	6821      	ldrge	r1, [r4, #0]
 800527a:	60a6      	str	r6, [r4, #8]
 800527c:	bfa4      	itt	ge
 800527e:	f021 0104 	bicge.w	r1, r1, #4
 8005282:	6021      	strge	r1, [r4, #0]
 8005284:	b90d      	cbnz	r5, 800528a <_printf_i+0x112>
 8005286:	2e00      	cmp	r6, #0
 8005288:	d04b      	beq.n	8005322 <_printf_i+0x1aa>
 800528a:	4616      	mov	r6, r2
 800528c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005290:	fb03 5711 	mls	r7, r3, r1, r5
 8005294:	5dc7      	ldrb	r7, [r0, r7]
 8005296:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800529a:	462f      	mov	r7, r5
 800529c:	42bb      	cmp	r3, r7
 800529e:	460d      	mov	r5, r1
 80052a0:	d9f4      	bls.n	800528c <_printf_i+0x114>
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	d10b      	bne.n	80052be <_printf_i+0x146>
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	07df      	lsls	r7, r3, #31
 80052aa:	d508      	bpl.n	80052be <_printf_i+0x146>
 80052ac:	6923      	ldr	r3, [r4, #16]
 80052ae:	6861      	ldr	r1, [r4, #4]
 80052b0:	4299      	cmp	r1, r3
 80052b2:	bfde      	ittt	le
 80052b4:	2330      	movle	r3, #48	@ 0x30
 80052b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052be:	1b92      	subs	r2, r2, r6
 80052c0:	6122      	str	r2, [r4, #16]
 80052c2:	464b      	mov	r3, r9
 80052c4:	4621      	mov	r1, r4
 80052c6:	4640      	mov	r0, r8
 80052c8:	f8cd a000 	str.w	sl, [sp]
 80052cc:	aa03      	add	r2, sp, #12
 80052ce:	f7ff fee1 	bl	8005094 <_printf_common>
 80052d2:	3001      	adds	r0, #1
 80052d4:	d14a      	bne.n	800536c <_printf_i+0x1f4>
 80052d6:	f04f 30ff 	mov.w	r0, #4294967295
 80052da:	b004      	add	sp, #16
 80052dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	f043 0320 	orr.w	r3, r3, #32
 80052e6:	6023      	str	r3, [r4, #0]
 80052e8:	2778      	movs	r7, #120	@ 0x78
 80052ea:	4832      	ldr	r0, [pc, #200]	@ (80053b4 <_printf_i+0x23c>)
 80052ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	6831      	ldr	r1, [r6, #0]
 80052f4:	061f      	lsls	r7, r3, #24
 80052f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80052fa:	d402      	bmi.n	8005302 <_printf_i+0x18a>
 80052fc:	065f      	lsls	r7, r3, #25
 80052fe:	bf48      	it	mi
 8005300:	b2ad      	uxthmi	r5, r5
 8005302:	6031      	str	r1, [r6, #0]
 8005304:	07d9      	lsls	r1, r3, #31
 8005306:	bf44      	itt	mi
 8005308:	f043 0320 	orrmi.w	r3, r3, #32
 800530c:	6023      	strmi	r3, [r4, #0]
 800530e:	b11d      	cbz	r5, 8005318 <_printf_i+0x1a0>
 8005310:	2310      	movs	r3, #16
 8005312:	e7ab      	b.n	800526c <_printf_i+0xf4>
 8005314:	4826      	ldr	r0, [pc, #152]	@ (80053b0 <_printf_i+0x238>)
 8005316:	e7e9      	b.n	80052ec <_printf_i+0x174>
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	f023 0320 	bic.w	r3, r3, #32
 800531e:	6023      	str	r3, [r4, #0]
 8005320:	e7f6      	b.n	8005310 <_printf_i+0x198>
 8005322:	4616      	mov	r6, r2
 8005324:	e7bd      	b.n	80052a2 <_printf_i+0x12a>
 8005326:	6833      	ldr	r3, [r6, #0]
 8005328:	6825      	ldr	r5, [r4, #0]
 800532a:	1d18      	adds	r0, r3, #4
 800532c:	6961      	ldr	r1, [r4, #20]
 800532e:	6030      	str	r0, [r6, #0]
 8005330:	062e      	lsls	r6, r5, #24
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	d501      	bpl.n	800533a <_printf_i+0x1c2>
 8005336:	6019      	str	r1, [r3, #0]
 8005338:	e002      	b.n	8005340 <_printf_i+0x1c8>
 800533a:	0668      	lsls	r0, r5, #25
 800533c:	d5fb      	bpl.n	8005336 <_printf_i+0x1be>
 800533e:	8019      	strh	r1, [r3, #0]
 8005340:	2300      	movs	r3, #0
 8005342:	4616      	mov	r6, r2
 8005344:	6123      	str	r3, [r4, #16]
 8005346:	e7bc      	b.n	80052c2 <_printf_i+0x14a>
 8005348:	6833      	ldr	r3, [r6, #0]
 800534a:	2100      	movs	r1, #0
 800534c:	1d1a      	adds	r2, r3, #4
 800534e:	6032      	str	r2, [r6, #0]
 8005350:	681e      	ldr	r6, [r3, #0]
 8005352:	6862      	ldr	r2, [r4, #4]
 8005354:	4630      	mov	r0, r6
 8005356:	f000 fbe4 	bl	8005b22 <memchr>
 800535a:	b108      	cbz	r0, 8005360 <_printf_i+0x1e8>
 800535c:	1b80      	subs	r0, r0, r6
 800535e:	6060      	str	r0, [r4, #4]
 8005360:	6863      	ldr	r3, [r4, #4]
 8005362:	6123      	str	r3, [r4, #16]
 8005364:	2300      	movs	r3, #0
 8005366:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800536a:	e7aa      	b.n	80052c2 <_printf_i+0x14a>
 800536c:	4632      	mov	r2, r6
 800536e:	4649      	mov	r1, r9
 8005370:	4640      	mov	r0, r8
 8005372:	6923      	ldr	r3, [r4, #16]
 8005374:	47d0      	blx	sl
 8005376:	3001      	adds	r0, #1
 8005378:	d0ad      	beq.n	80052d6 <_printf_i+0x15e>
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	079b      	lsls	r3, r3, #30
 800537e:	d413      	bmi.n	80053a8 <_printf_i+0x230>
 8005380:	68e0      	ldr	r0, [r4, #12]
 8005382:	9b03      	ldr	r3, [sp, #12]
 8005384:	4298      	cmp	r0, r3
 8005386:	bfb8      	it	lt
 8005388:	4618      	movlt	r0, r3
 800538a:	e7a6      	b.n	80052da <_printf_i+0x162>
 800538c:	2301      	movs	r3, #1
 800538e:	4632      	mov	r2, r6
 8005390:	4649      	mov	r1, r9
 8005392:	4640      	mov	r0, r8
 8005394:	47d0      	blx	sl
 8005396:	3001      	adds	r0, #1
 8005398:	d09d      	beq.n	80052d6 <_printf_i+0x15e>
 800539a:	3501      	adds	r5, #1
 800539c:	68e3      	ldr	r3, [r4, #12]
 800539e:	9903      	ldr	r1, [sp, #12]
 80053a0:	1a5b      	subs	r3, r3, r1
 80053a2:	42ab      	cmp	r3, r5
 80053a4:	dcf2      	bgt.n	800538c <_printf_i+0x214>
 80053a6:	e7eb      	b.n	8005380 <_printf_i+0x208>
 80053a8:	2500      	movs	r5, #0
 80053aa:	f104 0619 	add.w	r6, r4, #25
 80053ae:	e7f5      	b.n	800539c <_printf_i+0x224>
 80053b0:	08009894 	.word	0x08009894
 80053b4:	080098a5 	.word	0x080098a5

080053b8 <_scanf_float>:
 80053b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053bc:	b087      	sub	sp, #28
 80053be:	9303      	str	r3, [sp, #12]
 80053c0:	688b      	ldr	r3, [r1, #8]
 80053c2:	4617      	mov	r7, r2
 80053c4:	1e5a      	subs	r2, r3, #1
 80053c6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80053ca:	bf82      	ittt	hi
 80053cc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80053d0:	eb03 0b05 	addhi.w	fp, r3, r5
 80053d4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80053d8:	460a      	mov	r2, r1
 80053da:	f04f 0500 	mov.w	r5, #0
 80053de:	bf88      	it	hi
 80053e0:	608b      	strhi	r3, [r1, #8]
 80053e2:	680b      	ldr	r3, [r1, #0]
 80053e4:	4680      	mov	r8, r0
 80053e6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80053ea:	f842 3b1c 	str.w	r3, [r2], #28
 80053ee:	460c      	mov	r4, r1
 80053f0:	bf98      	it	ls
 80053f2:	f04f 0b00 	movls.w	fp, #0
 80053f6:	4616      	mov	r6, r2
 80053f8:	46aa      	mov	sl, r5
 80053fa:	46a9      	mov	r9, r5
 80053fc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005400:	9201      	str	r2, [sp, #4]
 8005402:	9502      	str	r5, [sp, #8]
 8005404:	68a2      	ldr	r2, [r4, #8]
 8005406:	b152      	cbz	r2, 800541e <_scanf_float+0x66>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b4e      	cmp	r3, #78	@ 0x4e
 800540e:	d865      	bhi.n	80054dc <_scanf_float+0x124>
 8005410:	2b40      	cmp	r3, #64	@ 0x40
 8005412:	d83d      	bhi.n	8005490 <_scanf_float+0xd8>
 8005414:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005418:	b2c8      	uxtb	r0, r1
 800541a:	280e      	cmp	r0, #14
 800541c:	d93b      	bls.n	8005496 <_scanf_float+0xde>
 800541e:	f1b9 0f00 	cmp.w	r9, #0
 8005422:	d003      	beq.n	800542c <_scanf_float+0x74>
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800542a:	6023      	str	r3, [r4, #0]
 800542c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005430:	f1ba 0f01 	cmp.w	sl, #1
 8005434:	f200 8118 	bhi.w	8005668 <_scanf_float+0x2b0>
 8005438:	9b01      	ldr	r3, [sp, #4]
 800543a:	429e      	cmp	r6, r3
 800543c:	f200 8109 	bhi.w	8005652 <_scanf_float+0x29a>
 8005440:	2001      	movs	r0, #1
 8005442:	b007      	add	sp, #28
 8005444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005448:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800544c:	2a0d      	cmp	r2, #13
 800544e:	d8e6      	bhi.n	800541e <_scanf_float+0x66>
 8005450:	a101      	add	r1, pc, #4	@ (adr r1, 8005458 <_scanf_float+0xa0>)
 8005452:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005456:	bf00      	nop
 8005458:	0800559f 	.word	0x0800559f
 800545c:	0800541f 	.word	0x0800541f
 8005460:	0800541f 	.word	0x0800541f
 8005464:	0800541f 	.word	0x0800541f
 8005468:	080055ff 	.word	0x080055ff
 800546c:	080055d7 	.word	0x080055d7
 8005470:	0800541f 	.word	0x0800541f
 8005474:	0800541f 	.word	0x0800541f
 8005478:	080055ad 	.word	0x080055ad
 800547c:	0800541f 	.word	0x0800541f
 8005480:	0800541f 	.word	0x0800541f
 8005484:	0800541f 	.word	0x0800541f
 8005488:	0800541f 	.word	0x0800541f
 800548c:	08005565 	.word	0x08005565
 8005490:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005494:	e7da      	b.n	800544c <_scanf_float+0x94>
 8005496:	290e      	cmp	r1, #14
 8005498:	d8c1      	bhi.n	800541e <_scanf_float+0x66>
 800549a:	a001      	add	r0, pc, #4	@ (adr r0, 80054a0 <_scanf_float+0xe8>)
 800549c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80054a0:	08005555 	.word	0x08005555
 80054a4:	0800541f 	.word	0x0800541f
 80054a8:	08005555 	.word	0x08005555
 80054ac:	080055eb 	.word	0x080055eb
 80054b0:	0800541f 	.word	0x0800541f
 80054b4:	080054fd 	.word	0x080054fd
 80054b8:	0800553b 	.word	0x0800553b
 80054bc:	0800553b 	.word	0x0800553b
 80054c0:	0800553b 	.word	0x0800553b
 80054c4:	0800553b 	.word	0x0800553b
 80054c8:	0800553b 	.word	0x0800553b
 80054cc:	0800553b 	.word	0x0800553b
 80054d0:	0800553b 	.word	0x0800553b
 80054d4:	0800553b 	.word	0x0800553b
 80054d8:	0800553b 	.word	0x0800553b
 80054dc:	2b6e      	cmp	r3, #110	@ 0x6e
 80054de:	d809      	bhi.n	80054f4 <_scanf_float+0x13c>
 80054e0:	2b60      	cmp	r3, #96	@ 0x60
 80054e2:	d8b1      	bhi.n	8005448 <_scanf_float+0x90>
 80054e4:	2b54      	cmp	r3, #84	@ 0x54
 80054e6:	d07b      	beq.n	80055e0 <_scanf_float+0x228>
 80054e8:	2b59      	cmp	r3, #89	@ 0x59
 80054ea:	d198      	bne.n	800541e <_scanf_float+0x66>
 80054ec:	2d07      	cmp	r5, #7
 80054ee:	d196      	bne.n	800541e <_scanf_float+0x66>
 80054f0:	2508      	movs	r5, #8
 80054f2:	e02c      	b.n	800554e <_scanf_float+0x196>
 80054f4:	2b74      	cmp	r3, #116	@ 0x74
 80054f6:	d073      	beq.n	80055e0 <_scanf_float+0x228>
 80054f8:	2b79      	cmp	r3, #121	@ 0x79
 80054fa:	e7f6      	b.n	80054ea <_scanf_float+0x132>
 80054fc:	6821      	ldr	r1, [r4, #0]
 80054fe:	05c8      	lsls	r0, r1, #23
 8005500:	d51b      	bpl.n	800553a <_scanf_float+0x182>
 8005502:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005506:	6021      	str	r1, [r4, #0]
 8005508:	f109 0901 	add.w	r9, r9, #1
 800550c:	f1bb 0f00 	cmp.w	fp, #0
 8005510:	d003      	beq.n	800551a <_scanf_float+0x162>
 8005512:	3201      	adds	r2, #1
 8005514:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005518:	60a2      	str	r2, [r4, #8]
 800551a:	68a3      	ldr	r3, [r4, #8]
 800551c:	3b01      	subs	r3, #1
 800551e:	60a3      	str	r3, [r4, #8]
 8005520:	6923      	ldr	r3, [r4, #16]
 8005522:	3301      	adds	r3, #1
 8005524:	6123      	str	r3, [r4, #16]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	3b01      	subs	r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	607b      	str	r3, [r7, #4]
 800552e:	f340 8087 	ble.w	8005640 <_scanf_float+0x288>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	3301      	adds	r3, #1
 8005536:	603b      	str	r3, [r7, #0]
 8005538:	e764      	b.n	8005404 <_scanf_float+0x4c>
 800553a:	eb1a 0105 	adds.w	r1, sl, r5
 800553e:	f47f af6e 	bne.w	800541e <_scanf_float+0x66>
 8005542:	460d      	mov	r5, r1
 8005544:	468a      	mov	sl, r1
 8005546:	6822      	ldr	r2, [r4, #0]
 8005548:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800554c:	6022      	str	r2, [r4, #0]
 800554e:	f806 3b01 	strb.w	r3, [r6], #1
 8005552:	e7e2      	b.n	800551a <_scanf_float+0x162>
 8005554:	6822      	ldr	r2, [r4, #0]
 8005556:	0610      	lsls	r0, r2, #24
 8005558:	f57f af61 	bpl.w	800541e <_scanf_float+0x66>
 800555c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005560:	6022      	str	r2, [r4, #0]
 8005562:	e7f4      	b.n	800554e <_scanf_float+0x196>
 8005564:	f1ba 0f00 	cmp.w	sl, #0
 8005568:	d10e      	bne.n	8005588 <_scanf_float+0x1d0>
 800556a:	f1b9 0f00 	cmp.w	r9, #0
 800556e:	d10e      	bne.n	800558e <_scanf_float+0x1d6>
 8005570:	6822      	ldr	r2, [r4, #0]
 8005572:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005576:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800557a:	d108      	bne.n	800558e <_scanf_float+0x1d6>
 800557c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005580:	f04f 0a01 	mov.w	sl, #1
 8005584:	6022      	str	r2, [r4, #0]
 8005586:	e7e2      	b.n	800554e <_scanf_float+0x196>
 8005588:	f1ba 0f02 	cmp.w	sl, #2
 800558c:	d055      	beq.n	800563a <_scanf_float+0x282>
 800558e:	2d01      	cmp	r5, #1
 8005590:	d002      	beq.n	8005598 <_scanf_float+0x1e0>
 8005592:	2d04      	cmp	r5, #4
 8005594:	f47f af43 	bne.w	800541e <_scanf_float+0x66>
 8005598:	3501      	adds	r5, #1
 800559a:	b2ed      	uxtb	r5, r5
 800559c:	e7d7      	b.n	800554e <_scanf_float+0x196>
 800559e:	f1ba 0f01 	cmp.w	sl, #1
 80055a2:	f47f af3c 	bne.w	800541e <_scanf_float+0x66>
 80055a6:	f04f 0a02 	mov.w	sl, #2
 80055aa:	e7d0      	b.n	800554e <_scanf_float+0x196>
 80055ac:	b97d      	cbnz	r5, 80055ce <_scanf_float+0x216>
 80055ae:	f1b9 0f00 	cmp.w	r9, #0
 80055b2:	f47f af37 	bne.w	8005424 <_scanf_float+0x6c>
 80055b6:	6822      	ldr	r2, [r4, #0]
 80055b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80055bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80055c0:	f040 8103 	bne.w	80057ca <_scanf_float+0x412>
 80055c4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80055c8:	2501      	movs	r5, #1
 80055ca:	6022      	str	r2, [r4, #0]
 80055cc:	e7bf      	b.n	800554e <_scanf_float+0x196>
 80055ce:	2d03      	cmp	r5, #3
 80055d0:	d0e2      	beq.n	8005598 <_scanf_float+0x1e0>
 80055d2:	2d05      	cmp	r5, #5
 80055d4:	e7de      	b.n	8005594 <_scanf_float+0x1dc>
 80055d6:	2d02      	cmp	r5, #2
 80055d8:	f47f af21 	bne.w	800541e <_scanf_float+0x66>
 80055dc:	2503      	movs	r5, #3
 80055de:	e7b6      	b.n	800554e <_scanf_float+0x196>
 80055e0:	2d06      	cmp	r5, #6
 80055e2:	f47f af1c 	bne.w	800541e <_scanf_float+0x66>
 80055e6:	2507      	movs	r5, #7
 80055e8:	e7b1      	b.n	800554e <_scanf_float+0x196>
 80055ea:	6822      	ldr	r2, [r4, #0]
 80055ec:	0591      	lsls	r1, r2, #22
 80055ee:	f57f af16 	bpl.w	800541e <_scanf_float+0x66>
 80055f2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80055f6:	6022      	str	r2, [r4, #0]
 80055f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80055fc:	e7a7      	b.n	800554e <_scanf_float+0x196>
 80055fe:	6822      	ldr	r2, [r4, #0]
 8005600:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005604:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005608:	d006      	beq.n	8005618 <_scanf_float+0x260>
 800560a:	0550      	lsls	r0, r2, #21
 800560c:	f57f af07 	bpl.w	800541e <_scanf_float+0x66>
 8005610:	f1b9 0f00 	cmp.w	r9, #0
 8005614:	f000 80d9 	beq.w	80057ca <_scanf_float+0x412>
 8005618:	0591      	lsls	r1, r2, #22
 800561a:	bf58      	it	pl
 800561c:	9902      	ldrpl	r1, [sp, #8]
 800561e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005622:	bf58      	it	pl
 8005624:	eba9 0101 	subpl.w	r1, r9, r1
 8005628:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800562c:	f04f 0900 	mov.w	r9, #0
 8005630:	bf58      	it	pl
 8005632:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005636:	6022      	str	r2, [r4, #0]
 8005638:	e789      	b.n	800554e <_scanf_float+0x196>
 800563a:	f04f 0a03 	mov.w	sl, #3
 800563e:	e786      	b.n	800554e <_scanf_float+0x196>
 8005640:	4639      	mov	r1, r7
 8005642:	4640      	mov	r0, r8
 8005644:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005648:	4798      	blx	r3
 800564a:	2800      	cmp	r0, #0
 800564c:	f43f aeda 	beq.w	8005404 <_scanf_float+0x4c>
 8005650:	e6e5      	b.n	800541e <_scanf_float+0x66>
 8005652:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005656:	463a      	mov	r2, r7
 8005658:	4640      	mov	r0, r8
 800565a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800565e:	4798      	blx	r3
 8005660:	6923      	ldr	r3, [r4, #16]
 8005662:	3b01      	subs	r3, #1
 8005664:	6123      	str	r3, [r4, #16]
 8005666:	e6e7      	b.n	8005438 <_scanf_float+0x80>
 8005668:	1e6b      	subs	r3, r5, #1
 800566a:	2b06      	cmp	r3, #6
 800566c:	d824      	bhi.n	80056b8 <_scanf_float+0x300>
 800566e:	2d02      	cmp	r5, #2
 8005670:	d836      	bhi.n	80056e0 <_scanf_float+0x328>
 8005672:	9b01      	ldr	r3, [sp, #4]
 8005674:	429e      	cmp	r6, r3
 8005676:	f67f aee3 	bls.w	8005440 <_scanf_float+0x88>
 800567a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800567e:	463a      	mov	r2, r7
 8005680:	4640      	mov	r0, r8
 8005682:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005686:	4798      	blx	r3
 8005688:	6923      	ldr	r3, [r4, #16]
 800568a:	3b01      	subs	r3, #1
 800568c:	6123      	str	r3, [r4, #16]
 800568e:	e7f0      	b.n	8005672 <_scanf_float+0x2ba>
 8005690:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005694:	463a      	mov	r2, r7
 8005696:	4640      	mov	r0, r8
 8005698:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800569c:	4798      	blx	r3
 800569e:	6923      	ldr	r3, [r4, #16]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	6123      	str	r3, [r4, #16]
 80056a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056a8:	fa5f fa8a 	uxtb.w	sl, sl
 80056ac:	f1ba 0f02 	cmp.w	sl, #2
 80056b0:	d1ee      	bne.n	8005690 <_scanf_float+0x2d8>
 80056b2:	3d03      	subs	r5, #3
 80056b4:	b2ed      	uxtb	r5, r5
 80056b6:	1b76      	subs	r6, r6, r5
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	05da      	lsls	r2, r3, #23
 80056bc:	d530      	bpl.n	8005720 <_scanf_float+0x368>
 80056be:	055b      	lsls	r3, r3, #21
 80056c0:	d511      	bpl.n	80056e6 <_scanf_float+0x32e>
 80056c2:	9b01      	ldr	r3, [sp, #4]
 80056c4:	429e      	cmp	r6, r3
 80056c6:	f67f aebb 	bls.w	8005440 <_scanf_float+0x88>
 80056ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80056ce:	463a      	mov	r2, r7
 80056d0:	4640      	mov	r0, r8
 80056d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056d6:	4798      	blx	r3
 80056d8:	6923      	ldr	r3, [r4, #16]
 80056da:	3b01      	subs	r3, #1
 80056dc:	6123      	str	r3, [r4, #16]
 80056de:	e7f0      	b.n	80056c2 <_scanf_float+0x30a>
 80056e0:	46aa      	mov	sl, r5
 80056e2:	46b3      	mov	fp, r6
 80056e4:	e7de      	b.n	80056a4 <_scanf_float+0x2ec>
 80056e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80056ea:	6923      	ldr	r3, [r4, #16]
 80056ec:	2965      	cmp	r1, #101	@ 0x65
 80056ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80056f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80056f6:	6123      	str	r3, [r4, #16]
 80056f8:	d00c      	beq.n	8005714 <_scanf_float+0x35c>
 80056fa:	2945      	cmp	r1, #69	@ 0x45
 80056fc:	d00a      	beq.n	8005714 <_scanf_float+0x35c>
 80056fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005702:	463a      	mov	r2, r7
 8005704:	4640      	mov	r0, r8
 8005706:	4798      	blx	r3
 8005708:	6923      	ldr	r3, [r4, #16]
 800570a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800570e:	3b01      	subs	r3, #1
 8005710:	1eb5      	subs	r5, r6, #2
 8005712:	6123      	str	r3, [r4, #16]
 8005714:	463a      	mov	r2, r7
 8005716:	4640      	mov	r0, r8
 8005718:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800571c:	4798      	blx	r3
 800571e:	462e      	mov	r6, r5
 8005720:	6822      	ldr	r2, [r4, #0]
 8005722:	f012 0210 	ands.w	r2, r2, #16
 8005726:	d001      	beq.n	800572c <_scanf_float+0x374>
 8005728:	2000      	movs	r0, #0
 800572a:	e68a      	b.n	8005442 <_scanf_float+0x8a>
 800572c:	7032      	strb	r2, [r6, #0]
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005734:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005738:	d11c      	bne.n	8005774 <_scanf_float+0x3bc>
 800573a:	9b02      	ldr	r3, [sp, #8]
 800573c:	454b      	cmp	r3, r9
 800573e:	eba3 0209 	sub.w	r2, r3, r9
 8005742:	d123      	bne.n	800578c <_scanf_float+0x3d4>
 8005744:	2200      	movs	r2, #0
 8005746:	4640      	mov	r0, r8
 8005748:	9901      	ldr	r1, [sp, #4]
 800574a:	f002 fbed 	bl	8007f28 <_strtod_r>
 800574e:	9b03      	ldr	r3, [sp, #12]
 8005750:	6825      	ldr	r5, [r4, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f015 0f02 	tst.w	r5, #2
 8005758:	4606      	mov	r6, r0
 800575a:	460f      	mov	r7, r1
 800575c:	f103 0204 	add.w	r2, r3, #4
 8005760:	d01f      	beq.n	80057a2 <_scanf_float+0x3ea>
 8005762:	9903      	ldr	r1, [sp, #12]
 8005764:	600a      	str	r2, [r1, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	e9c3 6700 	strd	r6, r7, [r3]
 800576c:	68e3      	ldr	r3, [r4, #12]
 800576e:	3301      	adds	r3, #1
 8005770:	60e3      	str	r3, [r4, #12]
 8005772:	e7d9      	b.n	8005728 <_scanf_float+0x370>
 8005774:	9b04      	ldr	r3, [sp, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0e4      	beq.n	8005744 <_scanf_float+0x38c>
 800577a:	9905      	ldr	r1, [sp, #20]
 800577c:	230a      	movs	r3, #10
 800577e:	4640      	mov	r0, r8
 8005780:	3101      	adds	r1, #1
 8005782:	f002 fc51 	bl	8008028 <_strtol_r>
 8005786:	9b04      	ldr	r3, [sp, #16]
 8005788:	9e05      	ldr	r6, [sp, #20]
 800578a:	1ac2      	subs	r2, r0, r3
 800578c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005790:	429e      	cmp	r6, r3
 8005792:	bf28      	it	cs
 8005794:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005798:	4630      	mov	r0, r6
 800579a:	490d      	ldr	r1, [pc, #52]	@ (80057d0 <_scanf_float+0x418>)
 800579c:	f000 f8de 	bl	800595c <siprintf>
 80057a0:	e7d0      	b.n	8005744 <_scanf_float+0x38c>
 80057a2:	076d      	lsls	r5, r5, #29
 80057a4:	d4dd      	bmi.n	8005762 <_scanf_float+0x3aa>
 80057a6:	9d03      	ldr	r5, [sp, #12]
 80057a8:	602a      	str	r2, [r5, #0]
 80057aa:	681d      	ldr	r5, [r3, #0]
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	f7fb f92c 	bl	8000a0c <__aeabi_dcmpun>
 80057b4:	b120      	cbz	r0, 80057c0 <_scanf_float+0x408>
 80057b6:	4807      	ldr	r0, [pc, #28]	@ (80057d4 <_scanf_float+0x41c>)
 80057b8:	f000 f9c2 	bl	8005b40 <nanf>
 80057bc:	6028      	str	r0, [r5, #0]
 80057be:	e7d5      	b.n	800576c <_scanf_float+0x3b4>
 80057c0:	4630      	mov	r0, r6
 80057c2:	4639      	mov	r1, r7
 80057c4:	f7fb f980 	bl	8000ac8 <__aeabi_d2f>
 80057c8:	e7f8      	b.n	80057bc <_scanf_float+0x404>
 80057ca:	f04f 0900 	mov.w	r9, #0
 80057ce:	e62d      	b.n	800542c <_scanf_float+0x74>
 80057d0:	080098b6 	.word	0x080098b6
 80057d4:	08009c4d 	.word	0x08009c4d

080057d8 <std>:
 80057d8:	2300      	movs	r3, #0
 80057da:	b510      	push	{r4, lr}
 80057dc:	4604      	mov	r4, r0
 80057de:	e9c0 3300 	strd	r3, r3, [r0]
 80057e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057e6:	6083      	str	r3, [r0, #8]
 80057e8:	8181      	strh	r1, [r0, #12]
 80057ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80057ec:	81c2      	strh	r2, [r0, #14]
 80057ee:	6183      	str	r3, [r0, #24]
 80057f0:	4619      	mov	r1, r3
 80057f2:	2208      	movs	r2, #8
 80057f4:	305c      	adds	r0, #92	@ 0x5c
 80057f6:	f000 f914 	bl	8005a22 <memset>
 80057fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005830 <std+0x58>)
 80057fc:	6224      	str	r4, [r4, #32]
 80057fe:	6263      	str	r3, [r4, #36]	@ 0x24
 8005800:	4b0c      	ldr	r3, [pc, #48]	@ (8005834 <std+0x5c>)
 8005802:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005804:	4b0c      	ldr	r3, [pc, #48]	@ (8005838 <std+0x60>)
 8005806:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005808:	4b0c      	ldr	r3, [pc, #48]	@ (800583c <std+0x64>)
 800580a:	6323      	str	r3, [r4, #48]	@ 0x30
 800580c:	4b0c      	ldr	r3, [pc, #48]	@ (8005840 <std+0x68>)
 800580e:	429c      	cmp	r4, r3
 8005810:	d006      	beq.n	8005820 <std+0x48>
 8005812:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005816:	4294      	cmp	r4, r2
 8005818:	d002      	beq.n	8005820 <std+0x48>
 800581a:	33d0      	adds	r3, #208	@ 0xd0
 800581c:	429c      	cmp	r4, r3
 800581e:	d105      	bne.n	800582c <std+0x54>
 8005820:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005828:	f000 b978 	b.w	8005b1c <__retarget_lock_init_recursive>
 800582c:	bd10      	pop	{r4, pc}
 800582e:	bf00      	nop
 8005830:	0800599d 	.word	0x0800599d
 8005834:	080059bf 	.word	0x080059bf
 8005838:	080059f7 	.word	0x080059f7
 800583c:	08005a1b 	.word	0x08005a1b
 8005840:	20000344 	.word	0x20000344

08005844 <stdio_exit_handler>:
 8005844:	4a02      	ldr	r2, [pc, #8]	@ (8005850 <stdio_exit_handler+0xc>)
 8005846:	4903      	ldr	r1, [pc, #12]	@ (8005854 <stdio_exit_handler+0x10>)
 8005848:	4803      	ldr	r0, [pc, #12]	@ (8005858 <stdio_exit_handler+0x14>)
 800584a:	f000 b869 	b.w	8005920 <_fwalk_sglue>
 800584e:	bf00      	nop
 8005850:	2000000c 	.word	0x2000000c
 8005854:	080083dd 	.word	0x080083dd
 8005858:	2000001c 	.word	0x2000001c

0800585c <cleanup_stdio>:
 800585c:	6841      	ldr	r1, [r0, #4]
 800585e:	4b0c      	ldr	r3, [pc, #48]	@ (8005890 <cleanup_stdio+0x34>)
 8005860:	b510      	push	{r4, lr}
 8005862:	4299      	cmp	r1, r3
 8005864:	4604      	mov	r4, r0
 8005866:	d001      	beq.n	800586c <cleanup_stdio+0x10>
 8005868:	f002 fdb8 	bl	80083dc <_fflush_r>
 800586c:	68a1      	ldr	r1, [r4, #8]
 800586e:	4b09      	ldr	r3, [pc, #36]	@ (8005894 <cleanup_stdio+0x38>)
 8005870:	4299      	cmp	r1, r3
 8005872:	d002      	beq.n	800587a <cleanup_stdio+0x1e>
 8005874:	4620      	mov	r0, r4
 8005876:	f002 fdb1 	bl	80083dc <_fflush_r>
 800587a:	68e1      	ldr	r1, [r4, #12]
 800587c:	4b06      	ldr	r3, [pc, #24]	@ (8005898 <cleanup_stdio+0x3c>)
 800587e:	4299      	cmp	r1, r3
 8005880:	d004      	beq.n	800588c <cleanup_stdio+0x30>
 8005882:	4620      	mov	r0, r4
 8005884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005888:	f002 bda8 	b.w	80083dc <_fflush_r>
 800588c:	bd10      	pop	{r4, pc}
 800588e:	bf00      	nop
 8005890:	20000344 	.word	0x20000344
 8005894:	200003ac 	.word	0x200003ac
 8005898:	20000414 	.word	0x20000414

0800589c <global_stdio_init.part.0>:
 800589c:	b510      	push	{r4, lr}
 800589e:	4b0b      	ldr	r3, [pc, #44]	@ (80058cc <global_stdio_init.part.0+0x30>)
 80058a0:	4c0b      	ldr	r4, [pc, #44]	@ (80058d0 <global_stdio_init.part.0+0x34>)
 80058a2:	4a0c      	ldr	r2, [pc, #48]	@ (80058d4 <global_stdio_init.part.0+0x38>)
 80058a4:	4620      	mov	r0, r4
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	2104      	movs	r1, #4
 80058aa:	2200      	movs	r2, #0
 80058ac:	f7ff ff94 	bl	80057d8 <std>
 80058b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80058b4:	2201      	movs	r2, #1
 80058b6:	2109      	movs	r1, #9
 80058b8:	f7ff ff8e 	bl	80057d8 <std>
 80058bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80058c0:	2202      	movs	r2, #2
 80058c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058c6:	2112      	movs	r1, #18
 80058c8:	f7ff bf86 	b.w	80057d8 <std>
 80058cc:	2000047c 	.word	0x2000047c
 80058d0:	20000344 	.word	0x20000344
 80058d4:	08005845 	.word	0x08005845

080058d8 <__sfp_lock_acquire>:
 80058d8:	4801      	ldr	r0, [pc, #4]	@ (80058e0 <__sfp_lock_acquire+0x8>)
 80058da:	f000 b920 	b.w	8005b1e <__retarget_lock_acquire_recursive>
 80058de:	bf00      	nop
 80058e0:	20000485 	.word	0x20000485

080058e4 <__sfp_lock_release>:
 80058e4:	4801      	ldr	r0, [pc, #4]	@ (80058ec <__sfp_lock_release+0x8>)
 80058e6:	f000 b91b 	b.w	8005b20 <__retarget_lock_release_recursive>
 80058ea:	bf00      	nop
 80058ec:	20000485 	.word	0x20000485

080058f0 <__sinit>:
 80058f0:	b510      	push	{r4, lr}
 80058f2:	4604      	mov	r4, r0
 80058f4:	f7ff fff0 	bl	80058d8 <__sfp_lock_acquire>
 80058f8:	6a23      	ldr	r3, [r4, #32]
 80058fa:	b11b      	cbz	r3, 8005904 <__sinit+0x14>
 80058fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005900:	f7ff bff0 	b.w	80058e4 <__sfp_lock_release>
 8005904:	4b04      	ldr	r3, [pc, #16]	@ (8005918 <__sinit+0x28>)
 8005906:	6223      	str	r3, [r4, #32]
 8005908:	4b04      	ldr	r3, [pc, #16]	@ (800591c <__sinit+0x2c>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1f5      	bne.n	80058fc <__sinit+0xc>
 8005910:	f7ff ffc4 	bl	800589c <global_stdio_init.part.0>
 8005914:	e7f2      	b.n	80058fc <__sinit+0xc>
 8005916:	bf00      	nop
 8005918:	0800585d 	.word	0x0800585d
 800591c:	2000047c 	.word	0x2000047c

08005920 <_fwalk_sglue>:
 8005920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005924:	4607      	mov	r7, r0
 8005926:	4688      	mov	r8, r1
 8005928:	4614      	mov	r4, r2
 800592a:	2600      	movs	r6, #0
 800592c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005930:	f1b9 0901 	subs.w	r9, r9, #1
 8005934:	d505      	bpl.n	8005942 <_fwalk_sglue+0x22>
 8005936:	6824      	ldr	r4, [r4, #0]
 8005938:	2c00      	cmp	r4, #0
 800593a:	d1f7      	bne.n	800592c <_fwalk_sglue+0xc>
 800593c:	4630      	mov	r0, r6
 800593e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005942:	89ab      	ldrh	r3, [r5, #12]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d907      	bls.n	8005958 <_fwalk_sglue+0x38>
 8005948:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800594c:	3301      	adds	r3, #1
 800594e:	d003      	beq.n	8005958 <_fwalk_sglue+0x38>
 8005950:	4629      	mov	r1, r5
 8005952:	4638      	mov	r0, r7
 8005954:	47c0      	blx	r8
 8005956:	4306      	orrs	r6, r0
 8005958:	3568      	adds	r5, #104	@ 0x68
 800595a:	e7e9      	b.n	8005930 <_fwalk_sglue+0x10>

0800595c <siprintf>:
 800595c:	b40e      	push	{r1, r2, r3}
 800595e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005962:	b500      	push	{lr}
 8005964:	b09c      	sub	sp, #112	@ 0x70
 8005966:	ab1d      	add	r3, sp, #116	@ 0x74
 8005968:	9002      	str	r0, [sp, #8]
 800596a:	9006      	str	r0, [sp, #24]
 800596c:	9107      	str	r1, [sp, #28]
 800596e:	9104      	str	r1, [sp, #16]
 8005970:	4808      	ldr	r0, [pc, #32]	@ (8005994 <siprintf+0x38>)
 8005972:	4909      	ldr	r1, [pc, #36]	@ (8005998 <siprintf+0x3c>)
 8005974:	f853 2b04 	ldr.w	r2, [r3], #4
 8005978:	9105      	str	r1, [sp, #20]
 800597a:	6800      	ldr	r0, [r0, #0]
 800597c:	a902      	add	r1, sp, #8
 800597e:	9301      	str	r3, [sp, #4]
 8005980:	f002 fbb0 	bl	80080e4 <_svfiprintf_r>
 8005984:	2200      	movs	r2, #0
 8005986:	9b02      	ldr	r3, [sp, #8]
 8005988:	701a      	strb	r2, [r3, #0]
 800598a:	b01c      	add	sp, #112	@ 0x70
 800598c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005990:	b003      	add	sp, #12
 8005992:	4770      	bx	lr
 8005994:	20000018 	.word	0x20000018
 8005998:	ffff0208 	.word	0xffff0208

0800599c <__sread>:
 800599c:	b510      	push	{r4, lr}
 800599e:	460c      	mov	r4, r1
 80059a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a4:	f000 f86c 	bl	8005a80 <_read_r>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	bfab      	itete	ge
 80059ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059ae:	89a3      	ldrhlt	r3, [r4, #12]
 80059b0:	181b      	addge	r3, r3, r0
 80059b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059b6:	bfac      	ite	ge
 80059b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059ba:	81a3      	strhlt	r3, [r4, #12]
 80059bc:	bd10      	pop	{r4, pc}

080059be <__swrite>:
 80059be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059c2:	461f      	mov	r7, r3
 80059c4:	898b      	ldrh	r3, [r1, #12]
 80059c6:	4605      	mov	r5, r0
 80059c8:	05db      	lsls	r3, r3, #23
 80059ca:	460c      	mov	r4, r1
 80059cc:	4616      	mov	r6, r2
 80059ce:	d505      	bpl.n	80059dc <__swrite+0x1e>
 80059d0:	2302      	movs	r3, #2
 80059d2:	2200      	movs	r2, #0
 80059d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059d8:	f000 f840 	bl	8005a5c <_lseek_r>
 80059dc:	89a3      	ldrh	r3, [r4, #12]
 80059de:	4632      	mov	r2, r6
 80059e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059e4:	81a3      	strh	r3, [r4, #12]
 80059e6:	4628      	mov	r0, r5
 80059e8:	463b      	mov	r3, r7
 80059ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059f2:	f000 b857 	b.w	8005aa4 <_write_r>

080059f6 <__sseek>:
 80059f6:	b510      	push	{r4, lr}
 80059f8:	460c      	mov	r4, r1
 80059fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059fe:	f000 f82d 	bl	8005a5c <_lseek_r>
 8005a02:	1c43      	adds	r3, r0, #1
 8005a04:	89a3      	ldrh	r3, [r4, #12]
 8005a06:	bf15      	itete	ne
 8005a08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a12:	81a3      	strheq	r3, [r4, #12]
 8005a14:	bf18      	it	ne
 8005a16:	81a3      	strhne	r3, [r4, #12]
 8005a18:	bd10      	pop	{r4, pc}

08005a1a <__sclose>:
 8005a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1e:	f000 b80d 	b.w	8005a3c <_close_r>

08005a22 <memset>:
 8005a22:	4603      	mov	r3, r0
 8005a24:	4402      	add	r2, r0
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d100      	bne.n	8005a2c <memset+0xa>
 8005a2a:	4770      	bx	lr
 8005a2c:	f803 1b01 	strb.w	r1, [r3], #1
 8005a30:	e7f9      	b.n	8005a26 <memset+0x4>
	...

08005a34 <_localeconv_r>:
 8005a34:	4800      	ldr	r0, [pc, #0]	@ (8005a38 <_localeconv_r+0x4>)
 8005a36:	4770      	bx	lr
 8005a38:	20000158 	.word	0x20000158

08005a3c <_close_r>:
 8005a3c:	b538      	push	{r3, r4, r5, lr}
 8005a3e:	2300      	movs	r3, #0
 8005a40:	4d05      	ldr	r5, [pc, #20]	@ (8005a58 <_close_r+0x1c>)
 8005a42:	4604      	mov	r4, r0
 8005a44:	4608      	mov	r0, r1
 8005a46:	602b      	str	r3, [r5, #0]
 8005a48:	f7fc fad7 	bl	8001ffa <_close>
 8005a4c:	1c43      	adds	r3, r0, #1
 8005a4e:	d102      	bne.n	8005a56 <_close_r+0x1a>
 8005a50:	682b      	ldr	r3, [r5, #0]
 8005a52:	b103      	cbz	r3, 8005a56 <_close_r+0x1a>
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	bd38      	pop	{r3, r4, r5, pc}
 8005a58:	20000480 	.word	0x20000480

08005a5c <_lseek_r>:
 8005a5c:	b538      	push	{r3, r4, r5, lr}
 8005a5e:	4604      	mov	r4, r0
 8005a60:	4608      	mov	r0, r1
 8005a62:	4611      	mov	r1, r2
 8005a64:	2200      	movs	r2, #0
 8005a66:	4d05      	ldr	r5, [pc, #20]	@ (8005a7c <_lseek_r+0x20>)
 8005a68:	602a      	str	r2, [r5, #0]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f7fc fae9 	bl	8002042 <_lseek>
 8005a70:	1c43      	adds	r3, r0, #1
 8005a72:	d102      	bne.n	8005a7a <_lseek_r+0x1e>
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	b103      	cbz	r3, 8005a7a <_lseek_r+0x1e>
 8005a78:	6023      	str	r3, [r4, #0]
 8005a7a:	bd38      	pop	{r3, r4, r5, pc}
 8005a7c:	20000480 	.word	0x20000480

08005a80 <_read_r>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	4604      	mov	r4, r0
 8005a84:	4608      	mov	r0, r1
 8005a86:	4611      	mov	r1, r2
 8005a88:	2200      	movs	r2, #0
 8005a8a:	4d05      	ldr	r5, [pc, #20]	@ (8005aa0 <_read_r+0x20>)
 8005a8c:	602a      	str	r2, [r5, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f7fc fa7a 	bl	8001f88 <_read>
 8005a94:	1c43      	adds	r3, r0, #1
 8005a96:	d102      	bne.n	8005a9e <_read_r+0x1e>
 8005a98:	682b      	ldr	r3, [r5, #0]
 8005a9a:	b103      	cbz	r3, 8005a9e <_read_r+0x1e>
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	bd38      	pop	{r3, r4, r5, pc}
 8005aa0:	20000480 	.word	0x20000480

08005aa4 <_write_r>:
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	4608      	mov	r0, r1
 8005aaa:	4611      	mov	r1, r2
 8005aac:	2200      	movs	r2, #0
 8005aae:	4d05      	ldr	r5, [pc, #20]	@ (8005ac4 <_write_r+0x20>)
 8005ab0:	602a      	str	r2, [r5, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f7fc fa85 	bl	8001fc2 <_write>
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	d102      	bne.n	8005ac2 <_write_r+0x1e>
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	b103      	cbz	r3, 8005ac2 <_write_r+0x1e>
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	20000480 	.word	0x20000480

08005ac8 <__errno>:
 8005ac8:	4b01      	ldr	r3, [pc, #4]	@ (8005ad0 <__errno+0x8>)
 8005aca:	6818      	ldr	r0, [r3, #0]
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	20000018 	.word	0x20000018

08005ad4 <__libc_init_array>:
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	2600      	movs	r6, #0
 8005ad8:	4d0c      	ldr	r5, [pc, #48]	@ (8005b0c <__libc_init_array+0x38>)
 8005ada:	4c0d      	ldr	r4, [pc, #52]	@ (8005b10 <__libc_init_array+0x3c>)
 8005adc:	1b64      	subs	r4, r4, r5
 8005ade:	10a4      	asrs	r4, r4, #2
 8005ae0:	42a6      	cmp	r6, r4
 8005ae2:	d109      	bne.n	8005af8 <__libc_init_array+0x24>
 8005ae4:	f003 fd4a 	bl	800957c <_init>
 8005ae8:	2600      	movs	r6, #0
 8005aea:	4d0a      	ldr	r5, [pc, #40]	@ (8005b14 <__libc_init_array+0x40>)
 8005aec:	4c0a      	ldr	r4, [pc, #40]	@ (8005b18 <__libc_init_array+0x44>)
 8005aee:	1b64      	subs	r4, r4, r5
 8005af0:	10a4      	asrs	r4, r4, #2
 8005af2:	42a6      	cmp	r6, r4
 8005af4:	d105      	bne.n	8005b02 <__libc_init_array+0x2e>
 8005af6:	bd70      	pop	{r4, r5, r6, pc}
 8005af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005afc:	4798      	blx	r3
 8005afe:	3601      	adds	r6, #1
 8005b00:	e7ee      	b.n	8005ae0 <__libc_init_array+0xc>
 8005b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b06:	4798      	blx	r3
 8005b08:	3601      	adds	r6, #1
 8005b0a:	e7f2      	b.n	8005af2 <__libc_init_array+0x1e>
 8005b0c:	08009cb8 	.word	0x08009cb8
 8005b10:	08009cb8 	.word	0x08009cb8
 8005b14:	08009cb8 	.word	0x08009cb8
 8005b18:	08009cbc 	.word	0x08009cbc

08005b1c <__retarget_lock_init_recursive>:
 8005b1c:	4770      	bx	lr

08005b1e <__retarget_lock_acquire_recursive>:
 8005b1e:	4770      	bx	lr

08005b20 <__retarget_lock_release_recursive>:
 8005b20:	4770      	bx	lr

08005b22 <memchr>:
 8005b22:	4603      	mov	r3, r0
 8005b24:	b510      	push	{r4, lr}
 8005b26:	b2c9      	uxtb	r1, r1
 8005b28:	4402      	add	r2, r0
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	d101      	bne.n	8005b34 <memchr+0x12>
 8005b30:	2000      	movs	r0, #0
 8005b32:	e003      	b.n	8005b3c <memchr+0x1a>
 8005b34:	7804      	ldrb	r4, [r0, #0]
 8005b36:	3301      	adds	r3, #1
 8005b38:	428c      	cmp	r4, r1
 8005b3a:	d1f6      	bne.n	8005b2a <memchr+0x8>
 8005b3c:	bd10      	pop	{r4, pc}
	...

08005b40 <nanf>:
 8005b40:	4800      	ldr	r0, [pc, #0]	@ (8005b44 <nanf+0x4>)
 8005b42:	4770      	bx	lr
 8005b44:	7fc00000 	.word	0x7fc00000

08005b48 <quorem>:
 8005b48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4c:	6903      	ldr	r3, [r0, #16]
 8005b4e:	690c      	ldr	r4, [r1, #16]
 8005b50:	4607      	mov	r7, r0
 8005b52:	42a3      	cmp	r3, r4
 8005b54:	db7e      	blt.n	8005c54 <quorem+0x10c>
 8005b56:	3c01      	subs	r4, #1
 8005b58:	00a3      	lsls	r3, r4, #2
 8005b5a:	f100 0514 	add.w	r5, r0, #20
 8005b5e:	f101 0814 	add.w	r8, r1, #20
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b68:	9301      	str	r3, [sp, #4]
 8005b6a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b72:	3301      	adds	r3, #1
 8005b74:	429a      	cmp	r2, r3
 8005b76:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b7a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b7e:	d32e      	bcc.n	8005bde <quorem+0x96>
 8005b80:	f04f 0a00 	mov.w	sl, #0
 8005b84:	46c4      	mov	ip, r8
 8005b86:	46ae      	mov	lr, r5
 8005b88:	46d3      	mov	fp, sl
 8005b8a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b8e:	b298      	uxth	r0, r3
 8005b90:	fb06 a000 	mla	r0, r6, r0, sl
 8005b94:	0c1b      	lsrs	r3, r3, #16
 8005b96:	0c02      	lsrs	r2, r0, #16
 8005b98:	fb06 2303 	mla	r3, r6, r3, r2
 8005b9c:	f8de 2000 	ldr.w	r2, [lr]
 8005ba0:	b280      	uxth	r0, r0
 8005ba2:	b292      	uxth	r2, r2
 8005ba4:	1a12      	subs	r2, r2, r0
 8005ba6:	445a      	add	r2, fp
 8005ba8:	f8de 0000 	ldr.w	r0, [lr]
 8005bac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005bb6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005bba:	b292      	uxth	r2, r2
 8005bbc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005bc0:	45e1      	cmp	r9, ip
 8005bc2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005bc6:	f84e 2b04 	str.w	r2, [lr], #4
 8005bca:	d2de      	bcs.n	8005b8a <quorem+0x42>
 8005bcc:	9b00      	ldr	r3, [sp, #0]
 8005bce:	58eb      	ldr	r3, [r5, r3]
 8005bd0:	b92b      	cbnz	r3, 8005bde <quorem+0x96>
 8005bd2:	9b01      	ldr	r3, [sp, #4]
 8005bd4:	3b04      	subs	r3, #4
 8005bd6:	429d      	cmp	r5, r3
 8005bd8:	461a      	mov	r2, r3
 8005bda:	d32f      	bcc.n	8005c3c <quorem+0xf4>
 8005bdc:	613c      	str	r4, [r7, #16]
 8005bde:	4638      	mov	r0, r7
 8005be0:	f001 f9c2 	bl	8006f68 <__mcmp>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	db25      	blt.n	8005c34 <quorem+0xec>
 8005be8:	4629      	mov	r1, r5
 8005bea:	2000      	movs	r0, #0
 8005bec:	f858 2b04 	ldr.w	r2, [r8], #4
 8005bf0:	f8d1 c000 	ldr.w	ip, [r1]
 8005bf4:	fa1f fe82 	uxth.w	lr, r2
 8005bf8:	fa1f f38c 	uxth.w	r3, ip
 8005bfc:	eba3 030e 	sub.w	r3, r3, lr
 8005c00:	4403      	add	r3, r0
 8005c02:	0c12      	lsrs	r2, r2, #16
 8005c04:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005c08:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c12:	45c1      	cmp	r9, r8
 8005c14:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005c18:	f841 3b04 	str.w	r3, [r1], #4
 8005c1c:	d2e6      	bcs.n	8005bec <quorem+0xa4>
 8005c1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c26:	b922      	cbnz	r2, 8005c32 <quorem+0xea>
 8005c28:	3b04      	subs	r3, #4
 8005c2a:	429d      	cmp	r5, r3
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	d30b      	bcc.n	8005c48 <quorem+0x100>
 8005c30:	613c      	str	r4, [r7, #16]
 8005c32:	3601      	adds	r6, #1
 8005c34:	4630      	mov	r0, r6
 8005c36:	b003      	add	sp, #12
 8005c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c3c:	6812      	ldr	r2, [r2, #0]
 8005c3e:	3b04      	subs	r3, #4
 8005c40:	2a00      	cmp	r2, #0
 8005c42:	d1cb      	bne.n	8005bdc <quorem+0x94>
 8005c44:	3c01      	subs	r4, #1
 8005c46:	e7c6      	b.n	8005bd6 <quorem+0x8e>
 8005c48:	6812      	ldr	r2, [r2, #0]
 8005c4a:	3b04      	subs	r3, #4
 8005c4c:	2a00      	cmp	r2, #0
 8005c4e:	d1ef      	bne.n	8005c30 <quorem+0xe8>
 8005c50:	3c01      	subs	r4, #1
 8005c52:	e7ea      	b.n	8005c2a <quorem+0xe2>
 8005c54:	2000      	movs	r0, #0
 8005c56:	e7ee      	b.n	8005c36 <quorem+0xee>

08005c58 <_dtoa_r>:
 8005c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c5c:	4614      	mov	r4, r2
 8005c5e:	461d      	mov	r5, r3
 8005c60:	69c7      	ldr	r7, [r0, #28]
 8005c62:	b097      	sub	sp, #92	@ 0x5c
 8005c64:	4683      	mov	fp, r0
 8005c66:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005c6a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005c6c:	b97f      	cbnz	r7, 8005c8e <_dtoa_r+0x36>
 8005c6e:	2010      	movs	r0, #16
 8005c70:	f000 fe02 	bl	8006878 <malloc>
 8005c74:	4602      	mov	r2, r0
 8005c76:	f8cb 001c 	str.w	r0, [fp, #28]
 8005c7a:	b920      	cbnz	r0, 8005c86 <_dtoa_r+0x2e>
 8005c7c:	21ef      	movs	r1, #239	@ 0xef
 8005c7e:	4ba8      	ldr	r3, [pc, #672]	@ (8005f20 <_dtoa_r+0x2c8>)
 8005c80:	48a8      	ldr	r0, [pc, #672]	@ (8005f24 <_dtoa_r+0x2cc>)
 8005c82:	f002 fc23 	bl	80084cc <__assert_func>
 8005c86:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005c8a:	6007      	str	r7, [r0, #0]
 8005c8c:	60c7      	str	r7, [r0, #12]
 8005c8e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c92:	6819      	ldr	r1, [r3, #0]
 8005c94:	b159      	cbz	r1, 8005cae <_dtoa_r+0x56>
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	2301      	movs	r3, #1
 8005c9a:	4093      	lsls	r3, r2
 8005c9c:	604a      	str	r2, [r1, #4]
 8005c9e:	608b      	str	r3, [r1, #8]
 8005ca0:	4658      	mov	r0, fp
 8005ca2:	f000 fedf 	bl	8006a64 <_Bfree>
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	1e2b      	subs	r3, r5, #0
 8005cb0:	bfaf      	iteee	ge
 8005cb2:	2300      	movge	r3, #0
 8005cb4:	2201      	movlt	r2, #1
 8005cb6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005cba:	9303      	strlt	r3, [sp, #12]
 8005cbc:	bfa8      	it	ge
 8005cbe:	6033      	strge	r3, [r6, #0]
 8005cc0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005cc4:	4b98      	ldr	r3, [pc, #608]	@ (8005f28 <_dtoa_r+0x2d0>)
 8005cc6:	bfb8      	it	lt
 8005cc8:	6032      	strlt	r2, [r6, #0]
 8005cca:	ea33 0308 	bics.w	r3, r3, r8
 8005cce:	d112      	bne.n	8005cf6 <_dtoa_r+0x9e>
 8005cd0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005cd4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005cdc:	4323      	orrs	r3, r4
 8005cde:	f000 8550 	beq.w	8006782 <_dtoa_r+0xb2a>
 8005ce2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005ce4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005f2c <_dtoa_r+0x2d4>
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 8552 	beq.w	8006792 <_dtoa_r+0xb3a>
 8005cee:	f10a 0303 	add.w	r3, sl, #3
 8005cf2:	f000 bd4c 	b.w	800678e <_dtoa_r+0xb36>
 8005cf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cfa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005cfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d02:	2200      	movs	r2, #0
 8005d04:	2300      	movs	r3, #0
 8005d06:	f7fa fe4f 	bl	80009a8 <__aeabi_dcmpeq>
 8005d0a:	4607      	mov	r7, r0
 8005d0c:	b158      	cbz	r0, 8005d26 <_dtoa_r+0xce>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005d12:	6013      	str	r3, [r2, #0]
 8005d14:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005d16:	b113      	cbz	r3, 8005d1e <_dtoa_r+0xc6>
 8005d18:	4b85      	ldr	r3, [pc, #532]	@ (8005f30 <_dtoa_r+0x2d8>)
 8005d1a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005f34 <_dtoa_r+0x2dc>
 8005d22:	f000 bd36 	b.w	8006792 <_dtoa_r+0xb3a>
 8005d26:	ab14      	add	r3, sp, #80	@ 0x50
 8005d28:	9301      	str	r3, [sp, #4]
 8005d2a:	ab15      	add	r3, sp, #84	@ 0x54
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	4658      	mov	r0, fp
 8005d30:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005d34:	f001 fa30 	bl	8007198 <__d2b>
 8005d38:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005d3c:	4681      	mov	r9, r0
 8005d3e:	2e00      	cmp	r6, #0
 8005d40:	d077      	beq.n	8005e32 <_dtoa_r+0x1da>
 8005d42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d48:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005d4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d50:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005d54:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005d58:	9712      	str	r7, [sp, #72]	@ 0x48
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	4b76      	ldr	r3, [pc, #472]	@ (8005f38 <_dtoa_r+0x2e0>)
 8005d60:	f7fa fa02 	bl	8000168 <__aeabi_dsub>
 8005d64:	a368      	add	r3, pc, #416	@ (adr r3, 8005f08 <_dtoa_r+0x2b0>)
 8005d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6a:	f7fa fbb5 	bl	80004d8 <__aeabi_dmul>
 8005d6e:	a368      	add	r3, pc, #416	@ (adr r3, 8005f10 <_dtoa_r+0x2b8>)
 8005d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d74:	f7fa f9fa 	bl	800016c <__adddf3>
 8005d78:	4604      	mov	r4, r0
 8005d7a:	4630      	mov	r0, r6
 8005d7c:	460d      	mov	r5, r1
 8005d7e:	f7fa fb41 	bl	8000404 <__aeabi_i2d>
 8005d82:	a365      	add	r3, pc, #404	@ (adr r3, 8005f18 <_dtoa_r+0x2c0>)
 8005d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d88:	f7fa fba6 	bl	80004d8 <__aeabi_dmul>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	4620      	mov	r0, r4
 8005d92:	4629      	mov	r1, r5
 8005d94:	f7fa f9ea 	bl	800016c <__adddf3>
 8005d98:	4604      	mov	r4, r0
 8005d9a:	460d      	mov	r5, r1
 8005d9c:	f7fa fe4c 	bl	8000a38 <__aeabi_d2iz>
 8005da0:	2200      	movs	r2, #0
 8005da2:	4607      	mov	r7, r0
 8005da4:	2300      	movs	r3, #0
 8005da6:	4620      	mov	r0, r4
 8005da8:	4629      	mov	r1, r5
 8005daa:	f7fa fe07 	bl	80009bc <__aeabi_dcmplt>
 8005dae:	b140      	cbz	r0, 8005dc2 <_dtoa_r+0x16a>
 8005db0:	4638      	mov	r0, r7
 8005db2:	f7fa fb27 	bl	8000404 <__aeabi_i2d>
 8005db6:	4622      	mov	r2, r4
 8005db8:	462b      	mov	r3, r5
 8005dba:	f7fa fdf5 	bl	80009a8 <__aeabi_dcmpeq>
 8005dbe:	b900      	cbnz	r0, 8005dc2 <_dtoa_r+0x16a>
 8005dc0:	3f01      	subs	r7, #1
 8005dc2:	2f16      	cmp	r7, #22
 8005dc4:	d853      	bhi.n	8005e6e <_dtoa_r+0x216>
 8005dc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005dca:	4b5c      	ldr	r3, [pc, #368]	@ (8005f3c <_dtoa_r+0x2e4>)
 8005dcc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd4:	f7fa fdf2 	bl	80009bc <__aeabi_dcmplt>
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	d04a      	beq.n	8005e72 <_dtoa_r+0x21a>
 8005ddc:	2300      	movs	r3, #0
 8005dde:	3f01      	subs	r7, #1
 8005de0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005de2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005de4:	1b9b      	subs	r3, r3, r6
 8005de6:	1e5a      	subs	r2, r3, #1
 8005de8:	bf46      	itte	mi
 8005dea:	f1c3 0801 	rsbmi	r8, r3, #1
 8005dee:	2300      	movmi	r3, #0
 8005df0:	f04f 0800 	movpl.w	r8, #0
 8005df4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005df6:	bf48      	it	mi
 8005df8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005dfa:	2f00      	cmp	r7, #0
 8005dfc:	db3b      	blt.n	8005e76 <_dtoa_r+0x21e>
 8005dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e00:	970e      	str	r7, [sp, #56]	@ 0x38
 8005e02:	443b      	add	r3, r7
 8005e04:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e06:	2300      	movs	r3, #0
 8005e08:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e0a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e0c:	2b09      	cmp	r3, #9
 8005e0e:	d866      	bhi.n	8005ede <_dtoa_r+0x286>
 8005e10:	2b05      	cmp	r3, #5
 8005e12:	bfc4      	itt	gt
 8005e14:	3b04      	subgt	r3, #4
 8005e16:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005e18:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e1a:	bfc8      	it	gt
 8005e1c:	2400      	movgt	r4, #0
 8005e1e:	f1a3 0302 	sub.w	r3, r3, #2
 8005e22:	bfd8      	it	le
 8005e24:	2401      	movle	r4, #1
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d864      	bhi.n	8005ef4 <_dtoa_r+0x29c>
 8005e2a:	e8df f003 	tbb	[pc, r3]
 8005e2e:	382b      	.short	0x382b
 8005e30:	5636      	.short	0x5636
 8005e32:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005e36:	441e      	add	r6, r3
 8005e38:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	bfc1      	itttt	gt
 8005e40:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005e44:	fa08 f803 	lslgt.w	r8, r8, r3
 8005e48:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005e4c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005e50:	bfd6      	itet	le
 8005e52:	f1c3 0320 	rsble	r3, r3, #32
 8005e56:	ea48 0003 	orrgt.w	r0, r8, r3
 8005e5a:	fa04 f003 	lslle.w	r0, r4, r3
 8005e5e:	f7fa fac1 	bl	80003e4 <__aeabi_ui2d>
 8005e62:	2201      	movs	r2, #1
 8005e64:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005e68:	3e01      	subs	r6, #1
 8005e6a:	9212      	str	r2, [sp, #72]	@ 0x48
 8005e6c:	e775      	b.n	8005d5a <_dtoa_r+0x102>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e7b6      	b.n	8005de0 <_dtoa_r+0x188>
 8005e72:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005e74:	e7b5      	b.n	8005de2 <_dtoa_r+0x18a>
 8005e76:	427b      	negs	r3, r7
 8005e78:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	eba8 0807 	sub.w	r8, r8, r7
 8005e80:	930e      	str	r3, [sp, #56]	@ 0x38
 8005e82:	e7c2      	b.n	8005e0a <_dtoa_r+0x1b2>
 8005e84:	2300      	movs	r3, #0
 8005e86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e88:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	dc35      	bgt.n	8005efa <_dtoa_r+0x2a2>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	461a      	mov	r2, r3
 8005e92:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005e96:	9221      	str	r2, [sp, #132]	@ 0x84
 8005e98:	e00b      	b.n	8005eb2 <_dtoa_r+0x25a>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e7f3      	b.n	8005e86 <_dtoa_r+0x22e>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ea2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ea4:	18fb      	adds	r3, r7, r3
 8005ea6:	9308      	str	r3, [sp, #32]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	9307      	str	r3, [sp, #28]
 8005eae:	bfb8      	it	lt
 8005eb0:	2301      	movlt	r3, #1
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	2204      	movs	r2, #4
 8005eb6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005eba:	f102 0514 	add.w	r5, r2, #20
 8005ebe:	429d      	cmp	r5, r3
 8005ec0:	d91f      	bls.n	8005f02 <_dtoa_r+0x2aa>
 8005ec2:	6041      	str	r1, [r0, #4]
 8005ec4:	4658      	mov	r0, fp
 8005ec6:	f000 fd8d 	bl	80069e4 <_Balloc>
 8005eca:	4682      	mov	sl, r0
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	d139      	bne.n	8005f44 <_dtoa_r+0x2ec>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	f240 11af 	movw	r1, #431	@ 0x1af
 8005ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8005f40 <_dtoa_r+0x2e8>)
 8005ed8:	e6d2      	b.n	8005c80 <_dtoa_r+0x28>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e7e0      	b.n	8005ea0 <_dtoa_r+0x248>
 8005ede:	2401      	movs	r4, #1
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005ee4:	9320      	str	r3, [sp, #128]	@ 0x80
 8005ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eea:	2200      	movs	r2, #0
 8005eec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005ef0:	2312      	movs	r3, #18
 8005ef2:	e7d0      	b.n	8005e96 <_dtoa_r+0x23e>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ef8:	e7f5      	b.n	8005ee6 <_dtoa_r+0x28e>
 8005efa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005efc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005f00:	e7d7      	b.n	8005eb2 <_dtoa_r+0x25a>
 8005f02:	3101      	adds	r1, #1
 8005f04:	0052      	lsls	r2, r2, #1
 8005f06:	e7d8      	b.n	8005eba <_dtoa_r+0x262>
 8005f08:	636f4361 	.word	0x636f4361
 8005f0c:	3fd287a7 	.word	0x3fd287a7
 8005f10:	8b60c8b3 	.word	0x8b60c8b3
 8005f14:	3fc68a28 	.word	0x3fc68a28
 8005f18:	509f79fb 	.word	0x509f79fb
 8005f1c:	3fd34413 	.word	0x3fd34413
 8005f20:	080098c8 	.word	0x080098c8
 8005f24:	080098df 	.word	0x080098df
 8005f28:	7ff00000 	.word	0x7ff00000
 8005f2c:	080098c4 	.word	0x080098c4
 8005f30:	08009893 	.word	0x08009893
 8005f34:	08009892 	.word	0x08009892
 8005f38:	3ff80000 	.word	0x3ff80000
 8005f3c:	080099d8 	.word	0x080099d8
 8005f40:	08009937 	.word	0x08009937
 8005f44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f48:	6018      	str	r0, [r3, #0]
 8005f4a:	9b07      	ldr	r3, [sp, #28]
 8005f4c:	2b0e      	cmp	r3, #14
 8005f4e:	f200 80a4 	bhi.w	800609a <_dtoa_r+0x442>
 8005f52:	2c00      	cmp	r4, #0
 8005f54:	f000 80a1 	beq.w	800609a <_dtoa_r+0x442>
 8005f58:	2f00      	cmp	r7, #0
 8005f5a:	dd33      	ble.n	8005fc4 <_dtoa_r+0x36c>
 8005f5c:	4b86      	ldr	r3, [pc, #536]	@ (8006178 <_dtoa_r+0x520>)
 8005f5e:	f007 020f 	and.w	r2, r7, #15
 8005f62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f66:	05f8      	lsls	r0, r7, #23
 8005f68:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f6c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005f70:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005f74:	d516      	bpl.n	8005fa4 <_dtoa_r+0x34c>
 8005f76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f7a:	4b80      	ldr	r3, [pc, #512]	@ (800617c <_dtoa_r+0x524>)
 8005f7c:	2603      	movs	r6, #3
 8005f7e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f82:	f7fa fbd3 	bl	800072c <__aeabi_ddiv>
 8005f86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f8a:	f004 040f 	and.w	r4, r4, #15
 8005f8e:	4d7b      	ldr	r5, [pc, #492]	@ (800617c <_dtoa_r+0x524>)
 8005f90:	b954      	cbnz	r4, 8005fa8 <_dtoa_r+0x350>
 8005f92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f9a:	f7fa fbc7 	bl	800072c <__aeabi_ddiv>
 8005f9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fa2:	e028      	b.n	8005ff6 <_dtoa_r+0x39e>
 8005fa4:	2602      	movs	r6, #2
 8005fa6:	e7f2      	b.n	8005f8e <_dtoa_r+0x336>
 8005fa8:	07e1      	lsls	r1, r4, #31
 8005faa:	d508      	bpl.n	8005fbe <_dtoa_r+0x366>
 8005fac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005fb4:	f7fa fa90 	bl	80004d8 <__aeabi_dmul>
 8005fb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fbc:	3601      	adds	r6, #1
 8005fbe:	1064      	asrs	r4, r4, #1
 8005fc0:	3508      	adds	r5, #8
 8005fc2:	e7e5      	b.n	8005f90 <_dtoa_r+0x338>
 8005fc4:	f000 80d2 	beq.w	800616c <_dtoa_r+0x514>
 8005fc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fcc:	427c      	negs	r4, r7
 8005fce:	4b6a      	ldr	r3, [pc, #424]	@ (8006178 <_dtoa_r+0x520>)
 8005fd0:	f004 020f 	and.w	r2, r4, #15
 8005fd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fdc:	f7fa fa7c 	bl	80004d8 <__aeabi_dmul>
 8005fe0:	2602      	movs	r6, #2
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fe8:	4d64      	ldr	r5, [pc, #400]	@ (800617c <_dtoa_r+0x524>)
 8005fea:	1124      	asrs	r4, r4, #4
 8005fec:	2c00      	cmp	r4, #0
 8005fee:	f040 80b2 	bne.w	8006156 <_dtoa_r+0x4fe>
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1d3      	bne.n	8005f9e <_dtoa_r+0x346>
 8005ff6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005ffa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 80b7 	beq.w	8006170 <_dtoa_r+0x518>
 8006002:	2200      	movs	r2, #0
 8006004:	4620      	mov	r0, r4
 8006006:	4629      	mov	r1, r5
 8006008:	4b5d      	ldr	r3, [pc, #372]	@ (8006180 <_dtoa_r+0x528>)
 800600a:	f7fa fcd7 	bl	80009bc <__aeabi_dcmplt>
 800600e:	2800      	cmp	r0, #0
 8006010:	f000 80ae 	beq.w	8006170 <_dtoa_r+0x518>
 8006014:	9b07      	ldr	r3, [sp, #28]
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 80aa 	beq.w	8006170 <_dtoa_r+0x518>
 800601c:	9b08      	ldr	r3, [sp, #32]
 800601e:	2b00      	cmp	r3, #0
 8006020:	dd37      	ble.n	8006092 <_dtoa_r+0x43a>
 8006022:	1e7b      	subs	r3, r7, #1
 8006024:	4620      	mov	r0, r4
 8006026:	9304      	str	r3, [sp, #16]
 8006028:	2200      	movs	r2, #0
 800602a:	4629      	mov	r1, r5
 800602c:	4b55      	ldr	r3, [pc, #340]	@ (8006184 <_dtoa_r+0x52c>)
 800602e:	f7fa fa53 	bl	80004d8 <__aeabi_dmul>
 8006032:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006036:	9c08      	ldr	r4, [sp, #32]
 8006038:	3601      	adds	r6, #1
 800603a:	4630      	mov	r0, r6
 800603c:	f7fa f9e2 	bl	8000404 <__aeabi_i2d>
 8006040:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006044:	f7fa fa48 	bl	80004d8 <__aeabi_dmul>
 8006048:	2200      	movs	r2, #0
 800604a:	4b4f      	ldr	r3, [pc, #316]	@ (8006188 <_dtoa_r+0x530>)
 800604c:	f7fa f88e 	bl	800016c <__adddf3>
 8006050:	4605      	mov	r5, r0
 8006052:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006056:	2c00      	cmp	r4, #0
 8006058:	f040 809a 	bne.w	8006190 <_dtoa_r+0x538>
 800605c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006060:	2200      	movs	r2, #0
 8006062:	4b4a      	ldr	r3, [pc, #296]	@ (800618c <_dtoa_r+0x534>)
 8006064:	f7fa f880 	bl	8000168 <__aeabi_dsub>
 8006068:	4602      	mov	r2, r0
 800606a:	460b      	mov	r3, r1
 800606c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006070:	462a      	mov	r2, r5
 8006072:	4633      	mov	r3, r6
 8006074:	f7fa fcc0 	bl	80009f8 <__aeabi_dcmpgt>
 8006078:	2800      	cmp	r0, #0
 800607a:	f040 828e 	bne.w	800659a <_dtoa_r+0x942>
 800607e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006082:	462a      	mov	r2, r5
 8006084:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006088:	f7fa fc98 	bl	80009bc <__aeabi_dcmplt>
 800608c:	2800      	cmp	r0, #0
 800608e:	f040 8127 	bne.w	80062e0 <_dtoa_r+0x688>
 8006092:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006096:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800609a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800609c:	2b00      	cmp	r3, #0
 800609e:	f2c0 8163 	blt.w	8006368 <_dtoa_r+0x710>
 80060a2:	2f0e      	cmp	r7, #14
 80060a4:	f300 8160 	bgt.w	8006368 <_dtoa_r+0x710>
 80060a8:	4b33      	ldr	r3, [pc, #204]	@ (8006178 <_dtoa_r+0x520>)
 80060aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80060ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80060b2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80060b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	da03      	bge.n	80060c4 <_dtoa_r+0x46c>
 80060bc:	9b07      	ldr	r3, [sp, #28]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f340 8100 	ble.w	80062c4 <_dtoa_r+0x66c>
 80060c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80060c8:	4656      	mov	r6, sl
 80060ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060ce:	4620      	mov	r0, r4
 80060d0:	4629      	mov	r1, r5
 80060d2:	f7fa fb2b 	bl	800072c <__aeabi_ddiv>
 80060d6:	f7fa fcaf 	bl	8000a38 <__aeabi_d2iz>
 80060da:	4680      	mov	r8, r0
 80060dc:	f7fa f992 	bl	8000404 <__aeabi_i2d>
 80060e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060e4:	f7fa f9f8 	bl	80004d8 <__aeabi_dmul>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4620      	mov	r0, r4
 80060ee:	4629      	mov	r1, r5
 80060f0:	f7fa f83a 	bl	8000168 <__aeabi_dsub>
 80060f4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80060f8:	9d07      	ldr	r5, [sp, #28]
 80060fa:	f806 4b01 	strb.w	r4, [r6], #1
 80060fe:	eba6 040a 	sub.w	r4, r6, sl
 8006102:	42a5      	cmp	r5, r4
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	f040 8116 	bne.w	8006338 <_dtoa_r+0x6e0>
 800610c:	f7fa f82e 	bl	800016c <__adddf3>
 8006110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006114:	4604      	mov	r4, r0
 8006116:	460d      	mov	r5, r1
 8006118:	f7fa fc6e 	bl	80009f8 <__aeabi_dcmpgt>
 800611c:	2800      	cmp	r0, #0
 800611e:	f040 80f8 	bne.w	8006312 <_dtoa_r+0x6ba>
 8006122:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006126:	4620      	mov	r0, r4
 8006128:	4629      	mov	r1, r5
 800612a:	f7fa fc3d 	bl	80009a8 <__aeabi_dcmpeq>
 800612e:	b118      	cbz	r0, 8006138 <_dtoa_r+0x4e0>
 8006130:	f018 0f01 	tst.w	r8, #1
 8006134:	f040 80ed 	bne.w	8006312 <_dtoa_r+0x6ba>
 8006138:	4649      	mov	r1, r9
 800613a:	4658      	mov	r0, fp
 800613c:	f000 fc92 	bl	8006a64 <_Bfree>
 8006140:	2300      	movs	r3, #0
 8006142:	7033      	strb	r3, [r6, #0]
 8006144:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006146:	3701      	adds	r7, #1
 8006148:	601f      	str	r7, [r3, #0]
 800614a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 8320 	beq.w	8006792 <_dtoa_r+0xb3a>
 8006152:	601e      	str	r6, [r3, #0]
 8006154:	e31d      	b.n	8006792 <_dtoa_r+0xb3a>
 8006156:	07e2      	lsls	r2, r4, #31
 8006158:	d505      	bpl.n	8006166 <_dtoa_r+0x50e>
 800615a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800615e:	f7fa f9bb 	bl	80004d8 <__aeabi_dmul>
 8006162:	2301      	movs	r3, #1
 8006164:	3601      	adds	r6, #1
 8006166:	1064      	asrs	r4, r4, #1
 8006168:	3508      	adds	r5, #8
 800616a:	e73f      	b.n	8005fec <_dtoa_r+0x394>
 800616c:	2602      	movs	r6, #2
 800616e:	e742      	b.n	8005ff6 <_dtoa_r+0x39e>
 8006170:	9c07      	ldr	r4, [sp, #28]
 8006172:	9704      	str	r7, [sp, #16]
 8006174:	e761      	b.n	800603a <_dtoa_r+0x3e2>
 8006176:	bf00      	nop
 8006178:	080099d8 	.word	0x080099d8
 800617c:	080099b0 	.word	0x080099b0
 8006180:	3ff00000 	.word	0x3ff00000
 8006184:	40240000 	.word	0x40240000
 8006188:	401c0000 	.word	0x401c0000
 800618c:	40140000 	.word	0x40140000
 8006190:	4b70      	ldr	r3, [pc, #448]	@ (8006354 <_dtoa_r+0x6fc>)
 8006192:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006194:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006198:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800619c:	4454      	add	r4, sl
 800619e:	2900      	cmp	r1, #0
 80061a0:	d045      	beq.n	800622e <_dtoa_r+0x5d6>
 80061a2:	2000      	movs	r0, #0
 80061a4:	496c      	ldr	r1, [pc, #432]	@ (8006358 <_dtoa_r+0x700>)
 80061a6:	f7fa fac1 	bl	800072c <__aeabi_ddiv>
 80061aa:	4633      	mov	r3, r6
 80061ac:	462a      	mov	r2, r5
 80061ae:	f7f9 ffdb 	bl	8000168 <__aeabi_dsub>
 80061b2:	4656      	mov	r6, sl
 80061b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061bc:	f7fa fc3c 	bl	8000a38 <__aeabi_d2iz>
 80061c0:	4605      	mov	r5, r0
 80061c2:	f7fa f91f 	bl	8000404 <__aeabi_i2d>
 80061c6:	4602      	mov	r2, r0
 80061c8:	460b      	mov	r3, r1
 80061ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061ce:	f7f9 ffcb 	bl	8000168 <__aeabi_dsub>
 80061d2:	4602      	mov	r2, r0
 80061d4:	460b      	mov	r3, r1
 80061d6:	3530      	adds	r5, #48	@ 0x30
 80061d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061e0:	f806 5b01 	strb.w	r5, [r6], #1
 80061e4:	f7fa fbea 	bl	80009bc <__aeabi_dcmplt>
 80061e8:	2800      	cmp	r0, #0
 80061ea:	d163      	bne.n	80062b4 <_dtoa_r+0x65c>
 80061ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061f0:	2000      	movs	r0, #0
 80061f2:	495a      	ldr	r1, [pc, #360]	@ (800635c <_dtoa_r+0x704>)
 80061f4:	f7f9 ffb8 	bl	8000168 <__aeabi_dsub>
 80061f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061fc:	f7fa fbde 	bl	80009bc <__aeabi_dcmplt>
 8006200:	2800      	cmp	r0, #0
 8006202:	f040 8087 	bne.w	8006314 <_dtoa_r+0x6bc>
 8006206:	42a6      	cmp	r6, r4
 8006208:	f43f af43 	beq.w	8006092 <_dtoa_r+0x43a>
 800620c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006210:	2200      	movs	r2, #0
 8006212:	4b53      	ldr	r3, [pc, #332]	@ (8006360 <_dtoa_r+0x708>)
 8006214:	f7fa f960 	bl	80004d8 <__aeabi_dmul>
 8006218:	2200      	movs	r2, #0
 800621a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800621e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006222:	4b4f      	ldr	r3, [pc, #316]	@ (8006360 <_dtoa_r+0x708>)
 8006224:	f7fa f958 	bl	80004d8 <__aeabi_dmul>
 8006228:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800622c:	e7c4      	b.n	80061b8 <_dtoa_r+0x560>
 800622e:	4631      	mov	r1, r6
 8006230:	4628      	mov	r0, r5
 8006232:	f7fa f951 	bl	80004d8 <__aeabi_dmul>
 8006236:	4656      	mov	r6, sl
 8006238:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800623c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800623e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006242:	f7fa fbf9 	bl	8000a38 <__aeabi_d2iz>
 8006246:	4605      	mov	r5, r0
 8006248:	f7fa f8dc 	bl	8000404 <__aeabi_i2d>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006254:	f7f9 ff88 	bl	8000168 <__aeabi_dsub>
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	3530      	adds	r5, #48	@ 0x30
 800625e:	f806 5b01 	strb.w	r5, [r6], #1
 8006262:	42a6      	cmp	r6, r4
 8006264:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006268:	f04f 0200 	mov.w	r2, #0
 800626c:	d124      	bne.n	80062b8 <_dtoa_r+0x660>
 800626e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006272:	4b39      	ldr	r3, [pc, #228]	@ (8006358 <_dtoa_r+0x700>)
 8006274:	f7f9 ff7a 	bl	800016c <__adddf3>
 8006278:	4602      	mov	r2, r0
 800627a:	460b      	mov	r3, r1
 800627c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006280:	f7fa fbba 	bl	80009f8 <__aeabi_dcmpgt>
 8006284:	2800      	cmp	r0, #0
 8006286:	d145      	bne.n	8006314 <_dtoa_r+0x6bc>
 8006288:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800628c:	2000      	movs	r0, #0
 800628e:	4932      	ldr	r1, [pc, #200]	@ (8006358 <_dtoa_r+0x700>)
 8006290:	f7f9 ff6a 	bl	8000168 <__aeabi_dsub>
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800629c:	f7fa fb8e 	bl	80009bc <__aeabi_dcmplt>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	f43f aef6 	beq.w	8006092 <_dtoa_r+0x43a>
 80062a6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80062a8:	1e73      	subs	r3, r6, #1
 80062aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80062ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80062b0:	2b30      	cmp	r3, #48	@ 0x30
 80062b2:	d0f8      	beq.n	80062a6 <_dtoa_r+0x64e>
 80062b4:	9f04      	ldr	r7, [sp, #16]
 80062b6:	e73f      	b.n	8006138 <_dtoa_r+0x4e0>
 80062b8:	4b29      	ldr	r3, [pc, #164]	@ (8006360 <_dtoa_r+0x708>)
 80062ba:	f7fa f90d 	bl	80004d8 <__aeabi_dmul>
 80062be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062c2:	e7bc      	b.n	800623e <_dtoa_r+0x5e6>
 80062c4:	d10c      	bne.n	80062e0 <_dtoa_r+0x688>
 80062c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062ca:	2200      	movs	r2, #0
 80062cc:	4b25      	ldr	r3, [pc, #148]	@ (8006364 <_dtoa_r+0x70c>)
 80062ce:	f7fa f903 	bl	80004d8 <__aeabi_dmul>
 80062d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062d6:	f7fa fb85 	bl	80009e4 <__aeabi_dcmpge>
 80062da:	2800      	cmp	r0, #0
 80062dc:	f000 815b 	beq.w	8006596 <_dtoa_r+0x93e>
 80062e0:	2400      	movs	r4, #0
 80062e2:	4625      	mov	r5, r4
 80062e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80062e6:	4656      	mov	r6, sl
 80062e8:	43db      	mvns	r3, r3
 80062ea:	9304      	str	r3, [sp, #16]
 80062ec:	2700      	movs	r7, #0
 80062ee:	4621      	mov	r1, r4
 80062f0:	4658      	mov	r0, fp
 80062f2:	f000 fbb7 	bl	8006a64 <_Bfree>
 80062f6:	2d00      	cmp	r5, #0
 80062f8:	d0dc      	beq.n	80062b4 <_dtoa_r+0x65c>
 80062fa:	b12f      	cbz	r7, 8006308 <_dtoa_r+0x6b0>
 80062fc:	42af      	cmp	r7, r5
 80062fe:	d003      	beq.n	8006308 <_dtoa_r+0x6b0>
 8006300:	4639      	mov	r1, r7
 8006302:	4658      	mov	r0, fp
 8006304:	f000 fbae 	bl	8006a64 <_Bfree>
 8006308:	4629      	mov	r1, r5
 800630a:	4658      	mov	r0, fp
 800630c:	f000 fbaa 	bl	8006a64 <_Bfree>
 8006310:	e7d0      	b.n	80062b4 <_dtoa_r+0x65c>
 8006312:	9704      	str	r7, [sp, #16]
 8006314:	4633      	mov	r3, r6
 8006316:	461e      	mov	r6, r3
 8006318:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800631c:	2a39      	cmp	r2, #57	@ 0x39
 800631e:	d107      	bne.n	8006330 <_dtoa_r+0x6d8>
 8006320:	459a      	cmp	sl, r3
 8006322:	d1f8      	bne.n	8006316 <_dtoa_r+0x6be>
 8006324:	9a04      	ldr	r2, [sp, #16]
 8006326:	3201      	adds	r2, #1
 8006328:	9204      	str	r2, [sp, #16]
 800632a:	2230      	movs	r2, #48	@ 0x30
 800632c:	f88a 2000 	strb.w	r2, [sl]
 8006330:	781a      	ldrb	r2, [r3, #0]
 8006332:	3201      	adds	r2, #1
 8006334:	701a      	strb	r2, [r3, #0]
 8006336:	e7bd      	b.n	80062b4 <_dtoa_r+0x65c>
 8006338:	2200      	movs	r2, #0
 800633a:	4b09      	ldr	r3, [pc, #36]	@ (8006360 <_dtoa_r+0x708>)
 800633c:	f7fa f8cc 	bl	80004d8 <__aeabi_dmul>
 8006340:	2200      	movs	r2, #0
 8006342:	2300      	movs	r3, #0
 8006344:	4604      	mov	r4, r0
 8006346:	460d      	mov	r5, r1
 8006348:	f7fa fb2e 	bl	80009a8 <__aeabi_dcmpeq>
 800634c:	2800      	cmp	r0, #0
 800634e:	f43f aebc 	beq.w	80060ca <_dtoa_r+0x472>
 8006352:	e6f1      	b.n	8006138 <_dtoa_r+0x4e0>
 8006354:	080099d8 	.word	0x080099d8
 8006358:	3fe00000 	.word	0x3fe00000
 800635c:	3ff00000 	.word	0x3ff00000
 8006360:	40240000 	.word	0x40240000
 8006364:	40140000 	.word	0x40140000
 8006368:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800636a:	2a00      	cmp	r2, #0
 800636c:	f000 80db 	beq.w	8006526 <_dtoa_r+0x8ce>
 8006370:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006372:	2a01      	cmp	r2, #1
 8006374:	f300 80bf 	bgt.w	80064f6 <_dtoa_r+0x89e>
 8006378:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800637a:	2a00      	cmp	r2, #0
 800637c:	f000 80b7 	beq.w	80064ee <_dtoa_r+0x896>
 8006380:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006384:	4646      	mov	r6, r8
 8006386:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006388:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800638a:	2101      	movs	r1, #1
 800638c:	441a      	add	r2, r3
 800638e:	4658      	mov	r0, fp
 8006390:	4498      	add	r8, r3
 8006392:	9209      	str	r2, [sp, #36]	@ 0x24
 8006394:	f000 fc64 	bl	8006c60 <__i2b>
 8006398:	4605      	mov	r5, r0
 800639a:	b15e      	cbz	r6, 80063b4 <_dtoa_r+0x75c>
 800639c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800639e:	2b00      	cmp	r3, #0
 80063a0:	dd08      	ble.n	80063b4 <_dtoa_r+0x75c>
 80063a2:	42b3      	cmp	r3, r6
 80063a4:	bfa8      	it	ge
 80063a6:	4633      	movge	r3, r6
 80063a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063aa:	eba8 0803 	sub.w	r8, r8, r3
 80063ae:	1af6      	subs	r6, r6, r3
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80063b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063b6:	b1f3      	cbz	r3, 80063f6 <_dtoa_r+0x79e>
 80063b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 80b7 	beq.w	800652e <_dtoa_r+0x8d6>
 80063c0:	b18c      	cbz	r4, 80063e6 <_dtoa_r+0x78e>
 80063c2:	4629      	mov	r1, r5
 80063c4:	4622      	mov	r2, r4
 80063c6:	4658      	mov	r0, fp
 80063c8:	f000 fd08 	bl	8006ddc <__pow5mult>
 80063cc:	464a      	mov	r2, r9
 80063ce:	4601      	mov	r1, r0
 80063d0:	4605      	mov	r5, r0
 80063d2:	4658      	mov	r0, fp
 80063d4:	f000 fc5a 	bl	8006c8c <__multiply>
 80063d8:	4649      	mov	r1, r9
 80063da:	9004      	str	r0, [sp, #16]
 80063dc:	4658      	mov	r0, fp
 80063de:	f000 fb41 	bl	8006a64 <_Bfree>
 80063e2:	9b04      	ldr	r3, [sp, #16]
 80063e4:	4699      	mov	r9, r3
 80063e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063e8:	1b1a      	subs	r2, r3, r4
 80063ea:	d004      	beq.n	80063f6 <_dtoa_r+0x79e>
 80063ec:	4649      	mov	r1, r9
 80063ee:	4658      	mov	r0, fp
 80063f0:	f000 fcf4 	bl	8006ddc <__pow5mult>
 80063f4:	4681      	mov	r9, r0
 80063f6:	2101      	movs	r1, #1
 80063f8:	4658      	mov	r0, fp
 80063fa:	f000 fc31 	bl	8006c60 <__i2b>
 80063fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006400:	4604      	mov	r4, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 81c9 	beq.w	800679a <_dtoa_r+0xb42>
 8006408:	461a      	mov	r2, r3
 800640a:	4601      	mov	r1, r0
 800640c:	4658      	mov	r0, fp
 800640e:	f000 fce5 	bl	8006ddc <__pow5mult>
 8006412:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006414:	4604      	mov	r4, r0
 8006416:	2b01      	cmp	r3, #1
 8006418:	f300 808f 	bgt.w	800653a <_dtoa_r+0x8e2>
 800641c:	9b02      	ldr	r3, [sp, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	f040 8087 	bne.w	8006532 <_dtoa_r+0x8da>
 8006424:	9b03      	ldr	r3, [sp, #12]
 8006426:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800642a:	2b00      	cmp	r3, #0
 800642c:	f040 8083 	bne.w	8006536 <_dtoa_r+0x8de>
 8006430:	9b03      	ldr	r3, [sp, #12]
 8006432:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006436:	0d1b      	lsrs	r3, r3, #20
 8006438:	051b      	lsls	r3, r3, #20
 800643a:	b12b      	cbz	r3, 8006448 <_dtoa_r+0x7f0>
 800643c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800643e:	f108 0801 	add.w	r8, r8, #1
 8006442:	3301      	adds	r3, #1
 8006444:	9309      	str	r3, [sp, #36]	@ 0x24
 8006446:	2301      	movs	r3, #1
 8006448:	930a      	str	r3, [sp, #40]	@ 0x28
 800644a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 81aa 	beq.w	80067a6 <_dtoa_r+0xb4e>
 8006452:	6923      	ldr	r3, [r4, #16]
 8006454:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006458:	6918      	ldr	r0, [r3, #16]
 800645a:	f000 fbb5 	bl	8006bc8 <__hi0bits>
 800645e:	f1c0 0020 	rsb	r0, r0, #32
 8006462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006464:	4418      	add	r0, r3
 8006466:	f010 001f 	ands.w	r0, r0, #31
 800646a:	d071      	beq.n	8006550 <_dtoa_r+0x8f8>
 800646c:	f1c0 0320 	rsb	r3, r0, #32
 8006470:	2b04      	cmp	r3, #4
 8006472:	dd65      	ble.n	8006540 <_dtoa_r+0x8e8>
 8006474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006476:	f1c0 001c 	rsb	r0, r0, #28
 800647a:	4403      	add	r3, r0
 800647c:	4480      	add	r8, r0
 800647e:	4406      	add	r6, r0
 8006480:	9309      	str	r3, [sp, #36]	@ 0x24
 8006482:	f1b8 0f00 	cmp.w	r8, #0
 8006486:	dd05      	ble.n	8006494 <_dtoa_r+0x83c>
 8006488:	4649      	mov	r1, r9
 800648a:	4642      	mov	r2, r8
 800648c:	4658      	mov	r0, fp
 800648e:	f000 fcff 	bl	8006e90 <__lshift>
 8006492:	4681      	mov	r9, r0
 8006494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006496:	2b00      	cmp	r3, #0
 8006498:	dd05      	ble.n	80064a6 <_dtoa_r+0x84e>
 800649a:	4621      	mov	r1, r4
 800649c:	461a      	mov	r2, r3
 800649e:	4658      	mov	r0, fp
 80064a0:	f000 fcf6 	bl	8006e90 <__lshift>
 80064a4:	4604      	mov	r4, r0
 80064a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d053      	beq.n	8006554 <_dtoa_r+0x8fc>
 80064ac:	4621      	mov	r1, r4
 80064ae:	4648      	mov	r0, r9
 80064b0:	f000 fd5a 	bl	8006f68 <__mcmp>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	da4d      	bge.n	8006554 <_dtoa_r+0x8fc>
 80064b8:	1e7b      	subs	r3, r7, #1
 80064ba:	4649      	mov	r1, r9
 80064bc:	9304      	str	r3, [sp, #16]
 80064be:	220a      	movs	r2, #10
 80064c0:	2300      	movs	r3, #0
 80064c2:	4658      	mov	r0, fp
 80064c4:	f000 faf0 	bl	8006aa8 <__multadd>
 80064c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064ca:	4681      	mov	r9, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 816c 	beq.w	80067aa <_dtoa_r+0xb52>
 80064d2:	2300      	movs	r3, #0
 80064d4:	4629      	mov	r1, r5
 80064d6:	220a      	movs	r2, #10
 80064d8:	4658      	mov	r0, fp
 80064da:	f000 fae5 	bl	8006aa8 <__multadd>
 80064de:	9b08      	ldr	r3, [sp, #32]
 80064e0:	4605      	mov	r5, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	dc61      	bgt.n	80065aa <_dtoa_r+0x952>
 80064e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	dc3b      	bgt.n	8006564 <_dtoa_r+0x90c>
 80064ec:	e05d      	b.n	80065aa <_dtoa_r+0x952>
 80064ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80064f0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80064f4:	e746      	b.n	8006384 <_dtoa_r+0x72c>
 80064f6:	9b07      	ldr	r3, [sp, #28]
 80064f8:	1e5c      	subs	r4, r3, #1
 80064fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064fc:	42a3      	cmp	r3, r4
 80064fe:	bfbf      	itttt	lt
 8006500:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006502:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006504:	1ae3      	sublt	r3, r4, r3
 8006506:	18d2      	addlt	r2, r2, r3
 8006508:	bfa8      	it	ge
 800650a:	1b1c      	subge	r4, r3, r4
 800650c:	9b07      	ldr	r3, [sp, #28]
 800650e:	bfbe      	ittt	lt
 8006510:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006512:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006514:	2400      	movlt	r4, #0
 8006516:	2b00      	cmp	r3, #0
 8006518:	bfb5      	itete	lt
 800651a:	eba8 0603 	sublt.w	r6, r8, r3
 800651e:	4646      	movge	r6, r8
 8006520:	2300      	movlt	r3, #0
 8006522:	9b07      	ldrge	r3, [sp, #28]
 8006524:	e730      	b.n	8006388 <_dtoa_r+0x730>
 8006526:	4646      	mov	r6, r8
 8006528:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800652a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800652c:	e735      	b.n	800639a <_dtoa_r+0x742>
 800652e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006530:	e75c      	b.n	80063ec <_dtoa_r+0x794>
 8006532:	2300      	movs	r3, #0
 8006534:	e788      	b.n	8006448 <_dtoa_r+0x7f0>
 8006536:	9b02      	ldr	r3, [sp, #8]
 8006538:	e786      	b.n	8006448 <_dtoa_r+0x7f0>
 800653a:	2300      	movs	r3, #0
 800653c:	930a      	str	r3, [sp, #40]	@ 0x28
 800653e:	e788      	b.n	8006452 <_dtoa_r+0x7fa>
 8006540:	d09f      	beq.n	8006482 <_dtoa_r+0x82a>
 8006542:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006544:	331c      	adds	r3, #28
 8006546:	441a      	add	r2, r3
 8006548:	4498      	add	r8, r3
 800654a:	441e      	add	r6, r3
 800654c:	9209      	str	r2, [sp, #36]	@ 0x24
 800654e:	e798      	b.n	8006482 <_dtoa_r+0x82a>
 8006550:	4603      	mov	r3, r0
 8006552:	e7f6      	b.n	8006542 <_dtoa_r+0x8ea>
 8006554:	9b07      	ldr	r3, [sp, #28]
 8006556:	9704      	str	r7, [sp, #16]
 8006558:	2b00      	cmp	r3, #0
 800655a:	dc20      	bgt.n	800659e <_dtoa_r+0x946>
 800655c:	9308      	str	r3, [sp, #32]
 800655e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006560:	2b02      	cmp	r3, #2
 8006562:	dd1e      	ble.n	80065a2 <_dtoa_r+0x94a>
 8006564:	9b08      	ldr	r3, [sp, #32]
 8006566:	2b00      	cmp	r3, #0
 8006568:	f47f aebc 	bne.w	80062e4 <_dtoa_r+0x68c>
 800656c:	4621      	mov	r1, r4
 800656e:	2205      	movs	r2, #5
 8006570:	4658      	mov	r0, fp
 8006572:	f000 fa99 	bl	8006aa8 <__multadd>
 8006576:	4601      	mov	r1, r0
 8006578:	4604      	mov	r4, r0
 800657a:	4648      	mov	r0, r9
 800657c:	f000 fcf4 	bl	8006f68 <__mcmp>
 8006580:	2800      	cmp	r0, #0
 8006582:	f77f aeaf 	ble.w	80062e4 <_dtoa_r+0x68c>
 8006586:	2331      	movs	r3, #49	@ 0x31
 8006588:	4656      	mov	r6, sl
 800658a:	f806 3b01 	strb.w	r3, [r6], #1
 800658e:	9b04      	ldr	r3, [sp, #16]
 8006590:	3301      	adds	r3, #1
 8006592:	9304      	str	r3, [sp, #16]
 8006594:	e6aa      	b.n	80062ec <_dtoa_r+0x694>
 8006596:	9c07      	ldr	r4, [sp, #28]
 8006598:	9704      	str	r7, [sp, #16]
 800659a:	4625      	mov	r5, r4
 800659c:	e7f3      	b.n	8006586 <_dtoa_r+0x92e>
 800659e:	9b07      	ldr	r3, [sp, #28]
 80065a0:	9308      	str	r3, [sp, #32]
 80065a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 8104 	beq.w	80067b2 <_dtoa_r+0xb5a>
 80065aa:	2e00      	cmp	r6, #0
 80065ac:	dd05      	ble.n	80065ba <_dtoa_r+0x962>
 80065ae:	4629      	mov	r1, r5
 80065b0:	4632      	mov	r2, r6
 80065b2:	4658      	mov	r0, fp
 80065b4:	f000 fc6c 	bl	8006e90 <__lshift>
 80065b8:	4605      	mov	r5, r0
 80065ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d05a      	beq.n	8006676 <_dtoa_r+0xa1e>
 80065c0:	4658      	mov	r0, fp
 80065c2:	6869      	ldr	r1, [r5, #4]
 80065c4:	f000 fa0e 	bl	80069e4 <_Balloc>
 80065c8:	4606      	mov	r6, r0
 80065ca:	b928      	cbnz	r0, 80065d8 <_dtoa_r+0x980>
 80065cc:	4602      	mov	r2, r0
 80065ce:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80065d2:	4b83      	ldr	r3, [pc, #524]	@ (80067e0 <_dtoa_r+0xb88>)
 80065d4:	f7ff bb54 	b.w	8005c80 <_dtoa_r+0x28>
 80065d8:	692a      	ldr	r2, [r5, #16]
 80065da:	f105 010c 	add.w	r1, r5, #12
 80065de:	3202      	adds	r2, #2
 80065e0:	0092      	lsls	r2, r2, #2
 80065e2:	300c      	adds	r0, #12
 80065e4:	f001 ff5e 	bl	80084a4 <memcpy>
 80065e8:	2201      	movs	r2, #1
 80065ea:	4631      	mov	r1, r6
 80065ec:	4658      	mov	r0, fp
 80065ee:	f000 fc4f 	bl	8006e90 <__lshift>
 80065f2:	462f      	mov	r7, r5
 80065f4:	4605      	mov	r5, r0
 80065f6:	f10a 0301 	add.w	r3, sl, #1
 80065fa:	9307      	str	r3, [sp, #28]
 80065fc:	9b08      	ldr	r3, [sp, #32]
 80065fe:	4453      	add	r3, sl
 8006600:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006602:	9b02      	ldr	r3, [sp, #8]
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	930a      	str	r3, [sp, #40]	@ 0x28
 800660a:	9b07      	ldr	r3, [sp, #28]
 800660c:	4621      	mov	r1, r4
 800660e:	3b01      	subs	r3, #1
 8006610:	4648      	mov	r0, r9
 8006612:	9302      	str	r3, [sp, #8]
 8006614:	f7ff fa98 	bl	8005b48 <quorem>
 8006618:	4639      	mov	r1, r7
 800661a:	9008      	str	r0, [sp, #32]
 800661c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006620:	4648      	mov	r0, r9
 8006622:	f000 fca1 	bl	8006f68 <__mcmp>
 8006626:	462a      	mov	r2, r5
 8006628:	9009      	str	r0, [sp, #36]	@ 0x24
 800662a:	4621      	mov	r1, r4
 800662c:	4658      	mov	r0, fp
 800662e:	f000 fcb7 	bl	8006fa0 <__mdiff>
 8006632:	68c2      	ldr	r2, [r0, #12]
 8006634:	4606      	mov	r6, r0
 8006636:	bb02      	cbnz	r2, 800667a <_dtoa_r+0xa22>
 8006638:	4601      	mov	r1, r0
 800663a:	4648      	mov	r0, r9
 800663c:	f000 fc94 	bl	8006f68 <__mcmp>
 8006640:	4602      	mov	r2, r0
 8006642:	4631      	mov	r1, r6
 8006644:	4658      	mov	r0, fp
 8006646:	920c      	str	r2, [sp, #48]	@ 0x30
 8006648:	f000 fa0c 	bl	8006a64 <_Bfree>
 800664c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800664e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006650:	9e07      	ldr	r6, [sp, #28]
 8006652:	ea43 0102 	orr.w	r1, r3, r2
 8006656:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006658:	4319      	orrs	r1, r3
 800665a:	d110      	bne.n	800667e <_dtoa_r+0xa26>
 800665c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006660:	d029      	beq.n	80066b6 <_dtoa_r+0xa5e>
 8006662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006664:	2b00      	cmp	r3, #0
 8006666:	dd02      	ble.n	800666e <_dtoa_r+0xa16>
 8006668:	9b08      	ldr	r3, [sp, #32]
 800666a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800666e:	9b02      	ldr	r3, [sp, #8]
 8006670:	f883 8000 	strb.w	r8, [r3]
 8006674:	e63b      	b.n	80062ee <_dtoa_r+0x696>
 8006676:	4628      	mov	r0, r5
 8006678:	e7bb      	b.n	80065f2 <_dtoa_r+0x99a>
 800667a:	2201      	movs	r2, #1
 800667c:	e7e1      	b.n	8006642 <_dtoa_r+0x9ea>
 800667e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006680:	2b00      	cmp	r3, #0
 8006682:	db04      	blt.n	800668e <_dtoa_r+0xa36>
 8006684:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006686:	430b      	orrs	r3, r1
 8006688:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800668a:	430b      	orrs	r3, r1
 800668c:	d120      	bne.n	80066d0 <_dtoa_r+0xa78>
 800668e:	2a00      	cmp	r2, #0
 8006690:	dded      	ble.n	800666e <_dtoa_r+0xa16>
 8006692:	4649      	mov	r1, r9
 8006694:	2201      	movs	r2, #1
 8006696:	4658      	mov	r0, fp
 8006698:	f000 fbfa 	bl	8006e90 <__lshift>
 800669c:	4621      	mov	r1, r4
 800669e:	4681      	mov	r9, r0
 80066a0:	f000 fc62 	bl	8006f68 <__mcmp>
 80066a4:	2800      	cmp	r0, #0
 80066a6:	dc03      	bgt.n	80066b0 <_dtoa_r+0xa58>
 80066a8:	d1e1      	bne.n	800666e <_dtoa_r+0xa16>
 80066aa:	f018 0f01 	tst.w	r8, #1
 80066ae:	d0de      	beq.n	800666e <_dtoa_r+0xa16>
 80066b0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80066b4:	d1d8      	bne.n	8006668 <_dtoa_r+0xa10>
 80066b6:	2339      	movs	r3, #57	@ 0x39
 80066b8:	9a02      	ldr	r2, [sp, #8]
 80066ba:	7013      	strb	r3, [r2, #0]
 80066bc:	4633      	mov	r3, r6
 80066be:	461e      	mov	r6, r3
 80066c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80066c4:	3b01      	subs	r3, #1
 80066c6:	2a39      	cmp	r2, #57	@ 0x39
 80066c8:	d052      	beq.n	8006770 <_dtoa_r+0xb18>
 80066ca:	3201      	adds	r2, #1
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	e60e      	b.n	80062ee <_dtoa_r+0x696>
 80066d0:	2a00      	cmp	r2, #0
 80066d2:	dd07      	ble.n	80066e4 <_dtoa_r+0xa8c>
 80066d4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80066d8:	d0ed      	beq.n	80066b6 <_dtoa_r+0xa5e>
 80066da:	9a02      	ldr	r2, [sp, #8]
 80066dc:	f108 0301 	add.w	r3, r8, #1
 80066e0:	7013      	strb	r3, [r2, #0]
 80066e2:	e604      	b.n	80062ee <_dtoa_r+0x696>
 80066e4:	9b07      	ldr	r3, [sp, #28]
 80066e6:	9a07      	ldr	r2, [sp, #28]
 80066e8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80066ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d028      	beq.n	8006744 <_dtoa_r+0xaec>
 80066f2:	4649      	mov	r1, r9
 80066f4:	2300      	movs	r3, #0
 80066f6:	220a      	movs	r2, #10
 80066f8:	4658      	mov	r0, fp
 80066fa:	f000 f9d5 	bl	8006aa8 <__multadd>
 80066fe:	42af      	cmp	r7, r5
 8006700:	4681      	mov	r9, r0
 8006702:	f04f 0300 	mov.w	r3, #0
 8006706:	f04f 020a 	mov.w	r2, #10
 800670a:	4639      	mov	r1, r7
 800670c:	4658      	mov	r0, fp
 800670e:	d107      	bne.n	8006720 <_dtoa_r+0xac8>
 8006710:	f000 f9ca 	bl	8006aa8 <__multadd>
 8006714:	4607      	mov	r7, r0
 8006716:	4605      	mov	r5, r0
 8006718:	9b07      	ldr	r3, [sp, #28]
 800671a:	3301      	adds	r3, #1
 800671c:	9307      	str	r3, [sp, #28]
 800671e:	e774      	b.n	800660a <_dtoa_r+0x9b2>
 8006720:	f000 f9c2 	bl	8006aa8 <__multadd>
 8006724:	4629      	mov	r1, r5
 8006726:	4607      	mov	r7, r0
 8006728:	2300      	movs	r3, #0
 800672a:	220a      	movs	r2, #10
 800672c:	4658      	mov	r0, fp
 800672e:	f000 f9bb 	bl	8006aa8 <__multadd>
 8006732:	4605      	mov	r5, r0
 8006734:	e7f0      	b.n	8006718 <_dtoa_r+0xac0>
 8006736:	9b08      	ldr	r3, [sp, #32]
 8006738:	2700      	movs	r7, #0
 800673a:	2b00      	cmp	r3, #0
 800673c:	bfcc      	ite	gt
 800673e:	461e      	movgt	r6, r3
 8006740:	2601      	movle	r6, #1
 8006742:	4456      	add	r6, sl
 8006744:	4649      	mov	r1, r9
 8006746:	2201      	movs	r2, #1
 8006748:	4658      	mov	r0, fp
 800674a:	f000 fba1 	bl	8006e90 <__lshift>
 800674e:	4621      	mov	r1, r4
 8006750:	4681      	mov	r9, r0
 8006752:	f000 fc09 	bl	8006f68 <__mcmp>
 8006756:	2800      	cmp	r0, #0
 8006758:	dcb0      	bgt.n	80066bc <_dtoa_r+0xa64>
 800675a:	d102      	bne.n	8006762 <_dtoa_r+0xb0a>
 800675c:	f018 0f01 	tst.w	r8, #1
 8006760:	d1ac      	bne.n	80066bc <_dtoa_r+0xa64>
 8006762:	4633      	mov	r3, r6
 8006764:	461e      	mov	r6, r3
 8006766:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800676a:	2a30      	cmp	r2, #48	@ 0x30
 800676c:	d0fa      	beq.n	8006764 <_dtoa_r+0xb0c>
 800676e:	e5be      	b.n	80062ee <_dtoa_r+0x696>
 8006770:	459a      	cmp	sl, r3
 8006772:	d1a4      	bne.n	80066be <_dtoa_r+0xa66>
 8006774:	9b04      	ldr	r3, [sp, #16]
 8006776:	3301      	adds	r3, #1
 8006778:	9304      	str	r3, [sp, #16]
 800677a:	2331      	movs	r3, #49	@ 0x31
 800677c:	f88a 3000 	strb.w	r3, [sl]
 8006780:	e5b5      	b.n	80062ee <_dtoa_r+0x696>
 8006782:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006784:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80067e4 <_dtoa_r+0xb8c>
 8006788:	b11b      	cbz	r3, 8006792 <_dtoa_r+0xb3a>
 800678a:	f10a 0308 	add.w	r3, sl, #8
 800678e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	4650      	mov	r0, sl
 8006794:	b017      	add	sp, #92	@ 0x5c
 8006796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800679a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800679c:	2b01      	cmp	r3, #1
 800679e:	f77f ae3d 	ble.w	800641c <_dtoa_r+0x7c4>
 80067a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80067a6:	2001      	movs	r0, #1
 80067a8:	e65b      	b.n	8006462 <_dtoa_r+0x80a>
 80067aa:	9b08      	ldr	r3, [sp, #32]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f77f aed6 	ble.w	800655e <_dtoa_r+0x906>
 80067b2:	4656      	mov	r6, sl
 80067b4:	4621      	mov	r1, r4
 80067b6:	4648      	mov	r0, r9
 80067b8:	f7ff f9c6 	bl	8005b48 <quorem>
 80067bc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80067c0:	9b08      	ldr	r3, [sp, #32]
 80067c2:	f806 8b01 	strb.w	r8, [r6], #1
 80067c6:	eba6 020a 	sub.w	r2, r6, sl
 80067ca:	4293      	cmp	r3, r2
 80067cc:	ddb3      	ble.n	8006736 <_dtoa_r+0xade>
 80067ce:	4649      	mov	r1, r9
 80067d0:	2300      	movs	r3, #0
 80067d2:	220a      	movs	r2, #10
 80067d4:	4658      	mov	r0, fp
 80067d6:	f000 f967 	bl	8006aa8 <__multadd>
 80067da:	4681      	mov	r9, r0
 80067dc:	e7ea      	b.n	80067b4 <_dtoa_r+0xb5c>
 80067de:	bf00      	nop
 80067e0:	08009937 	.word	0x08009937
 80067e4:	080098bb 	.word	0x080098bb

080067e8 <_free_r>:
 80067e8:	b538      	push	{r3, r4, r5, lr}
 80067ea:	4605      	mov	r5, r0
 80067ec:	2900      	cmp	r1, #0
 80067ee:	d040      	beq.n	8006872 <_free_r+0x8a>
 80067f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067f4:	1f0c      	subs	r4, r1, #4
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	bfb8      	it	lt
 80067fa:	18e4      	addlt	r4, r4, r3
 80067fc:	f000 f8e6 	bl	80069cc <__malloc_lock>
 8006800:	4a1c      	ldr	r2, [pc, #112]	@ (8006874 <_free_r+0x8c>)
 8006802:	6813      	ldr	r3, [r2, #0]
 8006804:	b933      	cbnz	r3, 8006814 <_free_r+0x2c>
 8006806:	6063      	str	r3, [r4, #4]
 8006808:	6014      	str	r4, [r2, #0]
 800680a:	4628      	mov	r0, r5
 800680c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006810:	f000 b8e2 	b.w	80069d8 <__malloc_unlock>
 8006814:	42a3      	cmp	r3, r4
 8006816:	d908      	bls.n	800682a <_free_r+0x42>
 8006818:	6820      	ldr	r0, [r4, #0]
 800681a:	1821      	adds	r1, r4, r0
 800681c:	428b      	cmp	r3, r1
 800681e:	bf01      	itttt	eq
 8006820:	6819      	ldreq	r1, [r3, #0]
 8006822:	685b      	ldreq	r3, [r3, #4]
 8006824:	1809      	addeq	r1, r1, r0
 8006826:	6021      	streq	r1, [r4, #0]
 8006828:	e7ed      	b.n	8006806 <_free_r+0x1e>
 800682a:	461a      	mov	r2, r3
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	b10b      	cbz	r3, 8006834 <_free_r+0x4c>
 8006830:	42a3      	cmp	r3, r4
 8006832:	d9fa      	bls.n	800682a <_free_r+0x42>
 8006834:	6811      	ldr	r1, [r2, #0]
 8006836:	1850      	adds	r0, r2, r1
 8006838:	42a0      	cmp	r0, r4
 800683a:	d10b      	bne.n	8006854 <_free_r+0x6c>
 800683c:	6820      	ldr	r0, [r4, #0]
 800683e:	4401      	add	r1, r0
 8006840:	1850      	adds	r0, r2, r1
 8006842:	4283      	cmp	r3, r0
 8006844:	6011      	str	r1, [r2, #0]
 8006846:	d1e0      	bne.n	800680a <_free_r+0x22>
 8006848:	6818      	ldr	r0, [r3, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	4408      	add	r0, r1
 800684e:	6010      	str	r0, [r2, #0]
 8006850:	6053      	str	r3, [r2, #4]
 8006852:	e7da      	b.n	800680a <_free_r+0x22>
 8006854:	d902      	bls.n	800685c <_free_r+0x74>
 8006856:	230c      	movs	r3, #12
 8006858:	602b      	str	r3, [r5, #0]
 800685a:	e7d6      	b.n	800680a <_free_r+0x22>
 800685c:	6820      	ldr	r0, [r4, #0]
 800685e:	1821      	adds	r1, r4, r0
 8006860:	428b      	cmp	r3, r1
 8006862:	bf01      	itttt	eq
 8006864:	6819      	ldreq	r1, [r3, #0]
 8006866:	685b      	ldreq	r3, [r3, #4]
 8006868:	1809      	addeq	r1, r1, r0
 800686a:	6021      	streq	r1, [r4, #0]
 800686c:	6063      	str	r3, [r4, #4]
 800686e:	6054      	str	r4, [r2, #4]
 8006870:	e7cb      	b.n	800680a <_free_r+0x22>
 8006872:	bd38      	pop	{r3, r4, r5, pc}
 8006874:	2000048c 	.word	0x2000048c

08006878 <malloc>:
 8006878:	4b02      	ldr	r3, [pc, #8]	@ (8006884 <malloc+0xc>)
 800687a:	4601      	mov	r1, r0
 800687c:	6818      	ldr	r0, [r3, #0]
 800687e:	f000 b825 	b.w	80068cc <_malloc_r>
 8006882:	bf00      	nop
 8006884:	20000018 	.word	0x20000018

08006888 <sbrk_aligned>:
 8006888:	b570      	push	{r4, r5, r6, lr}
 800688a:	4e0f      	ldr	r6, [pc, #60]	@ (80068c8 <sbrk_aligned+0x40>)
 800688c:	460c      	mov	r4, r1
 800688e:	6831      	ldr	r1, [r6, #0]
 8006890:	4605      	mov	r5, r0
 8006892:	b911      	cbnz	r1, 800689a <sbrk_aligned+0x12>
 8006894:	f001 fdf6 	bl	8008484 <_sbrk_r>
 8006898:	6030      	str	r0, [r6, #0]
 800689a:	4621      	mov	r1, r4
 800689c:	4628      	mov	r0, r5
 800689e:	f001 fdf1 	bl	8008484 <_sbrk_r>
 80068a2:	1c43      	adds	r3, r0, #1
 80068a4:	d103      	bne.n	80068ae <sbrk_aligned+0x26>
 80068a6:	f04f 34ff 	mov.w	r4, #4294967295
 80068aa:	4620      	mov	r0, r4
 80068ac:	bd70      	pop	{r4, r5, r6, pc}
 80068ae:	1cc4      	adds	r4, r0, #3
 80068b0:	f024 0403 	bic.w	r4, r4, #3
 80068b4:	42a0      	cmp	r0, r4
 80068b6:	d0f8      	beq.n	80068aa <sbrk_aligned+0x22>
 80068b8:	1a21      	subs	r1, r4, r0
 80068ba:	4628      	mov	r0, r5
 80068bc:	f001 fde2 	bl	8008484 <_sbrk_r>
 80068c0:	3001      	adds	r0, #1
 80068c2:	d1f2      	bne.n	80068aa <sbrk_aligned+0x22>
 80068c4:	e7ef      	b.n	80068a6 <sbrk_aligned+0x1e>
 80068c6:	bf00      	nop
 80068c8:	20000488 	.word	0x20000488

080068cc <_malloc_r>:
 80068cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068d0:	1ccd      	adds	r5, r1, #3
 80068d2:	f025 0503 	bic.w	r5, r5, #3
 80068d6:	3508      	adds	r5, #8
 80068d8:	2d0c      	cmp	r5, #12
 80068da:	bf38      	it	cc
 80068dc:	250c      	movcc	r5, #12
 80068de:	2d00      	cmp	r5, #0
 80068e0:	4606      	mov	r6, r0
 80068e2:	db01      	blt.n	80068e8 <_malloc_r+0x1c>
 80068e4:	42a9      	cmp	r1, r5
 80068e6:	d904      	bls.n	80068f2 <_malloc_r+0x26>
 80068e8:	230c      	movs	r3, #12
 80068ea:	6033      	str	r3, [r6, #0]
 80068ec:	2000      	movs	r0, #0
 80068ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80069c8 <_malloc_r+0xfc>
 80068f6:	f000 f869 	bl	80069cc <__malloc_lock>
 80068fa:	f8d8 3000 	ldr.w	r3, [r8]
 80068fe:	461c      	mov	r4, r3
 8006900:	bb44      	cbnz	r4, 8006954 <_malloc_r+0x88>
 8006902:	4629      	mov	r1, r5
 8006904:	4630      	mov	r0, r6
 8006906:	f7ff ffbf 	bl	8006888 <sbrk_aligned>
 800690a:	1c43      	adds	r3, r0, #1
 800690c:	4604      	mov	r4, r0
 800690e:	d158      	bne.n	80069c2 <_malloc_r+0xf6>
 8006910:	f8d8 4000 	ldr.w	r4, [r8]
 8006914:	4627      	mov	r7, r4
 8006916:	2f00      	cmp	r7, #0
 8006918:	d143      	bne.n	80069a2 <_malloc_r+0xd6>
 800691a:	2c00      	cmp	r4, #0
 800691c:	d04b      	beq.n	80069b6 <_malloc_r+0xea>
 800691e:	6823      	ldr	r3, [r4, #0]
 8006920:	4639      	mov	r1, r7
 8006922:	4630      	mov	r0, r6
 8006924:	eb04 0903 	add.w	r9, r4, r3
 8006928:	f001 fdac 	bl	8008484 <_sbrk_r>
 800692c:	4581      	cmp	r9, r0
 800692e:	d142      	bne.n	80069b6 <_malloc_r+0xea>
 8006930:	6821      	ldr	r1, [r4, #0]
 8006932:	4630      	mov	r0, r6
 8006934:	1a6d      	subs	r5, r5, r1
 8006936:	4629      	mov	r1, r5
 8006938:	f7ff ffa6 	bl	8006888 <sbrk_aligned>
 800693c:	3001      	adds	r0, #1
 800693e:	d03a      	beq.n	80069b6 <_malloc_r+0xea>
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	442b      	add	r3, r5
 8006944:	6023      	str	r3, [r4, #0]
 8006946:	f8d8 3000 	ldr.w	r3, [r8]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	bb62      	cbnz	r2, 80069a8 <_malloc_r+0xdc>
 800694e:	f8c8 7000 	str.w	r7, [r8]
 8006952:	e00f      	b.n	8006974 <_malloc_r+0xa8>
 8006954:	6822      	ldr	r2, [r4, #0]
 8006956:	1b52      	subs	r2, r2, r5
 8006958:	d420      	bmi.n	800699c <_malloc_r+0xd0>
 800695a:	2a0b      	cmp	r2, #11
 800695c:	d917      	bls.n	800698e <_malloc_r+0xc2>
 800695e:	1961      	adds	r1, r4, r5
 8006960:	42a3      	cmp	r3, r4
 8006962:	6025      	str	r5, [r4, #0]
 8006964:	bf18      	it	ne
 8006966:	6059      	strne	r1, [r3, #4]
 8006968:	6863      	ldr	r3, [r4, #4]
 800696a:	bf08      	it	eq
 800696c:	f8c8 1000 	streq.w	r1, [r8]
 8006970:	5162      	str	r2, [r4, r5]
 8006972:	604b      	str	r3, [r1, #4]
 8006974:	4630      	mov	r0, r6
 8006976:	f000 f82f 	bl	80069d8 <__malloc_unlock>
 800697a:	f104 000b 	add.w	r0, r4, #11
 800697e:	1d23      	adds	r3, r4, #4
 8006980:	f020 0007 	bic.w	r0, r0, #7
 8006984:	1ac2      	subs	r2, r0, r3
 8006986:	bf1c      	itt	ne
 8006988:	1a1b      	subne	r3, r3, r0
 800698a:	50a3      	strne	r3, [r4, r2]
 800698c:	e7af      	b.n	80068ee <_malloc_r+0x22>
 800698e:	6862      	ldr	r2, [r4, #4]
 8006990:	42a3      	cmp	r3, r4
 8006992:	bf0c      	ite	eq
 8006994:	f8c8 2000 	streq.w	r2, [r8]
 8006998:	605a      	strne	r2, [r3, #4]
 800699a:	e7eb      	b.n	8006974 <_malloc_r+0xa8>
 800699c:	4623      	mov	r3, r4
 800699e:	6864      	ldr	r4, [r4, #4]
 80069a0:	e7ae      	b.n	8006900 <_malloc_r+0x34>
 80069a2:	463c      	mov	r4, r7
 80069a4:	687f      	ldr	r7, [r7, #4]
 80069a6:	e7b6      	b.n	8006916 <_malloc_r+0x4a>
 80069a8:	461a      	mov	r2, r3
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	42a3      	cmp	r3, r4
 80069ae:	d1fb      	bne.n	80069a8 <_malloc_r+0xdc>
 80069b0:	2300      	movs	r3, #0
 80069b2:	6053      	str	r3, [r2, #4]
 80069b4:	e7de      	b.n	8006974 <_malloc_r+0xa8>
 80069b6:	230c      	movs	r3, #12
 80069b8:	4630      	mov	r0, r6
 80069ba:	6033      	str	r3, [r6, #0]
 80069bc:	f000 f80c 	bl	80069d8 <__malloc_unlock>
 80069c0:	e794      	b.n	80068ec <_malloc_r+0x20>
 80069c2:	6005      	str	r5, [r0, #0]
 80069c4:	e7d6      	b.n	8006974 <_malloc_r+0xa8>
 80069c6:	bf00      	nop
 80069c8:	2000048c 	.word	0x2000048c

080069cc <__malloc_lock>:
 80069cc:	4801      	ldr	r0, [pc, #4]	@ (80069d4 <__malloc_lock+0x8>)
 80069ce:	f7ff b8a6 	b.w	8005b1e <__retarget_lock_acquire_recursive>
 80069d2:	bf00      	nop
 80069d4:	20000484 	.word	0x20000484

080069d8 <__malloc_unlock>:
 80069d8:	4801      	ldr	r0, [pc, #4]	@ (80069e0 <__malloc_unlock+0x8>)
 80069da:	f7ff b8a1 	b.w	8005b20 <__retarget_lock_release_recursive>
 80069de:	bf00      	nop
 80069e0:	20000484 	.word	0x20000484

080069e4 <_Balloc>:
 80069e4:	b570      	push	{r4, r5, r6, lr}
 80069e6:	69c6      	ldr	r6, [r0, #28]
 80069e8:	4604      	mov	r4, r0
 80069ea:	460d      	mov	r5, r1
 80069ec:	b976      	cbnz	r6, 8006a0c <_Balloc+0x28>
 80069ee:	2010      	movs	r0, #16
 80069f0:	f7ff ff42 	bl	8006878 <malloc>
 80069f4:	4602      	mov	r2, r0
 80069f6:	61e0      	str	r0, [r4, #28]
 80069f8:	b920      	cbnz	r0, 8006a04 <_Balloc+0x20>
 80069fa:	216b      	movs	r1, #107	@ 0x6b
 80069fc:	4b17      	ldr	r3, [pc, #92]	@ (8006a5c <_Balloc+0x78>)
 80069fe:	4818      	ldr	r0, [pc, #96]	@ (8006a60 <_Balloc+0x7c>)
 8006a00:	f001 fd64 	bl	80084cc <__assert_func>
 8006a04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a08:	6006      	str	r6, [r0, #0]
 8006a0a:	60c6      	str	r6, [r0, #12]
 8006a0c:	69e6      	ldr	r6, [r4, #28]
 8006a0e:	68f3      	ldr	r3, [r6, #12]
 8006a10:	b183      	cbz	r3, 8006a34 <_Balloc+0x50>
 8006a12:	69e3      	ldr	r3, [r4, #28]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a1a:	b9b8      	cbnz	r0, 8006a4c <_Balloc+0x68>
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	fa01 f605 	lsl.w	r6, r1, r5
 8006a22:	1d72      	adds	r2, r6, #5
 8006a24:	4620      	mov	r0, r4
 8006a26:	0092      	lsls	r2, r2, #2
 8006a28:	f001 fd6e 	bl	8008508 <_calloc_r>
 8006a2c:	b160      	cbz	r0, 8006a48 <_Balloc+0x64>
 8006a2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a32:	e00e      	b.n	8006a52 <_Balloc+0x6e>
 8006a34:	2221      	movs	r2, #33	@ 0x21
 8006a36:	2104      	movs	r1, #4
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f001 fd65 	bl	8008508 <_calloc_r>
 8006a3e:	69e3      	ldr	r3, [r4, #28]
 8006a40:	60f0      	str	r0, [r6, #12]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e4      	bne.n	8006a12 <_Balloc+0x2e>
 8006a48:	2000      	movs	r0, #0
 8006a4a:	bd70      	pop	{r4, r5, r6, pc}
 8006a4c:	6802      	ldr	r2, [r0, #0]
 8006a4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a52:	2300      	movs	r3, #0
 8006a54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a58:	e7f7      	b.n	8006a4a <_Balloc+0x66>
 8006a5a:	bf00      	nop
 8006a5c:	080098c8 	.word	0x080098c8
 8006a60:	08009948 	.word	0x08009948

08006a64 <_Bfree>:
 8006a64:	b570      	push	{r4, r5, r6, lr}
 8006a66:	69c6      	ldr	r6, [r0, #28]
 8006a68:	4605      	mov	r5, r0
 8006a6a:	460c      	mov	r4, r1
 8006a6c:	b976      	cbnz	r6, 8006a8c <_Bfree+0x28>
 8006a6e:	2010      	movs	r0, #16
 8006a70:	f7ff ff02 	bl	8006878 <malloc>
 8006a74:	4602      	mov	r2, r0
 8006a76:	61e8      	str	r0, [r5, #28]
 8006a78:	b920      	cbnz	r0, 8006a84 <_Bfree+0x20>
 8006a7a:	218f      	movs	r1, #143	@ 0x8f
 8006a7c:	4b08      	ldr	r3, [pc, #32]	@ (8006aa0 <_Bfree+0x3c>)
 8006a7e:	4809      	ldr	r0, [pc, #36]	@ (8006aa4 <_Bfree+0x40>)
 8006a80:	f001 fd24 	bl	80084cc <__assert_func>
 8006a84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a88:	6006      	str	r6, [r0, #0]
 8006a8a:	60c6      	str	r6, [r0, #12]
 8006a8c:	b13c      	cbz	r4, 8006a9e <_Bfree+0x3a>
 8006a8e:	69eb      	ldr	r3, [r5, #28]
 8006a90:	6862      	ldr	r2, [r4, #4]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a98:	6021      	str	r1, [r4, #0]
 8006a9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a9e:	bd70      	pop	{r4, r5, r6, pc}
 8006aa0:	080098c8 	.word	0x080098c8
 8006aa4:	08009948 	.word	0x08009948

08006aa8 <__multadd>:
 8006aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aac:	4607      	mov	r7, r0
 8006aae:	460c      	mov	r4, r1
 8006ab0:	461e      	mov	r6, r3
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	690d      	ldr	r5, [r1, #16]
 8006ab6:	f101 0c14 	add.w	ip, r1, #20
 8006aba:	f8dc 3000 	ldr.w	r3, [ip]
 8006abe:	3001      	adds	r0, #1
 8006ac0:	b299      	uxth	r1, r3
 8006ac2:	fb02 6101 	mla	r1, r2, r1, r6
 8006ac6:	0c1e      	lsrs	r6, r3, #16
 8006ac8:	0c0b      	lsrs	r3, r1, #16
 8006aca:	fb02 3306 	mla	r3, r2, r6, r3
 8006ace:	b289      	uxth	r1, r1
 8006ad0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ad4:	4285      	cmp	r5, r0
 8006ad6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ada:	f84c 1b04 	str.w	r1, [ip], #4
 8006ade:	dcec      	bgt.n	8006aba <__multadd+0x12>
 8006ae0:	b30e      	cbz	r6, 8006b26 <__multadd+0x7e>
 8006ae2:	68a3      	ldr	r3, [r4, #8]
 8006ae4:	42ab      	cmp	r3, r5
 8006ae6:	dc19      	bgt.n	8006b1c <__multadd+0x74>
 8006ae8:	6861      	ldr	r1, [r4, #4]
 8006aea:	4638      	mov	r0, r7
 8006aec:	3101      	adds	r1, #1
 8006aee:	f7ff ff79 	bl	80069e4 <_Balloc>
 8006af2:	4680      	mov	r8, r0
 8006af4:	b928      	cbnz	r0, 8006b02 <__multadd+0x5a>
 8006af6:	4602      	mov	r2, r0
 8006af8:	21ba      	movs	r1, #186	@ 0xba
 8006afa:	4b0c      	ldr	r3, [pc, #48]	@ (8006b2c <__multadd+0x84>)
 8006afc:	480c      	ldr	r0, [pc, #48]	@ (8006b30 <__multadd+0x88>)
 8006afe:	f001 fce5 	bl	80084cc <__assert_func>
 8006b02:	6922      	ldr	r2, [r4, #16]
 8006b04:	f104 010c 	add.w	r1, r4, #12
 8006b08:	3202      	adds	r2, #2
 8006b0a:	0092      	lsls	r2, r2, #2
 8006b0c:	300c      	adds	r0, #12
 8006b0e:	f001 fcc9 	bl	80084a4 <memcpy>
 8006b12:	4621      	mov	r1, r4
 8006b14:	4638      	mov	r0, r7
 8006b16:	f7ff ffa5 	bl	8006a64 <_Bfree>
 8006b1a:	4644      	mov	r4, r8
 8006b1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b20:	3501      	adds	r5, #1
 8006b22:	615e      	str	r6, [r3, #20]
 8006b24:	6125      	str	r5, [r4, #16]
 8006b26:	4620      	mov	r0, r4
 8006b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b2c:	08009937 	.word	0x08009937
 8006b30:	08009948 	.word	0x08009948

08006b34 <__s2b>:
 8006b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b38:	4615      	mov	r5, r2
 8006b3a:	2209      	movs	r2, #9
 8006b3c:	461f      	mov	r7, r3
 8006b3e:	3308      	adds	r3, #8
 8006b40:	460c      	mov	r4, r1
 8006b42:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b46:	4606      	mov	r6, r0
 8006b48:	2201      	movs	r2, #1
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	db09      	blt.n	8006b64 <__s2b+0x30>
 8006b50:	4630      	mov	r0, r6
 8006b52:	f7ff ff47 	bl	80069e4 <_Balloc>
 8006b56:	b940      	cbnz	r0, 8006b6a <__s2b+0x36>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	21d3      	movs	r1, #211	@ 0xd3
 8006b5c:	4b18      	ldr	r3, [pc, #96]	@ (8006bc0 <__s2b+0x8c>)
 8006b5e:	4819      	ldr	r0, [pc, #100]	@ (8006bc4 <__s2b+0x90>)
 8006b60:	f001 fcb4 	bl	80084cc <__assert_func>
 8006b64:	0052      	lsls	r2, r2, #1
 8006b66:	3101      	adds	r1, #1
 8006b68:	e7f0      	b.n	8006b4c <__s2b+0x18>
 8006b6a:	9b08      	ldr	r3, [sp, #32]
 8006b6c:	2d09      	cmp	r5, #9
 8006b6e:	6143      	str	r3, [r0, #20]
 8006b70:	f04f 0301 	mov.w	r3, #1
 8006b74:	6103      	str	r3, [r0, #16]
 8006b76:	dd16      	ble.n	8006ba6 <__s2b+0x72>
 8006b78:	f104 0909 	add.w	r9, r4, #9
 8006b7c:	46c8      	mov	r8, r9
 8006b7e:	442c      	add	r4, r5
 8006b80:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006b84:	4601      	mov	r1, r0
 8006b86:	220a      	movs	r2, #10
 8006b88:	4630      	mov	r0, r6
 8006b8a:	3b30      	subs	r3, #48	@ 0x30
 8006b8c:	f7ff ff8c 	bl	8006aa8 <__multadd>
 8006b90:	45a0      	cmp	r8, r4
 8006b92:	d1f5      	bne.n	8006b80 <__s2b+0x4c>
 8006b94:	f1a5 0408 	sub.w	r4, r5, #8
 8006b98:	444c      	add	r4, r9
 8006b9a:	1b2d      	subs	r5, r5, r4
 8006b9c:	1963      	adds	r3, r4, r5
 8006b9e:	42bb      	cmp	r3, r7
 8006ba0:	db04      	blt.n	8006bac <__s2b+0x78>
 8006ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ba6:	2509      	movs	r5, #9
 8006ba8:	340a      	adds	r4, #10
 8006baa:	e7f6      	b.n	8006b9a <__s2b+0x66>
 8006bac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006bb0:	4601      	mov	r1, r0
 8006bb2:	220a      	movs	r2, #10
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	3b30      	subs	r3, #48	@ 0x30
 8006bb8:	f7ff ff76 	bl	8006aa8 <__multadd>
 8006bbc:	e7ee      	b.n	8006b9c <__s2b+0x68>
 8006bbe:	bf00      	nop
 8006bc0:	08009937 	.word	0x08009937
 8006bc4:	08009948 	.word	0x08009948

08006bc8 <__hi0bits>:
 8006bc8:	4603      	mov	r3, r0
 8006bca:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006bce:	bf3a      	itte	cc
 8006bd0:	0403      	lslcc	r3, r0, #16
 8006bd2:	2010      	movcc	r0, #16
 8006bd4:	2000      	movcs	r0, #0
 8006bd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006bda:	bf3c      	itt	cc
 8006bdc:	021b      	lslcc	r3, r3, #8
 8006bde:	3008      	addcc	r0, #8
 8006be0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006be4:	bf3c      	itt	cc
 8006be6:	011b      	lslcc	r3, r3, #4
 8006be8:	3004      	addcc	r0, #4
 8006bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bee:	bf3c      	itt	cc
 8006bf0:	009b      	lslcc	r3, r3, #2
 8006bf2:	3002      	addcc	r0, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	db05      	blt.n	8006c04 <__hi0bits+0x3c>
 8006bf8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006bfc:	f100 0001 	add.w	r0, r0, #1
 8006c00:	bf08      	it	eq
 8006c02:	2020      	moveq	r0, #32
 8006c04:	4770      	bx	lr

08006c06 <__lo0bits>:
 8006c06:	6803      	ldr	r3, [r0, #0]
 8006c08:	4602      	mov	r2, r0
 8006c0a:	f013 0007 	ands.w	r0, r3, #7
 8006c0e:	d00b      	beq.n	8006c28 <__lo0bits+0x22>
 8006c10:	07d9      	lsls	r1, r3, #31
 8006c12:	d421      	bmi.n	8006c58 <__lo0bits+0x52>
 8006c14:	0798      	lsls	r0, r3, #30
 8006c16:	bf49      	itett	mi
 8006c18:	085b      	lsrmi	r3, r3, #1
 8006c1a:	089b      	lsrpl	r3, r3, #2
 8006c1c:	2001      	movmi	r0, #1
 8006c1e:	6013      	strmi	r3, [r2, #0]
 8006c20:	bf5c      	itt	pl
 8006c22:	2002      	movpl	r0, #2
 8006c24:	6013      	strpl	r3, [r2, #0]
 8006c26:	4770      	bx	lr
 8006c28:	b299      	uxth	r1, r3
 8006c2a:	b909      	cbnz	r1, 8006c30 <__lo0bits+0x2a>
 8006c2c:	2010      	movs	r0, #16
 8006c2e:	0c1b      	lsrs	r3, r3, #16
 8006c30:	b2d9      	uxtb	r1, r3
 8006c32:	b909      	cbnz	r1, 8006c38 <__lo0bits+0x32>
 8006c34:	3008      	adds	r0, #8
 8006c36:	0a1b      	lsrs	r3, r3, #8
 8006c38:	0719      	lsls	r1, r3, #28
 8006c3a:	bf04      	itt	eq
 8006c3c:	091b      	lsreq	r3, r3, #4
 8006c3e:	3004      	addeq	r0, #4
 8006c40:	0799      	lsls	r1, r3, #30
 8006c42:	bf04      	itt	eq
 8006c44:	089b      	lsreq	r3, r3, #2
 8006c46:	3002      	addeq	r0, #2
 8006c48:	07d9      	lsls	r1, r3, #31
 8006c4a:	d403      	bmi.n	8006c54 <__lo0bits+0x4e>
 8006c4c:	085b      	lsrs	r3, r3, #1
 8006c4e:	f100 0001 	add.w	r0, r0, #1
 8006c52:	d003      	beq.n	8006c5c <__lo0bits+0x56>
 8006c54:	6013      	str	r3, [r2, #0]
 8006c56:	4770      	bx	lr
 8006c58:	2000      	movs	r0, #0
 8006c5a:	4770      	bx	lr
 8006c5c:	2020      	movs	r0, #32
 8006c5e:	4770      	bx	lr

08006c60 <__i2b>:
 8006c60:	b510      	push	{r4, lr}
 8006c62:	460c      	mov	r4, r1
 8006c64:	2101      	movs	r1, #1
 8006c66:	f7ff febd 	bl	80069e4 <_Balloc>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	b928      	cbnz	r0, 8006c7a <__i2b+0x1a>
 8006c6e:	f240 1145 	movw	r1, #325	@ 0x145
 8006c72:	4b04      	ldr	r3, [pc, #16]	@ (8006c84 <__i2b+0x24>)
 8006c74:	4804      	ldr	r0, [pc, #16]	@ (8006c88 <__i2b+0x28>)
 8006c76:	f001 fc29 	bl	80084cc <__assert_func>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	6144      	str	r4, [r0, #20]
 8006c7e:	6103      	str	r3, [r0, #16]
 8006c80:	bd10      	pop	{r4, pc}
 8006c82:	bf00      	nop
 8006c84:	08009937 	.word	0x08009937
 8006c88:	08009948 	.word	0x08009948

08006c8c <__multiply>:
 8006c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c90:	4614      	mov	r4, r2
 8006c92:	690a      	ldr	r2, [r1, #16]
 8006c94:	6923      	ldr	r3, [r4, #16]
 8006c96:	460f      	mov	r7, r1
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	bfa2      	ittt	ge
 8006c9c:	4623      	movge	r3, r4
 8006c9e:	460c      	movge	r4, r1
 8006ca0:	461f      	movge	r7, r3
 8006ca2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006ca6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006caa:	68a3      	ldr	r3, [r4, #8]
 8006cac:	6861      	ldr	r1, [r4, #4]
 8006cae:	eb0a 0609 	add.w	r6, sl, r9
 8006cb2:	42b3      	cmp	r3, r6
 8006cb4:	b085      	sub	sp, #20
 8006cb6:	bfb8      	it	lt
 8006cb8:	3101      	addlt	r1, #1
 8006cba:	f7ff fe93 	bl	80069e4 <_Balloc>
 8006cbe:	b930      	cbnz	r0, 8006cce <__multiply+0x42>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006cc6:	4b43      	ldr	r3, [pc, #268]	@ (8006dd4 <__multiply+0x148>)
 8006cc8:	4843      	ldr	r0, [pc, #268]	@ (8006dd8 <__multiply+0x14c>)
 8006cca:	f001 fbff 	bl	80084cc <__assert_func>
 8006cce:	f100 0514 	add.w	r5, r0, #20
 8006cd2:	462b      	mov	r3, r5
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006cda:	4543      	cmp	r3, r8
 8006cdc:	d321      	bcc.n	8006d22 <__multiply+0x96>
 8006cde:	f107 0114 	add.w	r1, r7, #20
 8006ce2:	f104 0214 	add.w	r2, r4, #20
 8006ce6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006cea:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006cee:	9302      	str	r3, [sp, #8]
 8006cf0:	1b13      	subs	r3, r2, r4
 8006cf2:	3b15      	subs	r3, #21
 8006cf4:	f023 0303 	bic.w	r3, r3, #3
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	f104 0715 	add.w	r7, r4, #21
 8006cfe:	42ba      	cmp	r2, r7
 8006d00:	bf38      	it	cc
 8006d02:	2304      	movcc	r3, #4
 8006d04:	9301      	str	r3, [sp, #4]
 8006d06:	9b02      	ldr	r3, [sp, #8]
 8006d08:	9103      	str	r1, [sp, #12]
 8006d0a:	428b      	cmp	r3, r1
 8006d0c:	d80c      	bhi.n	8006d28 <__multiply+0x9c>
 8006d0e:	2e00      	cmp	r6, #0
 8006d10:	dd03      	ble.n	8006d1a <__multiply+0x8e>
 8006d12:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d05a      	beq.n	8006dd0 <__multiply+0x144>
 8006d1a:	6106      	str	r6, [r0, #16]
 8006d1c:	b005      	add	sp, #20
 8006d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d22:	f843 2b04 	str.w	r2, [r3], #4
 8006d26:	e7d8      	b.n	8006cda <__multiply+0x4e>
 8006d28:	f8b1 a000 	ldrh.w	sl, [r1]
 8006d2c:	f1ba 0f00 	cmp.w	sl, #0
 8006d30:	d023      	beq.n	8006d7a <__multiply+0xee>
 8006d32:	46a9      	mov	r9, r5
 8006d34:	f04f 0c00 	mov.w	ip, #0
 8006d38:	f104 0e14 	add.w	lr, r4, #20
 8006d3c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006d40:	f8d9 3000 	ldr.w	r3, [r9]
 8006d44:	fa1f fb87 	uxth.w	fp, r7
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	fb0a 330b 	mla	r3, sl, fp, r3
 8006d4e:	4463      	add	r3, ip
 8006d50:	f8d9 c000 	ldr.w	ip, [r9]
 8006d54:	0c3f      	lsrs	r7, r7, #16
 8006d56:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006d5a:	fb0a c707 	mla	r7, sl, r7, ip
 8006d5e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006d68:	4572      	cmp	r2, lr
 8006d6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006d6e:	f849 3b04 	str.w	r3, [r9], #4
 8006d72:	d8e3      	bhi.n	8006d3c <__multiply+0xb0>
 8006d74:	9b01      	ldr	r3, [sp, #4]
 8006d76:	f845 c003 	str.w	ip, [r5, r3]
 8006d7a:	9b03      	ldr	r3, [sp, #12]
 8006d7c:	3104      	adds	r1, #4
 8006d7e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006d82:	f1b9 0f00 	cmp.w	r9, #0
 8006d86:	d021      	beq.n	8006dcc <__multiply+0x140>
 8006d88:	46ae      	mov	lr, r5
 8006d8a:	f04f 0a00 	mov.w	sl, #0
 8006d8e:	682b      	ldr	r3, [r5, #0]
 8006d90:	f104 0c14 	add.w	ip, r4, #20
 8006d94:	f8bc b000 	ldrh.w	fp, [ip]
 8006d98:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	fb09 770b 	mla	r7, r9, fp, r7
 8006da2:	4457      	add	r7, sl
 8006da4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006da8:	f84e 3b04 	str.w	r3, [lr], #4
 8006dac:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006db0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006db4:	f8be 3000 	ldrh.w	r3, [lr]
 8006db8:	4562      	cmp	r2, ip
 8006dba:	fb09 330a 	mla	r3, r9, sl, r3
 8006dbe:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006dc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006dc6:	d8e5      	bhi.n	8006d94 <__multiply+0x108>
 8006dc8:	9f01      	ldr	r7, [sp, #4]
 8006dca:	51eb      	str	r3, [r5, r7]
 8006dcc:	3504      	adds	r5, #4
 8006dce:	e79a      	b.n	8006d06 <__multiply+0x7a>
 8006dd0:	3e01      	subs	r6, #1
 8006dd2:	e79c      	b.n	8006d0e <__multiply+0x82>
 8006dd4:	08009937 	.word	0x08009937
 8006dd8:	08009948 	.word	0x08009948

08006ddc <__pow5mult>:
 8006ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006de0:	4615      	mov	r5, r2
 8006de2:	f012 0203 	ands.w	r2, r2, #3
 8006de6:	4607      	mov	r7, r0
 8006de8:	460e      	mov	r6, r1
 8006dea:	d007      	beq.n	8006dfc <__pow5mult+0x20>
 8006dec:	4c25      	ldr	r4, [pc, #148]	@ (8006e84 <__pow5mult+0xa8>)
 8006dee:	3a01      	subs	r2, #1
 8006df0:	2300      	movs	r3, #0
 8006df2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006df6:	f7ff fe57 	bl	8006aa8 <__multadd>
 8006dfa:	4606      	mov	r6, r0
 8006dfc:	10ad      	asrs	r5, r5, #2
 8006dfe:	d03d      	beq.n	8006e7c <__pow5mult+0xa0>
 8006e00:	69fc      	ldr	r4, [r7, #28]
 8006e02:	b97c      	cbnz	r4, 8006e24 <__pow5mult+0x48>
 8006e04:	2010      	movs	r0, #16
 8006e06:	f7ff fd37 	bl	8006878 <malloc>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	61f8      	str	r0, [r7, #28]
 8006e0e:	b928      	cbnz	r0, 8006e1c <__pow5mult+0x40>
 8006e10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006e14:	4b1c      	ldr	r3, [pc, #112]	@ (8006e88 <__pow5mult+0xac>)
 8006e16:	481d      	ldr	r0, [pc, #116]	@ (8006e8c <__pow5mult+0xb0>)
 8006e18:	f001 fb58 	bl	80084cc <__assert_func>
 8006e1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e20:	6004      	str	r4, [r0, #0]
 8006e22:	60c4      	str	r4, [r0, #12]
 8006e24:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006e28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e2c:	b94c      	cbnz	r4, 8006e42 <__pow5mult+0x66>
 8006e2e:	f240 2171 	movw	r1, #625	@ 0x271
 8006e32:	4638      	mov	r0, r7
 8006e34:	f7ff ff14 	bl	8006c60 <__i2b>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e40:	6003      	str	r3, [r0, #0]
 8006e42:	f04f 0900 	mov.w	r9, #0
 8006e46:	07eb      	lsls	r3, r5, #31
 8006e48:	d50a      	bpl.n	8006e60 <__pow5mult+0x84>
 8006e4a:	4631      	mov	r1, r6
 8006e4c:	4622      	mov	r2, r4
 8006e4e:	4638      	mov	r0, r7
 8006e50:	f7ff ff1c 	bl	8006c8c <__multiply>
 8006e54:	4680      	mov	r8, r0
 8006e56:	4631      	mov	r1, r6
 8006e58:	4638      	mov	r0, r7
 8006e5a:	f7ff fe03 	bl	8006a64 <_Bfree>
 8006e5e:	4646      	mov	r6, r8
 8006e60:	106d      	asrs	r5, r5, #1
 8006e62:	d00b      	beq.n	8006e7c <__pow5mult+0xa0>
 8006e64:	6820      	ldr	r0, [r4, #0]
 8006e66:	b938      	cbnz	r0, 8006e78 <__pow5mult+0x9c>
 8006e68:	4622      	mov	r2, r4
 8006e6a:	4621      	mov	r1, r4
 8006e6c:	4638      	mov	r0, r7
 8006e6e:	f7ff ff0d 	bl	8006c8c <__multiply>
 8006e72:	6020      	str	r0, [r4, #0]
 8006e74:	f8c0 9000 	str.w	r9, [r0]
 8006e78:	4604      	mov	r4, r0
 8006e7a:	e7e4      	b.n	8006e46 <__pow5mult+0x6a>
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e82:	bf00      	nop
 8006e84:	080099a4 	.word	0x080099a4
 8006e88:	080098c8 	.word	0x080098c8
 8006e8c:	08009948 	.word	0x08009948

08006e90 <__lshift>:
 8006e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e94:	460c      	mov	r4, r1
 8006e96:	4607      	mov	r7, r0
 8006e98:	4691      	mov	r9, r2
 8006e9a:	6923      	ldr	r3, [r4, #16]
 8006e9c:	6849      	ldr	r1, [r1, #4]
 8006e9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ea2:	68a3      	ldr	r3, [r4, #8]
 8006ea4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ea8:	f108 0601 	add.w	r6, r8, #1
 8006eac:	42b3      	cmp	r3, r6
 8006eae:	db0b      	blt.n	8006ec8 <__lshift+0x38>
 8006eb0:	4638      	mov	r0, r7
 8006eb2:	f7ff fd97 	bl	80069e4 <_Balloc>
 8006eb6:	4605      	mov	r5, r0
 8006eb8:	b948      	cbnz	r0, 8006ece <__lshift+0x3e>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006ec0:	4b27      	ldr	r3, [pc, #156]	@ (8006f60 <__lshift+0xd0>)
 8006ec2:	4828      	ldr	r0, [pc, #160]	@ (8006f64 <__lshift+0xd4>)
 8006ec4:	f001 fb02 	bl	80084cc <__assert_func>
 8006ec8:	3101      	adds	r1, #1
 8006eca:	005b      	lsls	r3, r3, #1
 8006ecc:	e7ee      	b.n	8006eac <__lshift+0x1c>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	f100 0114 	add.w	r1, r0, #20
 8006ed4:	f100 0210 	add.w	r2, r0, #16
 8006ed8:	4618      	mov	r0, r3
 8006eda:	4553      	cmp	r3, sl
 8006edc:	db33      	blt.n	8006f46 <__lshift+0xb6>
 8006ede:	6920      	ldr	r0, [r4, #16]
 8006ee0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ee4:	f104 0314 	add.w	r3, r4, #20
 8006ee8:	f019 091f 	ands.w	r9, r9, #31
 8006eec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ef0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ef4:	d02b      	beq.n	8006f4e <__lshift+0xbe>
 8006ef6:	468a      	mov	sl, r1
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f1c9 0e20 	rsb	lr, r9, #32
 8006efe:	6818      	ldr	r0, [r3, #0]
 8006f00:	fa00 f009 	lsl.w	r0, r0, r9
 8006f04:	4310      	orrs	r0, r2
 8006f06:	f84a 0b04 	str.w	r0, [sl], #4
 8006f0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f0e:	459c      	cmp	ip, r3
 8006f10:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f14:	d8f3      	bhi.n	8006efe <__lshift+0x6e>
 8006f16:	ebac 0304 	sub.w	r3, ip, r4
 8006f1a:	3b15      	subs	r3, #21
 8006f1c:	f023 0303 	bic.w	r3, r3, #3
 8006f20:	3304      	adds	r3, #4
 8006f22:	f104 0015 	add.w	r0, r4, #21
 8006f26:	4584      	cmp	ip, r0
 8006f28:	bf38      	it	cc
 8006f2a:	2304      	movcc	r3, #4
 8006f2c:	50ca      	str	r2, [r1, r3]
 8006f2e:	b10a      	cbz	r2, 8006f34 <__lshift+0xa4>
 8006f30:	f108 0602 	add.w	r6, r8, #2
 8006f34:	3e01      	subs	r6, #1
 8006f36:	4638      	mov	r0, r7
 8006f38:	4621      	mov	r1, r4
 8006f3a:	612e      	str	r6, [r5, #16]
 8006f3c:	f7ff fd92 	bl	8006a64 <_Bfree>
 8006f40:	4628      	mov	r0, r5
 8006f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f46:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	e7c5      	b.n	8006eda <__lshift+0x4a>
 8006f4e:	3904      	subs	r1, #4
 8006f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f54:	459c      	cmp	ip, r3
 8006f56:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f5a:	d8f9      	bhi.n	8006f50 <__lshift+0xc0>
 8006f5c:	e7ea      	b.n	8006f34 <__lshift+0xa4>
 8006f5e:	bf00      	nop
 8006f60:	08009937 	.word	0x08009937
 8006f64:	08009948 	.word	0x08009948

08006f68 <__mcmp>:
 8006f68:	4603      	mov	r3, r0
 8006f6a:	690a      	ldr	r2, [r1, #16]
 8006f6c:	6900      	ldr	r0, [r0, #16]
 8006f6e:	b530      	push	{r4, r5, lr}
 8006f70:	1a80      	subs	r0, r0, r2
 8006f72:	d10e      	bne.n	8006f92 <__mcmp+0x2a>
 8006f74:	3314      	adds	r3, #20
 8006f76:	3114      	adds	r1, #20
 8006f78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006f7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006f80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006f84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006f88:	4295      	cmp	r5, r2
 8006f8a:	d003      	beq.n	8006f94 <__mcmp+0x2c>
 8006f8c:	d205      	bcs.n	8006f9a <__mcmp+0x32>
 8006f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f92:	bd30      	pop	{r4, r5, pc}
 8006f94:	42a3      	cmp	r3, r4
 8006f96:	d3f3      	bcc.n	8006f80 <__mcmp+0x18>
 8006f98:	e7fb      	b.n	8006f92 <__mcmp+0x2a>
 8006f9a:	2001      	movs	r0, #1
 8006f9c:	e7f9      	b.n	8006f92 <__mcmp+0x2a>
	...

08006fa0 <__mdiff>:
 8006fa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa4:	4689      	mov	r9, r1
 8006fa6:	4606      	mov	r6, r0
 8006fa8:	4611      	mov	r1, r2
 8006faa:	4648      	mov	r0, r9
 8006fac:	4614      	mov	r4, r2
 8006fae:	f7ff ffdb 	bl	8006f68 <__mcmp>
 8006fb2:	1e05      	subs	r5, r0, #0
 8006fb4:	d112      	bne.n	8006fdc <__mdiff+0x3c>
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	4630      	mov	r0, r6
 8006fba:	f7ff fd13 	bl	80069e4 <_Balloc>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	b928      	cbnz	r0, 8006fce <__mdiff+0x2e>
 8006fc2:	f240 2137 	movw	r1, #567	@ 0x237
 8006fc6:	4b3e      	ldr	r3, [pc, #248]	@ (80070c0 <__mdiff+0x120>)
 8006fc8:	483e      	ldr	r0, [pc, #248]	@ (80070c4 <__mdiff+0x124>)
 8006fca:	f001 fa7f 	bl	80084cc <__assert_func>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	b003      	add	sp, #12
 8006fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fdc:	bfbc      	itt	lt
 8006fde:	464b      	movlt	r3, r9
 8006fe0:	46a1      	movlt	r9, r4
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006fe8:	bfba      	itte	lt
 8006fea:	461c      	movlt	r4, r3
 8006fec:	2501      	movlt	r5, #1
 8006fee:	2500      	movge	r5, #0
 8006ff0:	f7ff fcf8 	bl	80069e4 <_Balloc>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	b918      	cbnz	r0, 8007000 <__mdiff+0x60>
 8006ff8:	f240 2145 	movw	r1, #581	@ 0x245
 8006ffc:	4b30      	ldr	r3, [pc, #192]	@ (80070c0 <__mdiff+0x120>)
 8006ffe:	e7e3      	b.n	8006fc8 <__mdiff+0x28>
 8007000:	f100 0b14 	add.w	fp, r0, #20
 8007004:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007008:	f109 0310 	add.w	r3, r9, #16
 800700c:	60c5      	str	r5, [r0, #12]
 800700e:	f04f 0c00 	mov.w	ip, #0
 8007012:	f109 0514 	add.w	r5, r9, #20
 8007016:	46d9      	mov	r9, fp
 8007018:	6926      	ldr	r6, [r4, #16]
 800701a:	f104 0e14 	add.w	lr, r4, #20
 800701e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007022:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007026:	9301      	str	r3, [sp, #4]
 8007028:	9b01      	ldr	r3, [sp, #4]
 800702a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800702e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007032:	b281      	uxth	r1, r0
 8007034:	9301      	str	r3, [sp, #4]
 8007036:	fa1f f38a 	uxth.w	r3, sl
 800703a:	1a5b      	subs	r3, r3, r1
 800703c:	0c00      	lsrs	r0, r0, #16
 800703e:	4463      	add	r3, ip
 8007040:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007044:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007048:	b29b      	uxth	r3, r3
 800704a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800704e:	4576      	cmp	r6, lr
 8007050:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007054:	f849 3b04 	str.w	r3, [r9], #4
 8007058:	d8e6      	bhi.n	8007028 <__mdiff+0x88>
 800705a:	1b33      	subs	r3, r6, r4
 800705c:	3b15      	subs	r3, #21
 800705e:	f023 0303 	bic.w	r3, r3, #3
 8007062:	3415      	adds	r4, #21
 8007064:	3304      	adds	r3, #4
 8007066:	42a6      	cmp	r6, r4
 8007068:	bf38      	it	cc
 800706a:	2304      	movcc	r3, #4
 800706c:	441d      	add	r5, r3
 800706e:	445b      	add	r3, fp
 8007070:	461e      	mov	r6, r3
 8007072:	462c      	mov	r4, r5
 8007074:	4544      	cmp	r4, r8
 8007076:	d30e      	bcc.n	8007096 <__mdiff+0xf6>
 8007078:	f108 0103 	add.w	r1, r8, #3
 800707c:	1b49      	subs	r1, r1, r5
 800707e:	f021 0103 	bic.w	r1, r1, #3
 8007082:	3d03      	subs	r5, #3
 8007084:	45a8      	cmp	r8, r5
 8007086:	bf38      	it	cc
 8007088:	2100      	movcc	r1, #0
 800708a:	440b      	add	r3, r1
 800708c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007090:	b199      	cbz	r1, 80070ba <__mdiff+0x11a>
 8007092:	6117      	str	r7, [r2, #16]
 8007094:	e79e      	b.n	8006fd4 <__mdiff+0x34>
 8007096:	46e6      	mov	lr, ip
 8007098:	f854 1b04 	ldr.w	r1, [r4], #4
 800709c:	fa1f fc81 	uxth.w	ip, r1
 80070a0:	44f4      	add	ip, lr
 80070a2:	0c08      	lsrs	r0, r1, #16
 80070a4:	4471      	add	r1, lr
 80070a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80070aa:	b289      	uxth	r1, r1
 80070ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80070b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80070b4:	f846 1b04 	str.w	r1, [r6], #4
 80070b8:	e7dc      	b.n	8007074 <__mdiff+0xd4>
 80070ba:	3f01      	subs	r7, #1
 80070bc:	e7e6      	b.n	800708c <__mdiff+0xec>
 80070be:	bf00      	nop
 80070c0:	08009937 	.word	0x08009937
 80070c4:	08009948 	.word	0x08009948

080070c8 <__ulp>:
 80070c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007104 <__ulp+0x3c>)
 80070ca:	400b      	ands	r3, r1
 80070cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	dc08      	bgt.n	80070e6 <__ulp+0x1e>
 80070d4:	425b      	negs	r3, r3
 80070d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80070da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80070de:	da04      	bge.n	80070ea <__ulp+0x22>
 80070e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80070e4:	4113      	asrs	r3, r2
 80070e6:	2200      	movs	r2, #0
 80070e8:	e008      	b.n	80070fc <__ulp+0x34>
 80070ea:	f1a2 0314 	sub.w	r3, r2, #20
 80070ee:	2b1e      	cmp	r3, #30
 80070f0:	bfd6      	itet	le
 80070f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80070f6:	2201      	movgt	r2, #1
 80070f8:	40da      	lsrle	r2, r3
 80070fa:	2300      	movs	r3, #0
 80070fc:	4619      	mov	r1, r3
 80070fe:	4610      	mov	r0, r2
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	7ff00000 	.word	0x7ff00000

08007108 <__b2d>:
 8007108:	6902      	ldr	r2, [r0, #16]
 800710a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710c:	f100 0614 	add.w	r6, r0, #20
 8007110:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007114:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007118:	4f1e      	ldr	r7, [pc, #120]	@ (8007194 <__b2d+0x8c>)
 800711a:	4620      	mov	r0, r4
 800711c:	f7ff fd54 	bl	8006bc8 <__hi0bits>
 8007120:	4603      	mov	r3, r0
 8007122:	f1c0 0020 	rsb	r0, r0, #32
 8007126:	2b0a      	cmp	r3, #10
 8007128:	f1a2 0504 	sub.w	r5, r2, #4
 800712c:	6008      	str	r0, [r1, #0]
 800712e:	dc12      	bgt.n	8007156 <__b2d+0x4e>
 8007130:	42ae      	cmp	r6, r5
 8007132:	bf2c      	ite	cs
 8007134:	2200      	movcs	r2, #0
 8007136:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800713a:	f1c3 0c0b 	rsb	ip, r3, #11
 800713e:	3315      	adds	r3, #21
 8007140:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007144:	fa04 f303 	lsl.w	r3, r4, r3
 8007148:	fa22 f20c 	lsr.w	r2, r2, ip
 800714c:	ea4e 0107 	orr.w	r1, lr, r7
 8007150:	431a      	orrs	r2, r3
 8007152:	4610      	mov	r0, r2
 8007154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007156:	42ae      	cmp	r6, r5
 8007158:	bf36      	itet	cc
 800715a:	f1a2 0508 	subcc.w	r5, r2, #8
 800715e:	2200      	movcs	r2, #0
 8007160:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007164:	3b0b      	subs	r3, #11
 8007166:	d012      	beq.n	800718e <__b2d+0x86>
 8007168:	f1c3 0720 	rsb	r7, r3, #32
 800716c:	fa22 f107 	lsr.w	r1, r2, r7
 8007170:	409c      	lsls	r4, r3
 8007172:	430c      	orrs	r4, r1
 8007174:	42b5      	cmp	r5, r6
 8007176:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800717a:	bf94      	ite	ls
 800717c:	2400      	movls	r4, #0
 800717e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8007182:	409a      	lsls	r2, r3
 8007184:	40fc      	lsrs	r4, r7
 8007186:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800718a:	4322      	orrs	r2, r4
 800718c:	e7e1      	b.n	8007152 <__b2d+0x4a>
 800718e:	ea44 0107 	orr.w	r1, r4, r7
 8007192:	e7de      	b.n	8007152 <__b2d+0x4a>
 8007194:	3ff00000 	.word	0x3ff00000

08007198 <__d2b>:
 8007198:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800719c:	2101      	movs	r1, #1
 800719e:	4690      	mov	r8, r2
 80071a0:	4699      	mov	r9, r3
 80071a2:	9e08      	ldr	r6, [sp, #32]
 80071a4:	f7ff fc1e 	bl	80069e4 <_Balloc>
 80071a8:	4604      	mov	r4, r0
 80071aa:	b930      	cbnz	r0, 80071ba <__d2b+0x22>
 80071ac:	4602      	mov	r2, r0
 80071ae:	f240 310f 	movw	r1, #783	@ 0x30f
 80071b2:	4b23      	ldr	r3, [pc, #140]	@ (8007240 <__d2b+0xa8>)
 80071b4:	4823      	ldr	r0, [pc, #140]	@ (8007244 <__d2b+0xac>)
 80071b6:	f001 f989 	bl	80084cc <__assert_func>
 80071ba:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80071be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071c2:	b10d      	cbz	r5, 80071c8 <__d2b+0x30>
 80071c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071c8:	9301      	str	r3, [sp, #4]
 80071ca:	f1b8 0300 	subs.w	r3, r8, #0
 80071ce:	d024      	beq.n	800721a <__d2b+0x82>
 80071d0:	4668      	mov	r0, sp
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	f7ff fd17 	bl	8006c06 <__lo0bits>
 80071d8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80071dc:	b1d8      	cbz	r0, 8007216 <__d2b+0x7e>
 80071de:	f1c0 0320 	rsb	r3, r0, #32
 80071e2:	fa02 f303 	lsl.w	r3, r2, r3
 80071e6:	430b      	orrs	r3, r1
 80071e8:	40c2      	lsrs	r2, r0
 80071ea:	6163      	str	r3, [r4, #20]
 80071ec:	9201      	str	r2, [sp, #4]
 80071ee:	9b01      	ldr	r3, [sp, #4]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	bf0c      	ite	eq
 80071f4:	2201      	moveq	r2, #1
 80071f6:	2202      	movne	r2, #2
 80071f8:	61a3      	str	r3, [r4, #24]
 80071fa:	6122      	str	r2, [r4, #16]
 80071fc:	b1ad      	cbz	r5, 800722a <__d2b+0x92>
 80071fe:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007202:	4405      	add	r5, r0
 8007204:	6035      	str	r5, [r6, #0]
 8007206:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800720a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800720c:	6018      	str	r0, [r3, #0]
 800720e:	4620      	mov	r0, r4
 8007210:	b002      	add	sp, #8
 8007212:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007216:	6161      	str	r1, [r4, #20]
 8007218:	e7e9      	b.n	80071ee <__d2b+0x56>
 800721a:	a801      	add	r0, sp, #4
 800721c:	f7ff fcf3 	bl	8006c06 <__lo0bits>
 8007220:	9b01      	ldr	r3, [sp, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	6163      	str	r3, [r4, #20]
 8007226:	3020      	adds	r0, #32
 8007228:	e7e7      	b.n	80071fa <__d2b+0x62>
 800722a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800722e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007232:	6030      	str	r0, [r6, #0]
 8007234:	6918      	ldr	r0, [r3, #16]
 8007236:	f7ff fcc7 	bl	8006bc8 <__hi0bits>
 800723a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800723e:	e7e4      	b.n	800720a <__d2b+0x72>
 8007240:	08009937 	.word	0x08009937
 8007244:	08009948 	.word	0x08009948

08007248 <__ratio>:
 8007248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724c:	b085      	sub	sp, #20
 800724e:	e9cd 1000 	strd	r1, r0, [sp]
 8007252:	a902      	add	r1, sp, #8
 8007254:	f7ff ff58 	bl	8007108 <__b2d>
 8007258:	468b      	mov	fp, r1
 800725a:	4606      	mov	r6, r0
 800725c:	460f      	mov	r7, r1
 800725e:	9800      	ldr	r0, [sp, #0]
 8007260:	a903      	add	r1, sp, #12
 8007262:	f7ff ff51 	bl	8007108 <__b2d>
 8007266:	460d      	mov	r5, r1
 8007268:	9b01      	ldr	r3, [sp, #4]
 800726a:	4689      	mov	r9, r1
 800726c:	6919      	ldr	r1, [r3, #16]
 800726e:	9b00      	ldr	r3, [sp, #0]
 8007270:	4604      	mov	r4, r0
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	4630      	mov	r0, r6
 8007276:	1ac9      	subs	r1, r1, r3
 8007278:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800727c:	1a9b      	subs	r3, r3, r2
 800727e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007282:	2b00      	cmp	r3, #0
 8007284:	bfcd      	iteet	gt
 8007286:	463a      	movgt	r2, r7
 8007288:	462a      	movle	r2, r5
 800728a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800728e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007292:	bfd8      	it	le
 8007294:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007298:	464b      	mov	r3, r9
 800729a:	4622      	mov	r2, r4
 800729c:	4659      	mov	r1, fp
 800729e:	f7f9 fa45 	bl	800072c <__aeabi_ddiv>
 80072a2:	b005      	add	sp, #20
 80072a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080072a8 <__copybits>:
 80072a8:	3901      	subs	r1, #1
 80072aa:	b570      	push	{r4, r5, r6, lr}
 80072ac:	1149      	asrs	r1, r1, #5
 80072ae:	6914      	ldr	r4, [r2, #16]
 80072b0:	3101      	adds	r1, #1
 80072b2:	f102 0314 	add.w	r3, r2, #20
 80072b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80072ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80072be:	1f05      	subs	r5, r0, #4
 80072c0:	42a3      	cmp	r3, r4
 80072c2:	d30c      	bcc.n	80072de <__copybits+0x36>
 80072c4:	1aa3      	subs	r3, r4, r2
 80072c6:	3b11      	subs	r3, #17
 80072c8:	f023 0303 	bic.w	r3, r3, #3
 80072cc:	3211      	adds	r2, #17
 80072ce:	42a2      	cmp	r2, r4
 80072d0:	bf88      	it	hi
 80072d2:	2300      	movhi	r3, #0
 80072d4:	4418      	add	r0, r3
 80072d6:	2300      	movs	r3, #0
 80072d8:	4288      	cmp	r0, r1
 80072da:	d305      	bcc.n	80072e8 <__copybits+0x40>
 80072dc:	bd70      	pop	{r4, r5, r6, pc}
 80072de:	f853 6b04 	ldr.w	r6, [r3], #4
 80072e2:	f845 6f04 	str.w	r6, [r5, #4]!
 80072e6:	e7eb      	b.n	80072c0 <__copybits+0x18>
 80072e8:	f840 3b04 	str.w	r3, [r0], #4
 80072ec:	e7f4      	b.n	80072d8 <__copybits+0x30>

080072ee <__any_on>:
 80072ee:	f100 0214 	add.w	r2, r0, #20
 80072f2:	6900      	ldr	r0, [r0, #16]
 80072f4:	114b      	asrs	r3, r1, #5
 80072f6:	4298      	cmp	r0, r3
 80072f8:	b510      	push	{r4, lr}
 80072fa:	db11      	blt.n	8007320 <__any_on+0x32>
 80072fc:	dd0a      	ble.n	8007314 <__any_on+0x26>
 80072fe:	f011 011f 	ands.w	r1, r1, #31
 8007302:	d007      	beq.n	8007314 <__any_on+0x26>
 8007304:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007308:	fa24 f001 	lsr.w	r0, r4, r1
 800730c:	fa00 f101 	lsl.w	r1, r0, r1
 8007310:	428c      	cmp	r4, r1
 8007312:	d10b      	bne.n	800732c <__any_on+0x3e>
 8007314:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007318:	4293      	cmp	r3, r2
 800731a:	d803      	bhi.n	8007324 <__any_on+0x36>
 800731c:	2000      	movs	r0, #0
 800731e:	bd10      	pop	{r4, pc}
 8007320:	4603      	mov	r3, r0
 8007322:	e7f7      	b.n	8007314 <__any_on+0x26>
 8007324:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007328:	2900      	cmp	r1, #0
 800732a:	d0f5      	beq.n	8007318 <__any_on+0x2a>
 800732c:	2001      	movs	r0, #1
 800732e:	e7f6      	b.n	800731e <__any_on+0x30>

08007330 <sulp>:
 8007330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007334:	460f      	mov	r7, r1
 8007336:	4690      	mov	r8, r2
 8007338:	f7ff fec6 	bl	80070c8 <__ulp>
 800733c:	4604      	mov	r4, r0
 800733e:	460d      	mov	r5, r1
 8007340:	f1b8 0f00 	cmp.w	r8, #0
 8007344:	d011      	beq.n	800736a <sulp+0x3a>
 8007346:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800734a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800734e:	2b00      	cmp	r3, #0
 8007350:	dd0b      	ble.n	800736a <sulp+0x3a>
 8007352:	2400      	movs	r4, #0
 8007354:	051b      	lsls	r3, r3, #20
 8007356:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800735a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800735e:	4622      	mov	r2, r4
 8007360:	462b      	mov	r3, r5
 8007362:	f7f9 f8b9 	bl	80004d8 <__aeabi_dmul>
 8007366:	4604      	mov	r4, r0
 8007368:	460d      	mov	r5, r1
 800736a:	4620      	mov	r0, r4
 800736c:	4629      	mov	r1, r5
 800736e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007372:	0000      	movs	r0, r0
 8007374:	0000      	movs	r0, r0
	...

08007378 <_strtod_l>:
 8007378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800737c:	b09f      	sub	sp, #124	@ 0x7c
 800737e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007380:	2200      	movs	r2, #0
 8007382:	460c      	mov	r4, r1
 8007384:	921a      	str	r2, [sp, #104]	@ 0x68
 8007386:	f04f 0a00 	mov.w	sl, #0
 800738a:	f04f 0b00 	mov.w	fp, #0
 800738e:	460a      	mov	r2, r1
 8007390:	9005      	str	r0, [sp, #20]
 8007392:	9219      	str	r2, [sp, #100]	@ 0x64
 8007394:	7811      	ldrb	r1, [r2, #0]
 8007396:	292b      	cmp	r1, #43	@ 0x2b
 8007398:	d048      	beq.n	800742c <_strtod_l+0xb4>
 800739a:	d836      	bhi.n	800740a <_strtod_l+0x92>
 800739c:	290d      	cmp	r1, #13
 800739e:	d830      	bhi.n	8007402 <_strtod_l+0x8a>
 80073a0:	2908      	cmp	r1, #8
 80073a2:	d830      	bhi.n	8007406 <_strtod_l+0x8e>
 80073a4:	2900      	cmp	r1, #0
 80073a6:	d039      	beq.n	800741c <_strtod_l+0xa4>
 80073a8:	2200      	movs	r2, #0
 80073aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80073ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80073ae:	782a      	ldrb	r2, [r5, #0]
 80073b0:	2a30      	cmp	r2, #48	@ 0x30
 80073b2:	f040 80b1 	bne.w	8007518 <_strtod_l+0x1a0>
 80073b6:	786a      	ldrb	r2, [r5, #1]
 80073b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80073bc:	2a58      	cmp	r2, #88	@ 0x58
 80073be:	d16c      	bne.n	800749a <_strtod_l+0x122>
 80073c0:	9302      	str	r3, [sp, #8]
 80073c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073c4:	4a8e      	ldr	r2, [pc, #568]	@ (8007600 <_strtod_l+0x288>)
 80073c6:	9301      	str	r3, [sp, #4]
 80073c8:	ab1a      	add	r3, sp, #104	@ 0x68
 80073ca:	9300      	str	r3, [sp, #0]
 80073cc:	9805      	ldr	r0, [sp, #20]
 80073ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 80073d0:	a919      	add	r1, sp, #100	@ 0x64
 80073d2:	f001 f915 	bl	8008600 <__gethex>
 80073d6:	f010 060f 	ands.w	r6, r0, #15
 80073da:	4604      	mov	r4, r0
 80073dc:	d005      	beq.n	80073ea <_strtod_l+0x72>
 80073de:	2e06      	cmp	r6, #6
 80073e0:	d126      	bne.n	8007430 <_strtod_l+0xb8>
 80073e2:	2300      	movs	r3, #0
 80073e4:	3501      	adds	r5, #1
 80073e6:	9519      	str	r5, [sp, #100]	@ 0x64
 80073e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f040 8584 	bne.w	8007efa <_strtod_l+0xb82>
 80073f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073f4:	b1bb      	cbz	r3, 8007426 <_strtod_l+0xae>
 80073f6:	4650      	mov	r0, sl
 80073f8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80073fc:	b01f      	add	sp, #124	@ 0x7c
 80073fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007402:	2920      	cmp	r1, #32
 8007404:	d1d0      	bne.n	80073a8 <_strtod_l+0x30>
 8007406:	3201      	adds	r2, #1
 8007408:	e7c3      	b.n	8007392 <_strtod_l+0x1a>
 800740a:	292d      	cmp	r1, #45	@ 0x2d
 800740c:	d1cc      	bne.n	80073a8 <_strtod_l+0x30>
 800740e:	2101      	movs	r1, #1
 8007410:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007412:	1c51      	adds	r1, r2, #1
 8007414:	9119      	str	r1, [sp, #100]	@ 0x64
 8007416:	7852      	ldrb	r2, [r2, #1]
 8007418:	2a00      	cmp	r2, #0
 800741a:	d1c7      	bne.n	80073ac <_strtod_l+0x34>
 800741c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800741e:	9419      	str	r4, [sp, #100]	@ 0x64
 8007420:	2b00      	cmp	r3, #0
 8007422:	f040 8568 	bne.w	8007ef6 <_strtod_l+0xb7e>
 8007426:	4650      	mov	r0, sl
 8007428:	4659      	mov	r1, fp
 800742a:	e7e7      	b.n	80073fc <_strtod_l+0x84>
 800742c:	2100      	movs	r1, #0
 800742e:	e7ef      	b.n	8007410 <_strtod_l+0x98>
 8007430:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007432:	b13a      	cbz	r2, 8007444 <_strtod_l+0xcc>
 8007434:	2135      	movs	r1, #53	@ 0x35
 8007436:	a81c      	add	r0, sp, #112	@ 0x70
 8007438:	f7ff ff36 	bl	80072a8 <__copybits>
 800743c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800743e:	9805      	ldr	r0, [sp, #20]
 8007440:	f7ff fb10 	bl	8006a64 <_Bfree>
 8007444:	3e01      	subs	r6, #1
 8007446:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007448:	2e04      	cmp	r6, #4
 800744a:	d806      	bhi.n	800745a <_strtod_l+0xe2>
 800744c:	e8df f006 	tbb	[pc, r6]
 8007450:	201d0314 	.word	0x201d0314
 8007454:	14          	.byte	0x14
 8007455:	00          	.byte	0x00
 8007456:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800745a:	05e1      	lsls	r1, r4, #23
 800745c:	bf48      	it	mi
 800745e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007462:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007466:	0d1b      	lsrs	r3, r3, #20
 8007468:	051b      	lsls	r3, r3, #20
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1bd      	bne.n	80073ea <_strtod_l+0x72>
 800746e:	f7fe fb2b 	bl	8005ac8 <__errno>
 8007472:	2322      	movs	r3, #34	@ 0x22
 8007474:	6003      	str	r3, [r0, #0]
 8007476:	e7b8      	b.n	80073ea <_strtod_l+0x72>
 8007478:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800747c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007480:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007484:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007488:	e7e7      	b.n	800745a <_strtod_l+0xe2>
 800748a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8007604 <_strtod_l+0x28c>
 800748e:	e7e4      	b.n	800745a <_strtod_l+0xe2>
 8007490:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007494:	f04f 3aff 	mov.w	sl, #4294967295
 8007498:	e7df      	b.n	800745a <_strtod_l+0xe2>
 800749a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	9219      	str	r2, [sp, #100]	@ 0x64
 80074a0:	785b      	ldrb	r3, [r3, #1]
 80074a2:	2b30      	cmp	r3, #48	@ 0x30
 80074a4:	d0f9      	beq.n	800749a <_strtod_l+0x122>
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d09f      	beq.n	80073ea <_strtod_l+0x72>
 80074aa:	2301      	movs	r3, #1
 80074ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80074ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074b0:	220a      	movs	r2, #10
 80074b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80074b4:	2300      	movs	r3, #0
 80074b6:	461f      	mov	r7, r3
 80074b8:	9308      	str	r3, [sp, #32]
 80074ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80074bc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80074be:	7805      	ldrb	r5, [r0, #0]
 80074c0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80074c4:	b2d9      	uxtb	r1, r3
 80074c6:	2909      	cmp	r1, #9
 80074c8:	d928      	bls.n	800751c <_strtod_l+0x1a4>
 80074ca:	2201      	movs	r2, #1
 80074cc:	494e      	ldr	r1, [pc, #312]	@ (8007608 <_strtod_l+0x290>)
 80074ce:	f000 ffc7 	bl	8008460 <strncmp>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	d032      	beq.n	800753c <_strtod_l+0x1c4>
 80074d6:	2000      	movs	r0, #0
 80074d8:	462a      	mov	r2, r5
 80074da:	4681      	mov	r9, r0
 80074dc:	463d      	mov	r5, r7
 80074de:	4603      	mov	r3, r0
 80074e0:	2a65      	cmp	r2, #101	@ 0x65
 80074e2:	d001      	beq.n	80074e8 <_strtod_l+0x170>
 80074e4:	2a45      	cmp	r2, #69	@ 0x45
 80074e6:	d114      	bne.n	8007512 <_strtod_l+0x19a>
 80074e8:	b91d      	cbnz	r5, 80074f2 <_strtod_l+0x17a>
 80074ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074ec:	4302      	orrs	r2, r0
 80074ee:	d095      	beq.n	800741c <_strtod_l+0xa4>
 80074f0:	2500      	movs	r5, #0
 80074f2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80074f4:	1c62      	adds	r2, r4, #1
 80074f6:	9219      	str	r2, [sp, #100]	@ 0x64
 80074f8:	7862      	ldrb	r2, [r4, #1]
 80074fa:	2a2b      	cmp	r2, #43	@ 0x2b
 80074fc:	d077      	beq.n	80075ee <_strtod_l+0x276>
 80074fe:	2a2d      	cmp	r2, #45	@ 0x2d
 8007500:	d07b      	beq.n	80075fa <_strtod_l+0x282>
 8007502:	f04f 0c00 	mov.w	ip, #0
 8007506:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800750a:	2909      	cmp	r1, #9
 800750c:	f240 8082 	bls.w	8007614 <_strtod_l+0x29c>
 8007510:	9419      	str	r4, [sp, #100]	@ 0x64
 8007512:	f04f 0800 	mov.w	r8, #0
 8007516:	e0a2      	b.n	800765e <_strtod_l+0x2e6>
 8007518:	2300      	movs	r3, #0
 800751a:	e7c7      	b.n	80074ac <_strtod_l+0x134>
 800751c:	2f08      	cmp	r7, #8
 800751e:	bfd5      	itete	le
 8007520:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007522:	9908      	ldrgt	r1, [sp, #32]
 8007524:	fb02 3301 	mlale	r3, r2, r1, r3
 8007528:	fb02 3301 	mlagt	r3, r2, r1, r3
 800752c:	f100 0001 	add.w	r0, r0, #1
 8007530:	bfd4      	ite	le
 8007532:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007534:	9308      	strgt	r3, [sp, #32]
 8007536:	3701      	adds	r7, #1
 8007538:	9019      	str	r0, [sp, #100]	@ 0x64
 800753a:	e7bf      	b.n	80074bc <_strtod_l+0x144>
 800753c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800753e:	1c5a      	adds	r2, r3, #1
 8007540:	9219      	str	r2, [sp, #100]	@ 0x64
 8007542:	785a      	ldrb	r2, [r3, #1]
 8007544:	b37f      	cbz	r7, 80075a6 <_strtod_l+0x22e>
 8007546:	4681      	mov	r9, r0
 8007548:	463d      	mov	r5, r7
 800754a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800754e:	2b09      	cmp	r3, #9
 8007550:	d912      	bls.n	8007578 <_strtod_l+0x200>
 8007552:	2301      	movs	r3, #1
 8007554:	e7c4      	b.n	80074e0 <_strtod_l+0x168>
 8007556:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007558:	3001      	adds	r0, #1
 800755a:	1c5a      	adds	r2, r3, #1
 800755c:	9219      	str	r2, [sp, #100]	@ 0x64
 800755e:	785a      	ldrb	r2, [r3, #1]
 8007560:	2a30      	cmp	r2, #48	@ 0x30
 8007562:	d0f8      	beq.n	8007556 <_strtod_l+0x1de>
 8007564:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007568:	2b08      	cmp	r3, #8
 800756a:	f200 84cb 	bhi.w	8007f04 <_strtod_l+0xb8c>
 800756e:	4681      	mov	r9, r0
 8007570:	2000      	movs	r0, #0
 8007572:	4605      	mov	r5, r0
 8007574:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007576:	930c      	str	r3, [sp, #48]	@ 0x30
 8007578:	3a30      	subs	r2, #48	@ 0x30
 800757a:	f100 0301 	add.w	r3, r0, #1
 800757e:	d02a      	beq.n	80075d6 <_strtod_l+0x25e>
 8007580:	4499      	add	r9, r3
 8007582:	210a      	movs	r1, #10
 8007584:	462b      	mov	r3, r5
 8007586:	eb00 0c05 	add.w	ip, r0, r5
 800758a:	4563      	cmp	r3, ip
 800758c:	d10d      	bne.n	80075aa <_strtod_l+0x232>
 800758e:	1c69      	adds	r1, r5, #1
 8007590:	4401      	add	r1, r0
 8007592:	4428      	add	r0, r5
 8007594:	2808      	cmp	r0, #8
 8007596:	dc16      	bgt.n	80075c6 <_strtod_l+0x24e>
 8007598:	230a      	movs	r3, #10
 800759a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800759c:	fb03 2300 	mla	r3, r3, r0, r2
 80075a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80075a2:	2300      	movs	r3, #0
 80075a4:	e018      	b.n	80075d8 <_strtod_l+0x260>
 80075a6:	4638      	mov	r0, r7
 80075a8:	e7da      	b.n	8007560 <_strtod_l+0x1e8>
 80075aa:	2b08      	cmp	r3, #8
 80075ac:	f103 0301 	add.w	r3, r3, #1
 80075b0:	dc03      	bgt.n	80075ba <_strtod_l+0x242>
 80075b2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80075b4:	434e      	muls	r6, r1
 80075b6:	960a      	str	r6, [sp, #40]	@ 0x28
 80075b8:	e7e7      	b.n	800758a <_strtod_l+0x212>
 80075ba:	2b10      	cmp	r3, #16
 80075bc:	bfde      	ittt	le
 80075be:	9e08      	ldrle	r6, [sp, #32]
 80075c0:	434e      	mulle	r6, r1
 80075c2:	9608      	strle	r6, [sp, #32]
 80075c4:	e7e1      	b.n	800758a <_strtod_l+0x212>
 80075c6:	280f      	cmp	r0, #15
 80075c8:	dceb      	bgt.n	80075a2 <_strtod_l+0x22a>
 80075ca:	230a      	movs	r3, #10
 80075cc:	9808      	ldr	r0, [sp, #32]
 80075ce:	fb03 2300 	mla	r3, r3, r0, r2
 80075d2:	9308      	str	r3, [sp, #32]
 80075d4:	e7e5      	b.n	80075a2 <_strtod_l+0x22a>
 80075d6:	4629      	mov	r1, r5
 80075d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80075da:	460d      	mov	r5, r1
 80075dc:	1c50      	adds	r0, r2, #1
 80075de:	9019      	str	r0, [sp, #100]	@ 0x64
 80075e0:	7852      	ldrb	r2, [r2, #1]
 80075e2:	4618      	mov	r0, r3
 80075e4:	e7b1      	b.n	800754a <_strtod_l+0x1d2>
 80075e6:	f04f 0900 	mov.w	r9, #0
 80075ea:	2301      	movs	r3, #1
 80075ec:	e77d      	b.n	80074ea <_strtod_l+0x172>
 80075ee:	f04f 0c00 	mov.w	ip, #0
 80075f2:	1ca2      	adds	r2, r4, #2
 80075f4:	9219      	str	r2, [sp, #100]	@ 0x64
 80075f6:	78a2      	ldrb	r2, [r4, #2]
 80075f8:	e785      	b.n	8007506 <_strtod_l+0x18e>
 80075fa:	f04f 0c01 	mov.w	ip, #1
 80075fe:	e7f8      	b.n	80075f2 <_strtod_l+0x27a>
 8007600:	08009ab8 	.word	0x08009ab8
 8007604:	7ff00000 	.word	0x7ff00000
 8007608:	08009aa0 	.word	0x08009aa0
 800760c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800760e:	1c51      	adds	r1, r2, #1
 8007610:	9119      	str	r1, [sp, #100]	@ 0x64
 8007612:	7852      	ldrb	r2, [r2, #1]
 8007614:	2a30      	cmp	r2, #48	@ 0x30
 8007616:	d0f9      	beq.n	800760c <_strtod_l+0x294>
 8007618:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800761c:	2908      	cmp	r1, #8
 800761e:	f63f af78 	bhi.w	8007512 <_strtod_l+0x19a>
 8007622:	f04f 080a 	mov.w	r8, #10
 8007626:	3a30      	subs	r2, #48	@ 0x30
 8007628:	920e      	str	r2, [sp, #56]	@ 0x38
 800762a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800762c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800762e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007630:	1c56      	adds	r6, r2, #1
 8007632:	9619      	str	r6, [sp, #100]	@ 0x64
 8007634:	7852      	ldrb	r2, [r2, #1]
 8007636:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800763a:	f1be 0f09 	cmp.w	lr, #9
 800763e:	d939      	bls.n	80076b4 <_strtod_l+0x33c>
 8007640:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007642:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007646:	1a76      	subs	r6, r6, r1
 8007648:	2e08      	cmp	r6, #8
 800764a:	dc03      	bgt.n	8007654 <_strtod_l+0x2dc>
 800764c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800764e:	4588      	cmp	r8, r1
 8007650:	bfa8      	it	ge
 8007652:	4688      	movge	r8, r1
 8007654:	f1bc 0f00 	cmp.w	ip, #0
 8007658:	d001      	beq.n	800765e <_strtod_l+0x2e6>
 800765a:	f1c8 0800 	rsb	r8, r8, #0
 800765e:	2d00      	cmp	r5, #0
 8007660:	d14e      	bne.n	8007700 <_strtod_l+0x388>
 8007662:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007664:	4308      	orrs	r0, r1
 8007666:	f47f aec0 	bne.w	80073ea <_strtod_l+0x72>
 800766a:	2b00      	cmp	r3, #0
 800766c:	f47f aed6 	bne.w	800741c <_strtod_l+0xa4>
 8007670:	2a69      	cmp	r2, #105	@ 0x69
 8007672:	d028      	beq.n	80076c6 <_strtod_l+0x34e>
 8007674:	dc25      	bgt.n	80076c2 <_strtod_l+0x34a>
 8007676:	2a49      	cmp	r2, #73	@ 0x49
 8007678:	d025      	beq.n	80076c6 <_strtod_l+0x34e>
 800767a:	2a4e      	cmp	r2, #78	@ 0x4e
 800767c:	f47f aece 	bne.w	800741c <_strtod_l+0xa4>
 8007680:	499a      	ldr	r1, [pc, #616]	@ (80078ec <_strtod_l+0x574>)
 8007682:	a819      	add	r0, sp, #100	@ 0x64
 8007684:	f001 f9de 	bl	8008a44 <__match>
 8007688:	2800      	cmp	r0, #0
 800768a:	f43f aec7 	beq.w	800741c <_strtod_l+0xa4>
 800768e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	2b28      	cmp	r3, #40	@ 0x28
 8007694:	d12e      	bne.n	80076f4 <_strtod_l+0x37c>
 8007696:	4996      	ldr	r1, [pc, #600]	@ (80078f0 <_strtod_l+0x578>)
 8007698:	aa1c      	add	r2, sp, #112	@ 0x70
 800769a:	a819      	add	r0, sp, #100	@ 0x64
 800769c:	f001 f9e6 	bl	8008a6c <__hexnan>
 80076a0:	2805      	cmp	r0, #5
 80076a2:	d127      	bne.n	80076f4 <_strtod_l+0x37c>
 80076a4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80076a6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80076aa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80076ae:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80076b2:	e69a      	b.n	80073ea <_strtod_l+0x72>
 80076b4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80076b6:	fb08 2101 	mla	r1, r8, r1, r2
 80076ba:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80076be:	920e      	str	r2, [sp, #56]	@ 0x38
 80076c0:	e7b5      	b.n	800762e <_strtod_l+0x2b6>
 80076c2:	2a6e      	cmp	r2, #110	@ 0x6e
 80076c4:	e7da      	b.n	800767c <_strtod_l+0x304>
 80076c6:	498b      	ldr	r1, [pc, #556]	@ (80078f4 <_strtod_l+0x57c>)
 80076c8:	a819      	add	r0, sp, #100	@ 0x64
 80076ca:	f001 f9bb 	bl	8008a44 <__match>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	f43f aea4 	beq.w	800741c <_strtod_l+0xa4>
 80076d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076d6:	4988      	ldr	r1, [pc, #544]	@ (80078f8 <_strtod_l+0x580>)
 80076d8:	3b01      	subs	r3, #1
 80076da:	a819      	add	r0, sp, #100	@ 0x64
 80076dc:	9319      	str	r3, [sp, #100]	@ 0x64
 80076de:	f001 f9b1 	bl	8008a44 <__match>
 80076e2:	b910      	cbnz	r0, 80076ea <_strtod_l+0x372>
 80076e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076e6:	3301      	adds	r3, #1
 80076e8:	9319      	str	r3, [sp, #100]	@ 0x64
 80076ea:	f04f 0a00 	mov.w	sl, #0
 80076ee:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80078fc <_strtod_l+0x584>
 80076f2:	e67a      	b.n	80073ea <_strtod_l+0x72>
 80076f4:	4882      	ldr	r0, [pc, #520]	@ (8007900 <_strtod_l+0x588>)
 80076f6:	f000 fee3 	bl	80084c0 <nan>
 80076fa:	4682      	mov	sl, r0
 80076fc:	468b      	mov	fp, r1
 80076fe:	e674      	b.n	80073ea <_strtod_l+0x72>
 8007700:	eba8 0309 	sub.w	r3, r8, r9
 8007704:	2f00      	cmp	r7, #0
 8007706:	bf08      	it	eq
 8007708:	462f      	moveq	r7, r5
 800770a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800770c:	2d10      	cmp	r5, #16
 800770e:	462c      	mov	r4, r5
 8007710:	9309      	str	r3, [sp, #36]	@ 0x24
 8007712:	bfa8      	it	ge
 8007714:	2410      	movge	r4, #16
 8007716:	f7f8 fe65 	bl	80003e4 <__aeabi_ui2d>
 800771a:	2d09      	cmp	r5, #9
 800771c:	4682      	mov	sl, r0
 800771e:	468b      	mov	fp, r1
 8007720:	dc11      	bgt.n	8007746 <_strtod_l+0x3ce>
 8007722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007724:	2b00      	cmp	r3, #0
 8007726:	f43f ae60 	beq.w	80073ea <_strtod_l+0x72>
 800772a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800772c:	dd76      	ble.n	800781c <_strtod_l+0x4a4>
 800772e:	2b16      	cmp	r3, #22
 8007730:	dc5d      	bgt.n	80077ee <_strtod_l+0x476>
 8007732:	4974      	ldr	r1, [pc, #464]	@ (8007904 <_strtod_l+0x58c>)
 8007734:	4652      	mov	r2, sl
 8007736:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800773a:	465b      	mov	r3, fp
 800773c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007740:	f7f8 feca 	bl	80004d8 <__aeabi_dmul>
 8007744:	e7d9      	b.n	80076fa <_strtod_l+0x382>
 8007746:	4b6f      	ldr	r3, [pc, #444]	@ (8007904 <_strtod_l+0x58c>)
 8007748:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800774c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007750:	f7f8 fec2 	bl	80004d8 <__aeabi_dmul>
 8007754:	4682      	mov	sl, r0
 8007756:	9808      	ldr	r0, [sp, #32]
 8007758:	468b      	mov	fp, r1
 800775a:	f7f8 fe43 	bl	80003e4 <__aeabi_ui2d>
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	4650      	mov	r0, sl
 8007764:	4659      	mov	r1, fp
 8007766:	f7f8 fd01 	bl	800016c <__adddf3>
 800776a:	2d0f      	cmp	r5, #15
 800776c:	4682      	mov	sl, r0
 800776e:	468b      	mov	fp, r1
 8007770:	ddd7      	ble.n	8007722 <_strtod_l+0x3aa>
 8007772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007774:	1b2c      	subs	r4, r5, r4
 8007776:	441c      	add	r4, r3
 8007778:	2c00      	cmp	r4, #0
 800777a:	f340 8096 	ble.w	80078aa <_strtod_l+0x532>
 800777e:	f014 030f 	ands.w	r3, r4, #15
 8007782:	d00a      	beq.n	800779a <_strtod_l+0x422>
 8007784:	495f      	ldr	r1, [pc, #380]	@ (8007904 <_strtod_l+0x58c>)
 8007786:	4652      	mov	r2, sl
 8007788:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800778c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007790:	465b      	mov	r3, fp
 8007792:	f7f8 fea1 	bl	80004d8 <__aeabi_dmul>
 8007796:	4682      	mov	sl, r0
 8007798:	468b      	mov	fp, r1
 800779a:	f034 040f 	bics.w	r4, r4, #15
 800779e:	d073      	beq.n	8007888 <_strtod_l+0x510>
 80077a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80077a4:	dd48      	ble.n	8007838 <_strtod_l+0x4c0>
 80077a6:	2400      	movs	r4, #0
 80077a8:	46a0      	mov	r8, r4
 80077aa:	46a1      	mov	r9, r4
 80077ac:	940a      	str	r4, [sp, #40]	@ 0x28
 80077ae:	2322      	movs	r3, #34	@ 0x22
 80077b0:	f04f 0a00 	mov.w	sl, #0
 80077b4:	9a05      	ldr	r2, [sp, #20]
 80077b6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80078fc <_strtod_l+0x584>
 80077ba:	6013      	str	r3, [r2, #0]
 80077bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f43f ae13 	beq.w	80073ea <_strtod_l+0x72>
 80077c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80077c6:	9805      	ldr	r0, [sp, #20]
 80077c8:	f7ff f94c 	bl	8006a64 <_Bfree>
 80077cc:	4649      	mov	r1, r9
 80077ce:	9805      	ldr	r0, [sp, #20]
 80077d0:	f7ff f948 	bl	8006a64 <_Bfree>
 80077d4:	4641      	mov	r1, r8
 80077d6:	9805      	ldr	r0, [sp, #20]
 80077d8:	f7ff f944 	bl	8006a64 <_Bfree>
 80077dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80077de:	9805      	ldr	r0, [sp, #20]
 80077e0:	f7ff f940 	bl	8006a64 <_Bfree>
 80077e4:	4621      	mov	r1, r4
 80077e6:	9805      	ldr	r0, [sp, #20]
 80077e8:	f7ff f93c 	bl	8006a64 <_Bfree>
 80077ec:	e5fd      	b.n	80073ea <_strtod_l+0x72>
 80077ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80077f4:	4293      	cmp	r3, r2
 80077f6:	dbbc      	blt.n	8007772 <_strtod_l+0x3fa>
 80077f8:	4c42      	ldr	r4, [pc, #264]	@ (8007904 <_strtod_l+0x58c>)
 80077fa:	f1c5 050f 	rsb	r5, r5, #15
 80077fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007802:	4652      	mov	r2, sl
 8007804:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007808:	465b      	mov	r3, fp
 800780a:	f7f8 fe65 	bl	80004d8 <__aeabi_dmul>
 800780e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007810:	1b5d      	subs	r5, r3, r5
 8007812:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007816:	e9d4 2300 	ldrd	r2, r3, [r4]
 800781a:	e791      	b.n	8007740 <_strtod_l+0x3c8>
 800781c:	3316      	adds	r3, #22
 800781e:	dba8      	blt.n	8007772 <_strtod_l+0x3fa>
 8007820:	4b38      	ldr	r3, [pc, #224]	@ (8007904 <_strtod_l+0x58c>)
 8007822:	eba9 0808 	sub.w	r8, r9, r8
 8007826:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800782a:	4650      	mov	r0, sl
 800782c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007830:	4659      	mov	r1, fp
 8007832:	f7f8 ff7b 	bl	800072c <__aeabi_ddiv>
 8007836:	e760      	b.n	80076fa <_strtod_l+0x382>
 8007838:	4b33      	ldr	r3, [pc, #204]	@ (8007908 <_strtod_l+0x590>)
 800783a:	4650      	mov	r0, sl
 800783c:	9308      	str	r3, [sp, #32]
 800783e:	2300      	movs	r3, #0
 8007840:	4659      	mov	r1, fp
 8007842:	461e      	mov	r6, r3
 8007844:	1124      	asrs	r4, r4, #4
 8007846:	2c01      	cmp	r4, #1
 8007848:	dc21      	bgt.n	800788e <_strtod_l+0x516>
 800784a:	b10b      	cbz	r3, 8007850 <_strtod_l+0x4d8>
 800784c:	4682      	mov	sl, r0
 800784e:	468b      	mov	fp, r1
 8007850:	492d      	ldr	r1, [pc, #180]	@ (8007908 <_strtod_l+0x590>)
 8007852:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007856:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800785a:	4652      	mov	r2, sl
 800785c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007860:	465b      	mov	r3, fp
 8007862:	f7f8 fe39 	bl	80004d8 <__aeabi_dmul>
 8007866:	4b25      	ldr	r3, [pc, #148]	@ (80078fc <_strtod_l+0x584>)
 8007868:	460a      	mov	r2, r1
 800786a:	400b      	ands	r3, r1
 800786c:	4927      	ldr	r1, [pc, #156]	@ (800790c <_strtod_l+0x594>)
 800786e:	4682      	mov	sl, r0
 8007870:	428b      	cmp	r3, r1
 8007872:	d898      	bhi.n	80077a6 <_strtod_l+0x42e>
 8007874:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007878:	428b      	cmp	r3, r1
 800787a:	bf86      	itte	hi
 800787c:	f04f 3aff 	movhi.w	sl, #4294967295
 8007880:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8007910 <_strtod_l+0x598>
 8007884:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007888:	2300      	movs	r3, #0
 800788a:	9308      	str	r3, [sp, #32]
 800788c:	e07a      	b.n	8007984 <_strtod_l+0x60c>
 800788e:	07e2      	lsls	r2, r4, #31
 8007890:	d505      	bpl.n	800789e <_strtod_l+0x526>
 8007892:	9b08      	ldr	r3, [sp, #32]
 8007894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007898:	f7f8 fe1e 	bl	80004d8 <__aeabi_dmul>
 800789c:	2301      	movs	r3, #1
 800789e:	9a08      	ldr	r2, [sp, #32]
 80078a0:	3601      	adds	r6, #1
 80078a2:	3208      	adds	r2, #8
 80078a4:	1064      	asrs	r4, r4, #1
 80078a6:	9208      	str	r2, [sp, #32]
 80078a8:	e7cd      	b.n	8007846 <_strtod_l+0x4ce>
 80078aa:	d0ed      	beq.n	8007888 <_strtod_l+0x510>
 80078ac:	4264      	negs	r4, r4
 80078ae:	f014 020f 	ands.w	r2, r4, #15
 80078b2:	d00a      	beq.n	80078ca <_strtod_l+0x552>
 80078b4:	4b13      	ldr	r3, [pc, #76]	@ (8007904 <_strtod_l+0x58c>)
 80078b6:	4650      	mov	r0, sl
 80078b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078bc:	4659      	mov	r1, fp
 80078be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c2:	f7f8 ff33 	bl	800072c <__aeabi_ddiv>
 80078c6:	4682      	mov	sl, r0
 80078c8:	468b      	mov	fp, r1
 80078ca:	1124      	asrs	r4, r4, #4
 80078cc:	d0dc      	beq.n	8007888 <_strtod_l+0x510>
 80078ce:	2c1f      	cmp	r4, #31
 80078d0:	dd20      	ble.n	8007914 <_strtod_l+0x59c>
 80078d2:	2400      	movs	r4, #0
 80078d4:	46a0      	mov	r8, r4
 80078d6:	46a1      	mov	r9, r4
 80078d8:	940a      	str	r4, [sp, #40]	@ 0x28
 80078da:	2322      	movs	r3, #34	@ 0x22
 80078dc:	9a05      	ldr	r2, [sp, #20]
 80078de:	f04f 0a00 	mov.w	sl, #0
 80078e2:	f04f 0b00 	mov.w	fp, #0
 80078e6:	6013      	str	r3, [r2, #0]
 80078e8:	e768      	b.n	80077bc <_strtod_l+0x444>
 80078ea:	bf00      	nop
 80078ec:	0800988f 	.word	0x0800988f
 80078f0:	08009aa4 	.word	0x08009aa4
 80078f4:	08009887 	.word	0x08009887
 80078f8:	080098be 	.word	0x080098be
 80078fc:	7ff00000 	.word	0x7ff00000
 8007900:	08009c4d 	.word	0x08009c4d
 8007904:	080099d8 	.word	0x080099d8
 8007908:	080099b0 	.word	0x080099b0
 800790c:	7ca00000 	.word	0x7ca00000
 8007910:	7fefffff 	.word	0x7fefffff
 8007914:	f014 0310 	ands.w	r3, r4, #16
 8007918:	bf18      	it	ne
 800791a:	236a      	movne	r3, #106	@ 0x6a
 800791c:	4650      	mov	r0, sl
 800791e:	9308      	str	r3, [sp, #32]
 8007920:	4659      	mov	r1, fp
 8007922:	2300      	movs	r3, #0
 8007924:	4ea9      	ldr	r6, [pc, #676]	@ (8007bcc <_strtod_l+0x854>)
 8007926:	07e2      	lsls	r2, r4, #31
 8007928:	d504      	bpl.n	8007934 <_strtod_l+0x5bc>
 800792a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800792e:	f7f8 fdd3 	bl	80004d8 <__aeabi_dmul>
 8007932:	2301      	movs	r3, #1
 8007934:	1064      	asrs	r4, r4, #1
 8007936:	f106 0608 	add.w	r6, r6, #8
 800793a:	d1f4      	bne.n	8007926 <_strtod_l+0x5ae>
 800793c:	b10b      	cbz	r3, 8007942 <_strtod_l+0x5ca>
 800793e:	4682      	mov	sl, r0
 8007940:	468b      	mov	fp, r1
 8007942:	9b08      	ldr	r3, [sp, #32]
 8007944:	b1b3      	cbz	r3, 8007974 <_strtod_l+0x5fc>
 8007946:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800794a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800794e:	2b00      	cmp	r3, #0
 8007950:	4659      	mov	r1, fp
 8007952:	dd0f      	ble.n	8007974 <_strtod_l+0x5fc>
 8007954:	2b1f      	cmp	r3, #31
 8007956:	dd57      	ble.n	8007a08 <_strtod_l+0x690>
 8007958:	2b34      	cmp	r3, #52	@ 0x34
 800795a:	bfd8      	it	le
 800795c:	f04f 33ff 	movle.w	r3, #4294967295
 8007960:	f04f 0a00 	mov.w	sl, #0
 8007964:	bfcf      	iteee	gt
 8007966:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800796a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800796e:	4093      	lslle	r3, r2
 8007970:	ea03 0b01 	andle.w	fp, r3, r1
 8007974:	2200      	movs	r2, #0
 8007976:	2300      	movs	r3, #0
 8007978:	4650      	mov	r0, sl
 800797a:	4659      	mov	r1, fp
 800797c:	f7f9 f814 	bl	80009a8 <__aeabi_dcmpeq>
 8007980:	2800      	cmp	r0, #0
 8007982:	d1a6      	bne.n	80078d2 <_strtod_l+0x55a>
 8007984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007986:	463a      	mov	r2, r7
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800798c:	462b      	mov	r3, r5
 800798e:	9805      	ldr	r0, [sp, #20]
 8007990:	f7ff f8d0 	bl	8006b34 <__s2b>
 8007994:	900a      	str	r0, [sp, #40]	@ 0x28
 8007996:	2800      	cmp	r0, #0
 8007998:	f43f af05 	beq.w	80077a6 <_strtod_l+0x42e>
 800799c:	2400      	movs	r4, #0
 800799e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079a0:	eba9 0308 	sub.w	r3, r9, r8
 80079a4:	2a00      	cmp	r2, #0
 80079a6:	bfa8      	it	ge
 80079a8:	2300      	movge	r3, #0
 80079aa:	46a0      	mov	r8, r4
 80079ac:	9312      	str	r3, [sp, #72]	@ 0x48
 80079ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80079b2:	9316      	str	r3, [sp, #88]	@ 0x58
 80079b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079b6:	9805      	ldr	r0, [sp, #20]
 80079b8:	6859      	ldr	r1, [r3, #4]
 80079ba:	f7ff f813 	bl	80069e4 <_Balloc>
 80079be:	4681      	mov	r9, r0
 80079c0:	2800      	cmp	r0, #0
 80079c2:	f43f aef4 	beq.w	80077ae <_strtod_l+0x436>
 80079c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079c8:	300c      	adds	r0, #12
 80079ca:	691a      	ldr	r2, [r3, #16]
 80079cc:	f103 010c 	add.w	r1, r3, #12
 80079d0:	3202      	adds	r2, #2
 80079d2:	0092      	lsls	r2, r2, #2
 80079d4:	f000 fd66 	bl	80084a4 <memcpy>
 80079d8:	ab1c      	add	r3, sp, #112	@ 0x70
 80079da:	9301      	str	r3, [sp, #4]
 80079dc:	ab1b      	add	r3, sp, #108	@ 0x6c
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	4652      	mov	r2, sl
 80079e2:	465b      	mov	r3, fp
 80079e4:	9805      	ldr	r0, [sp, #20]
 80079e6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80079ea:	f7ff fbd5 	bl	8007198 <__d2b>
 80079ee:	901a      	str	r0, [sp, #104]	@ 0x68
 80079f0:	2800      	cmp	r0, #0
 80079f2:	f43f aedc 	beq.w	80077ae <_strtod_l+0x436>
 80079f6:	2101      	movs	r1, #1
 80079f8:	9805      	ldr	r0, [sp, #20]
 80079fa:	f7ff f931 	bl	8006c60 <__i2b>
 80079fe:	4680      	mov	r8, r0
 8007a00:	b948      	cbnz	r0, 8007a16 <_strtod_l+0x69e>
 8007a02:	f04f 0800 	mov.w	r8, #0
 8007a06:	e6d2      	b.n	80077ae <_strtod_l+0x436>
 8007a08:	f04f 32ff 	mov.w	r2, #4294967295
 8007a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a10:	ea03 0a0a 	and.w	sl, r3, sl
 8007a14:	e7ae      	b.n	8007974 <_strtod_l+0x5fc>
 8007a16:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007a18:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007a1a:	2d00      	cmp	r5, #0
 8007a1c:	bfab      	itete	ge
 8007a1e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007a20:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007a22:	18ef      	addge	r7, r5, r3
 8007a24:	1b5e      	sublt	r6, r3, r5
 8007a26:	9b08      	ldr	r3, [sp, #32]
 8007a28:	bfa8      	it	ge
 8007a2a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007a2c:	eba5 0503 	sub.w	r5, r5, r3
 8007a30:	4415      	add	r5, r2
 8007a32:	4b67      	ldr	r3, [pc, #412]	@ (8007bd0 <_strtod_l+0x858>)
 8007a34:	f105 35ff 	add.w	r5, r5, #4294967295
 8007a38:	bfb8      	it	lt
 8007a3a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007a3c:	429d      	cmp	r5, r3
 8007a3e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007a42:	da50      	bge.n	8007ae6 <_strtod_l+0x76e>
 8007a44:	1b5b      	subs	r3, r3, r5
 8007a46:	2b1f      	cmp	r3, #31
 8007a48:	f04f 0101 	mov.w	r1, #1
 8007a4c:	eba2 0203 	sub.w	r2, r2, r3
 8007a50:	dc3d      	bgt.n	8007ace <_strtod_l+0x756>
 8007a52:	fa01 f303 	lsl.w	r3, r1, r3
 8007a56:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007a58:	2300      	movs	r3, #0
 8007a5a:	9310      	str	r3, [sp, #64]	@ 0x40
 8007a5c:	18bd      	adds	r5, r7, r2
 8007a5e:	9b08      	ldr	r3, [sp, #32]
 8007a60:	42af      	cmp	r7, r5
 8007a62:	4416      	add	r6, r2
 8007a64:	441e      	add	r6, r3
 8007a66:	463b      	mov	r3, r7
 8007a68:	bfa8      	it	ge
 8007a6a:	462b      	movge	r3, r5
 8007a6c:	42b3      	cmp	r3, r6
 8007a6e:	bfa8      	it	ge
 8007a70:	4633      	movge	r3, r6
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	bfc2      	ittt	gt
 8007a76:	1aed      	subgt	r5, r5, r3
 8007a78:	1af6      	subgt	r6, r6, r3
 8007a7a:	1aff      	subgt	r7, r7, r3
 8007a7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	dd16      	ble.n	8007ab0 <_strtod_l+0x738>
 8007a82:	4641      	mov	r1, r8
 8007a84:	461a      	mov	r2, r3
 8007a86:	9805      	ldr	r0, [sp, #20]
 8007a88:	f7ff f9a8 	bl	8006ddc <__pow5mult>
 8007a8c:	4680      	mov	r8, r0
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d0b7      	beq.n	8007a02 <_strtod_l+0x68a>
 8007a92:	4601      	mov	r1, r0
 8007a94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007a96:	9805      	ldr	r0, [sp, #20]
 8007a98:	f7ff f8f8 	bl	8006c8c <__multiply>
 8007a9c:	900e      	str	r0, [sp, #56]	@ 0x38
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	f43f ae85 	beq.w	80077ae <_strtod_l+0x436>
 8007aa4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007aa6:	9805      	ldr	r0, [sp, #20]
 8007aa8:	f7fe ffdc 	bl	8006a64 <_Bfree>
 8007aac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007aae:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ab0:	2d00      	cmp	r5, #0
 8007ab2:	dc1d      	bgt.n	8007af0 <_strtod_l+0x778>
 8007ab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	dd23      	ble.n	8007b02 <_strtod_l+0x78a>
 8007aba:	4649      	mov	r1, r9
 8007abc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007abe:	9805      	ldr	r0, [sp, #20]
 8007ac0:	f7ff f98c 	bl	8006ddc <__pow5mult>
 8007ac4:	4681      	mov	r9, r0
 8007ac6:	b9e0      	cbnz	r0, 8007b02 <_strtod_l+0x78a>
 8007ac8:	f04f 0900 	mov.w	r9, #0
 8007acc:	e66f      	b.n	80077ae <_strtod_l+0x436>
 8007ace:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007ad2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007ad6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007ada:	35e2      	adds	r5, #226	@ 0xe2
 8007adc:	fa01 f305 	lsl.w	r3, r1, r5
 8007ae0:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ae2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007ae4:	e7ba      	b.n	8007a5c <_strtod_l+0x6e4>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	9310      	str	r3, [sp, #64]	@ 0x40
 8007aea:	2301      	movs	r3, #1
 8007aec:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007aee:	e7b5      	b.n	8007a5c <_strtod_l+0x6e4>
 8007af0:	462a      	mov	r2, r5
 8007af2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007af4:	9805      	ldr	r0, [sp, #20]
 8007af6:	f7ff f9cb 	bl	8006e90 <__lshift>
 8007afa:	901a      	str	r0, [sp, #104]	@ 0x68
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d1d9      	bne.n	8007ab4 <_strtod_l+0x73c>
 8007b00:	e655      	b.n	80077ae <_strtod_l+0x436>
 8007b02:	2e00      	cmp	r6, #0
 8007b04:	dd07      	ble.n	8007b16 <_strtod_l+0x79e>
 8007b06:	4649      	mov	r1, r9
 8007b08:	4632      	mov	r2, r6
 8007b0a:	9805      	ldr	r0, [sp, #20]
 8007b0c:	f7ff f9c0 	bl	8006e90 <__lshift>
 8007b10:	4681      	mov	r9, r0
 8007b12:	2800      	cmp	r0, #0
 8007b14:	d0d8      	beq.n	8007ac8 <_strtod_l+0x750>
 8007b16:	2f00      	cmp	r7, #0
 8007b18:	dd08      	ble.n	8007b2c <_strtod_l+0x7b4>
 8007b1a:	4641      	mov	r1, r8
 8007b1c:	463a      	mov	r2, r7
 8007b1e:	9805      	ldr	r0, [sp, #20]
 8007b20:	f7ff f9b6 	bl	8006e90 <__lshift>
 8007b24:	4680      	mov	r8, r0
 8007b26:	2800      	cmp	r0, #0
 8007b28:	f43f ae41 	beq.w	80077ae <_strtod_l+0x436>
 8007b2c:	464a      	mov	r2, r9
 8007b2e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b30:	9805      	ldr	r0, [sp, #20]
 8007b32:	f7ff fa35 	bl	8006fa0 <__mdiff>
 8007b36:	4604      	mov	r4, r0
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	f43f ae38 	beq.w	80077ae <_strtod_l+0x436>
 8007b3e:	68c3      	ldr	r3, [r0, #12]
 8007b40:	4641      	mov	r1, r8
 8007b42:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b44:	2300      	movs	r3, #0
 8007b46:	60c3      	str	r3, [r0, #12]
 8007b48:	f7ff fa0e 	bl	8006f68 <__mcmp>
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	da45      	bge.n	8007bdc <_strtod_l+0x864>
 8007b50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b52:	ea53 030a 	orrs.w	r3, r3, sl
 8007b56:	d16b      	bne.n	8007c30 <_strtod_l+0x8b8>
 8007b58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d167      	bne.n	8007c30 <_strtod_l+0x8b8>
 8007b60:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b64:	0d1b      	lsrs	r3, r3, #20
 8007b66:	051b      	lsls	r3, r3, #20
 8007b68:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007b6c:	d960      	bls.n	8007c30 <_strtod_l+0x8b8>
 8007b6e:	6963      	ldr	r3, [r4, #20]
 8007b70:	b913      	cbnz	r3, 8007b78 <_strtod_l+0x800>
 8007b72:	6923      	ldr	r3, [r4, #16]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	dd5b      	ble.n	8007c30 <_strtod_l+0x8b8>
 8007b78:	4621      	mov	r1, r4
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	9805      	ldr	r0, [sp, #20]
 8007b7e:	f7ff f987 	bl	8006e90 <__lshift>
 8007b82:	4641      	mov	r1, r8
 8007b84:	4604      	mov	r4, r0
 8007b86:	f7ff f9ef 	bl	8006f68 <__mcmp>
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	dd50      	ble.n	8007c30 <_strtod_l+0x8b8>
 8007b8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b92:	9a08      	ldr	r2, [sp, #32]
 8007b94:	0d1b      	lsrs	r3, r3, #20
 8007b96:	051b      	lsls	r3, r3, #20
 8007b98:	2a00      	cmp	r2, #0
 8007b9a:	d06a      	beq.n	8007c72 <_strtod_l+0x8fa>
 8007b9c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007ba0:	d867      	bhi.n	8007c72 <_strtod_l+0x8fa>
 8007ba2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007ba6:	f67f ae98 	bls.w	80078da <_strtod_l+0x562>
 8007baa:	4650      	mov	r0, sl
 8007bac:	4659      	mov	r1, fp
 8007bae:	4b09      	ldr	r3, [pc, #36]	@ (8007bd4 <_strtod_l+0x85c>)
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f7f8 fc91 	bl	80004d8 <__aeabi_dmul>
 8007bb6:	4b08      	ldr	r3, [pc, #32]	@ (8007bd8 <_strtod_l+0x860>)
 8007bb8:	4682      	mov	sl, r0
 8007bba:	400b      	ands	r3, r1
 8007bbc:	468b      	mov	fp, r1
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f47f ae00 	bne.w	80077c4 <_strtod_l+0x44c>
 8007bc4:	2322      	movs	r3, #34	@ 0x22
 8007bc6:	9a05      	ldr	r2, [sp, #20]
 8007bc8:	6013      	str	r3, [r2, #0]
 8007bca:	e5fb      	b.n	80077c4 <_strtod_l+0x44c>
 8007bcc:	08009ad0 	.word	0x08009ad0
 8007bd0:	fffffc02 	.word	0xfffffc02
 8007bd4:	39500000 	.word	0x39500000
 8007bd8:	7ff00000 	.word	0x7ff00000
 8007bdc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007be0:	d165      	bne.n	8007cae <_strtod_l+0x936>
 8007be2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007be4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007be8:	b35a      	cbz	r2, 8007c42 <_strtod_l+0x8ca>
 8007bea:	4a99      	ldr	r2, [pc, #612]	@ (8007e50 <_strtod_l+0xad8>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d12b      	bne.n	8007c48 <_strtod_l+0x8d0>
 8007bf0:	9b08      	ldr	r3, [sp, #32]
 8007bf2:	4651      	mov	r1, sl
 8007bf4:	b303      	cbz	r3, 8007c38 <_strtod_l+0x8c0>
 8007bf6:	465a      	mov	r2, fp
 8007bf8:	4b96      	ldr	r3, [pc, #600]	@ (8007e54 <_strtod_l+0xadc>)
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007c00:	f04f 32ff 	mov.w	r2, #4294967295
 8007c04:	d81b      	bhi.n	8007c3e <_strtod_l+0x8c6>
 8007c06:	0d1b      	lsrs	r3, r3, #20
 8007c08:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c10:	4299      	cmp	r1, r3
 8007c12:	d119      	bne.n	8007c48 <_strtod_l+0x8d0>
 8007c14:	4b90      	ldr	r3, [pc, #576]	@ (8007e58 <_strtod_l+0xae0>)
 8007c16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d102      	bne.n	8007c22 <_strtod_l+0x8aa>
 8007c1c:	3101      	adds	r1, #1
 8007c1e:	f43f adc6 	beq.w	80077ae <_strtod_l+0x436>
 8007c22:	f04f 0a00 	mov.w	sl, #0
 8007c26:	4b8b      	ldr	r3, [pc, #556]	@ (8007e54 <_strtod_l+0xadc>)
 8007c28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c2a:	401a      	ands	r2, r3
 8007c2c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007c30:	9b08      	ldr	r3, [sp, #32]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1b9      	bne.n	8007baa <_strtod_l+0x832>
 8007c36:	e5c5      	b.n	80077c4 <_strtod_l+0x44c>
 8007c38:	f04f 33ff 	mov.w	r3, #4294967295
 8007c3c:	e7e8      	b.n	8007c10 <_strtod_l+0x898>
 8007c3e:	4613      	mov	r3, r2
 8007c40:	e7e6      	b.n	8007c10 <_strtod_l+0x898>
 8007c42:	ea53 030a 	orrs.w	r3, r3, sl
 8007c46:	d0a2      	beq.n	8007b8e <_strtod_l+0x816>
 8007c48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007c4a:	b1db      	cbz	r3, 8007c84 <_strtod_l+0x90c>
 8007c4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c4e:	4213      	tst	r3, r2
 8007c50:	d0ee      	beq.n	8007c30 <_strtod_l+0x8b8>
 8007c52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c54:	4650      	mov	r0, sl
 8007c56:	4659      	mov	r1, fp
 8007c58:	9a08      	ldr	r2, [sp, #32]
 8007c5a:	b1bb      	cbz	r3, 8007c8c <_strtod_l+0x914>
 8007c5c:	f7ff fb68 	bl	8007330 <sulp>
 8007c60:	4602      	mov	r2, r0
 8007c62:	460b      	mov	r3, r1
 8007c64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c68:	f7f8 fa80 	bl	800016c <__adddf3>
 8007c6c:	4682      	mov	sl, r0
 8007c6e:	468b      	mov	fp, r1
 8007c70:	e7de      	b.n	8007c30 <_strtod_l+0x8b8>
 8007c72:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007c76:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007c7a:	f04f 3aff 	mov.w	sl, #4294967295
 8007c7e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007c82:	e7d5      	b.n	8007c30 <_strtod_l+0x8b8>
 8007c84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c86:	ea13 0f0a 	tst.w	r3, sl
 8007c8a:	e7e1      	b.n	8007c50 <_strtod_l+0x8d8>
 8007c8c:	f7ff fb50 	bl	8007330 <sulp>
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c98:	f7f8 fa66 	bl	8000168 <__aeabi_dsub>
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	4682      	mov	sl, r0
 8007ca2:	468b      	mov	fp, r1
 8007ca4:	f7f8 fe80 	bl	80009a8 <__aeabi_dcmpeq>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d0c1      	beq.n	8007c30 <_strtod_l+0x8b8>
 8007cac:	e615      	b.n	80078da <_strtod_l+0x562>
 8007cae:	4641      	mov	r1, r8
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	f7ff fac9 	bl	8007248 <__ratio>
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007cbc:	4606      	mov	r6, r0
 8007cbe:	460f      	mov	r7, r1
 8007cc0:	f7f8 fe86 	bl	80009d0 <__aeabi_dcmple>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	d06d      	beq.n	8007da4 <_strtod_l+0xa2c>
 8007cc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d178      	bne.n	8007dc0 <_strtod_l+0xa48>
 8007cce:	f1ba 0f00 	cmp.w	sl, #0
 8007cd2:	d156      	bne.n	8007d82 <_strtod_l+0xa0a>
 8007cd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d158      	bne.n	8007d90 <_strtod_l+0xa18>
 8007cde:	2200      	movs	r2, #0
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	4639      	mov	r1, r7
 8007ce4:	4b5d      	ldr	r3, [pc, #372]	@ (8007e5c <_strtod_l+0xae4>)
 8007ce6:	f7f8 fe69 	bl	80009bc <__aeabi_dcmplt>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d157      	bne.n	8007d9e <_strtod_l+0xa26>
 8007cee:	4630      	mov	r0, r6
 8007cf0:	4639      	mov	r1, r7
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	4b5a      	ldr	r3, [pc, #360]	@ (8007e60 <_strtod_l+0xae8>)
 8007cf6:	f7f8 fbef 	bl	80004d8 <__aeabi_dmul>
 8007cfa:	4606      	mov	r6, r0
 8007cfc:	460f      	mov	r7, r1
 8007cfe:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007d02:	9606      	str	r6, [sp, #24]
 8007d04:	9307      	str	r3, [sp, #28]
 8007d06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d0a:	4d52      	ldr	r5, [pc, #328]	@ (8007e54 <_strtod_l+0xadc>)
 8007d0c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007d10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d12:	401d      	ands	r5, r3
 8007d14:	4b53      	ldr	r3, [pc, #332]	@ (8007e64 <_strtod_l+0xaec>)
 8007d16:	429d      	cmp	r5, r3
 8007d18:	f040 80aa 	bne.w	8007e70 <_strtod_l+0xaf8>
 8007d1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d1e:	4650      	mov	r0, sl
 8007d20:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007d24:	4659      	mov	r1, fp
 8007d26:	f7ff f9cf 	bl	80070c8 <__ulp>
 8007d2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d2e:	f7f8 fbd3 	bl	80004d8 <__aeabi_dmul>
 8007d32:	4652      	mov	r2, sl
 8007d34:	465b      	mov	r3, fp
 8007d36:	f7f8 fa19 	bl	800016c <__adddf3>
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	4945      	ldr	r1, [pc, #276]	@ (8007e54 <_strtod_l+0xadc>)
 8007d3e:	4a4a      	ldr	r2, [pc, #296]	@ (8007e68 <_strtod_l+0xaf0>)
 8007d40:	4019      	ands	r1, r3
 8007d42:	4291      	cmp	r1, r2
 8007d44:	4682      	mov	sl, r0
 8007d46:	d942      	bls.n	8007dce <_strtod_l+0xa56>
 8007d48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007d4a:	4b43      	ldr	r3, [pc, #268]	@ (8007e58 <_strtod_l+0xae0>)
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d103      	bne.n	8007d58 <_strtod_l+0x9e0>
 8007d50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d52:	3301      	adds	r3, #1
 8007d54:	f43f ad2b 	beq.w	80077ae <_strtod_l+0x436>
 8007d58:	f04f 3aff 	mov.w	sl, #4294967295
 8007d5c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007e58 <_strtod_l+0xae0>
 8007d60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d62:	9805      	ldr	r0, [sp, #20]
 8007d64:	f7fe fe7e 	bl	8006a64 <_Bfree>
 8007d68:	4649      	mov	r1, r9
 8007d6a:	9805      	ldr	r0, [sp, #20]
 8007d6c:	f7fe fe7a 	bl	8006a64 <_Bfree>
 8007d70:	4641      	mov	r1, r8
 8007d72:	9805      	ldr	r0, [sp, #20]
 8007d74:	f7fe fe76 	bl	8006a64 <_Bfree>
 8007d78:	4621      	mov	r1, r4
 8007d7a:	9805      	ldr	r0, [sp, #20]
 8007d7c:	f7fe fe72 	bl	8006a64 <_Bfree>
 8007d80:	e618      	b.n	80079b4 <_strtod_l+0x63c>
 8007d82:	f1ba 0f01 	cmp.w	sl, #1
 8007d86:	d103      	bne.n	8007d90 <_strtod_l+0xa18>
 8007d88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f43f ada5 	beq.w	80078da <_strtod_l+0x562>
 8007d90:	2200      	movs	r2, #0
 8007d92:	4b36      	ldr	r3, [pc, #216]	@ (8007e6c <_strtod_l+0xaf4>)
 8007d94:	2600      	movs	r6, #0
 8007d96:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d9a:	4f30      	ldr	r7, [pc, #192]	@ (8007e5c <_strtod_l+0xae4>)
 8007d9c:	e7b3      	b.n	8007d06 <_strtod_l+0x98e>
 8007d9e:	2600      	movs	r6, #0
 8007da0:	4f2f      	ldr	r7, [pc, #188]	@ (8007e60 <_strtod_l+0xae8>)
 8007da2:	e7ac      	b.n	8007cfe <_strtod_l+0x986>
 8007da4:	4630      	mov	r0, r6
 8007da6:	4639      	mov	r1, r7
 8007da8:	4b2d      	ldr	r3, [pc, #180]	@ (8007e60 <_strtod_l+0xae8>)
 8007daa:	2200      	movs	r2, #0
 8007dac:	f7f8 fb94 	bl	80004d8 <__aeabi_dmul>
 8007db0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007db2:	4606      	mov	r6, r0
 8007db4:	460f      	mov	r7, r1
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d0a1      	beq.n	8007cfe <_strtod_l+0x986>
 8007dba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007dbe:	e7a2      	b.n	8007d06 <_strtod_l+0x98e>
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	4b26      	ldr	r3, [pc, #152]	@ (8007e5c <_strtod_l+0xae4>)
 8007dc4:	4616      	mov	r6, r2
 8007dc6:	461f      	mov	r7, r3
 8007dc8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007dcc:	e79b      	b.n	8007d06 <_strtod_l+0x98e>
 8007dce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007dd2:	9b08      	ldr	r3, [sp, #32]
 8007dd4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1c1      	bne.n	8007d60 <_strtod_l+0x9e8>
 8007ddc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007de0:	0d1b      	lsrs	r3, r3, #20
 8007de2:	051b      	lsls	r3, r3, #20
 8007de4:	429d      	cmp	r5, r3
 8007de6:	d1bb      	bne.n	8007d60 <_strtod_l+0x9e8>
 8007de8:	4630      	mov	r0, r6
 8007dea:	4639      	mov	r1, r7
 8007dec:	f7f9 f9b6 	bl	800115c <__aeabi_d2lz>
 8007df0:	f7f8 fb44 	bl	800047c <__aeabi_l2d>
 8007df4:	4602      	mov	r2, r0
 8007df6:	460b      	mov	r3, r1
 8007df8:	4630      	mov	r0, r6
 8007dfa:	4639      	mov	r1, r7
 8007dfc:	f7f8 f9b4 	bl	8000168 <__aeabi_dsub>
 8007e00:	460b      	mov	r3, r1
 8007e02:	4602      	mov	r2, r0
 8007e04:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007e08:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007e0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e0e:	ea46 060a 	orr.w	r6, r6, sl
 8007e12:	431e      	orrs	r6, r3
 8007e14:	d069      	beq.n	8007eea <_strtod_l+0xb72>
 8007e16:	a30a      	add	r3, pc, #40	@ (adr r3, 8007e40 <_strtod_l+0xac8>)
 8007e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1c:	f7f8 fdce 	bl	80009bc <__aeabi_dcmplt>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	f47f accf 	bne.w	80077c4 <_strtod_l+0x44c>
 8007e26:	a308      	add	r3, pc, #32	@ (adr r3, 8007e48 <_strtod_l+0xad0>)
 8007e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e30:	f7f8 fde2 	bl	80009f8 <__aeabi_dcmpgt>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d093      	beq.n	8007d60 <_strtod_l+0x9e8>
 8007e38:	e4c4      	b.n	80077c4 <_strtod_l+0x44c>
 8007e3a:	bf00      	nop
 8007e3c:	f3af 8000 	nop.w
 8007e40:	94a03595 	.word	0x94a03595
 8007e44:	3fdfffff 	.word	0x3fdfffff
 8007e48:	35afe535 	.word	0x35afe535
 8007e4c:	3fe00000 	.word	0x3fe00000
 8007e50:	000fffff 	.word	0x000fffff
 8007e54:	7ff00000 	.word	0x7ff00000
 8007e58:	7fefffff 	.word	0x7fefffff
 8007e5c:	3ff00000 	.word	0x3ff00000
 8007e60:	3fe00000 	.word	0x3fe00000
 8007e64:	7fe00000 	.word	0x7fe00000
 8007e68:	7c9fffff 	.word	0x7c9fffff
 8007e6c:	bff00000 	.word	0xbff00000
 8007e70:	9b08      	ldr	r3, [sp, #32]
 8007e72:	b323      	cbz	r3, 8007ebe <_strtod_l+0xb46>
 8007e74:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007e78:	d821      	bhi.n	8007ebe <_strtod_l+0xb46>
 8007e7a:	a327      	add	r3, pc, #156	@ (adr r3, 8007f18 <_strtod_l+0xba0>)
 8007e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e80:	4630      	mov	r0, r6
 8007e82:	4639      	mov	r1, r7
 8007e84:	f7f8 fda4 	bl	80009d0 <__aeabi_dcmple>
 8007e88:	b1a0      	cbz	r0, 8007eb4 <_strtod_l+0xb3c>
 8007e8a:	4639      	mov	r1, r7
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	f7f8 fdfb 	bl	8000a88 <__aeabi_d2uiz>
 8007e92:	2801      	cmp	r0, #1
 8007e94:	bf38      	it	cc
 8007e96:	2001      	movcc	r0, #1
 8007e98:	f7f8 faa4 	bl	80003e4 <__aeabi_ui2d>
 8007e9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e9e:	4606      	mov	r6, r0
 8007ea0:	460f      	mov	r7, r1
 8007ea2:	b9fb      	cbnz	r3, 8007ee4 <_strtod_l+0xb6c>
 8007ea4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007ea8:	9014      	str	r0, [sp, #80]	@ 0x50
 8007eaa:	9315      	str	r3, [sp, #84]	@ 0x54
 8007eac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007eb0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007eb4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007eb6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007eba:	1b5b      	subs	r3, r3, r5
 8007ebc:	9311      	str	r3, [sp, #68]	@ 0x44
 8007ebe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ec2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007ec6:	f7ff f8ff 	bl	80070c8 <__ulp>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	460b      	mov	r3, r1
 8007ece:	4650      	mov	r0, sl
 8007ed0:	4659      	mov	r1, fp
 8007ed2:	f7f8 fb01 	bl	80004d8 <__aeabi_dmul>
 8007ed6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007eda:	f7f8 f947 	bl	800016c <__adddf3>
 8007ede:	4682      	mov	sl, r0
 8007ee0:	468b      	mov	fp, r1
 8007ee2:	e776      	b.n	8007dd2 <_strtod_l+0xa5a>
 8007ee4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007ee8:	e7e0      	b.n	8007eac <_strtod_l+0xb34>
 8007eea:	a30d      	add	r3, pc, #52	@ (adr r3, 8007f20 <_strtod_l+0xba8>)
 8007eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef0:	f7f8 fd64 	bl	80009bc <__aeabi_dcmplt>
 8007ef4:	e79e      	b.n	8007e34 <_strtod_l+0xabc>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007efa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007efc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007efe:	6013      	str	r3, [r2, #0]
 8007f00:	f7ff ba77 	b.w	80073f2 <_strtod_l+0x7a>
 8007f04:	2a65      	cmp	r2, #101	@ 0x65
 8007f06:	f43f ab6e 	beq.w	80075e6 <_strtod_l+0x26e>
 8007f0a:	2a45      	cmp	r2, #69	@ 0x45
 8007f0c:	f43f ab6b 	beq.w	80075e6 <_strtod_l+0x26e>
 8007f10:	2301      	movs	r3, #1
 8007f12:	f7ff bba6 	b.w	8007662 <_strtod_l+0x2ea>
 8007f16:	bf00      	nop
 8007f18:	ffc00000 	.word	0xffc00000
 8007f1c:	41dfffff 	.word	0x41dfffff
 8007f20:	94a03595 	.word	0x94a03595
 8007f24:	3fcfffff 	.word	0x3fcfffff

08007f28 <_strtod_r>:
 8007f28:	4b01      	ldr	r3, [pc, #4]	@ (8007f30 <_strtod_r+0x8>)
 8007f2a:	f7ff ba25 	b.w	8007378 <_strtod_l>
 8007f2e:	bf00      	nop
 8007f30:	20000068 	.word	0x20000068

08007f34 <_strtol_l.constprop.0>:
 8007f34:	2b24      	cmp	r3, #36	@ 0x24
 8007f36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f3a:	4686      	mov	lr, r0
 8007f3c:	4690      	mov	r8, r2
 8007f3e:	d801      	bhi.n	8007f44 <_strtol_l.constprop.0+0x10>
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d106      	bne.n	8007f52 <_strtol_l.constprop.0+0x1e>
 8007f44:	f7fd fdc0 	bl	8005ac8 <__errno>
 8007f48:	2316      	movs	r3, #22
 8007f4a:	6003      	str	r3, [r0, #0]
 8007f4c:	2000      	movs	r0, #0
 8007f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f52:	460d      	mov	r5, r1
 8007f54:	4833      	ldr	r0, [pc, #204]	@ (8008024 <_strtol_l.constprop.0+0xf0>)
 8007f56:	462a      	mov	r2, r5
 8007f58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f5c:	5d06      	ldrb	r6, [r0, r4]
 8007f5e:	f016 0608 	ands.w	r6, r6, #8
 8007f62:	d1f8      	bne.n	8007f56 <_strtol_l.constprop.0+0x22>
 8007f64:	2c2d      	cmp	r4, #45	@ 0x2d
 8007f66:	d12d      	bne.n	8007fc4 <_strtol_l.constprop.0+0x90>
 8007f68:	2601      	movs	r6, #1
 8007f6a:	782c      	ldrb	r4, [r5, #0]
 8007f6c:	1c95      	adds	r5, r2, #2
 8007f6e:	f033 0210 	bics.w	r2, r3, #16
 8007f72:	d109      	bne.n	8007f88 <_strtol_l.constprop.0+0x54>
 8007f74:	2c30      	cmp	r4, #48	@ 0x30
 8007f76:	d12a      	bne.n	8007fce <_strtol_l.constprop.0+0x9a>
 8007f78:	782a      	ldrb	r2, [r5, #0]
 8007f7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007f7e:	2a58      	cmp	r2, #88	@ 0x58
 8007f80:	d125      	bne.n	8007fce <_strtol_l.constprop.0+0x9a>
 8007f82:	2310      	movs	r3, #16
 8007f84:	786c      	ldrb	r4, [r5, #1]
 8007f86:	3502      	adds	r5, #2
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007f8e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007f92:	fbbc f9f3 	udiv	r9, ip, r3
 8007f96:	4610      	mov	r0, r2
 8007f98:	fb03 ca19 	mls	sl, r3, r9, ip
 8007f9c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007fa0:	2f09      	cmp	r7, #9
 8007fa2:	d81b      	bhi.n	8007fdc <_strtol_l.constprop.0+0xa8>
 8007fa4:	463c      	mov	r4, r7
 8007fa6:	42a3      	cmp	r3, r4
 8007fa8:	dd27      	ble.n	8007ffa <_strtol_l.constprop.0+0xc6>
 8007faa:	1c57      	adds	r7, r2, #1
 8007fac:	d007      	beq.n	8007fbe <_strtol_l.constprop.0+0x8a>
 8007fae:	4581      	cmp	r9, r0
 8007fb0:	d320      	bcc.n	8007ff4 <_strtol_l.constprop.0+0xc0>
 8007fb2:	d101      	bne.n	8007fb8 <_strtol_l.constprop.0+0x84>
 8007fb4:	45a2      	cmp	sl, r4
 8007fb6:	db1d      	blt.n	8007ff4 <_strtol_l.constprop.0+0xc0>
 8007fb8:	2201      	movs	r2, #1
 8007fba:	fb00 4003 	mla	r0, r0, r3, r4
 8007fbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fc2:	e7eb      	b.n	8007f9c <_strtol_l.constprop.0+0x68>
 8007fc4:	2c2b      	cmp	r4, #43	@ 0x2b
 8007fc6:	bf04      	itt	eq
 8007fc8:	782c      	ldrbeq	r4, [r5, #0]
 8007fca:	1c95      	addeq	r5, r2, #2
 8007fcc:	e7cf      	b.n	8007f6e <_strtol_l.constprop.0+0x3a>
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1da      	bne.n	8007f88 <_strtol_l.constprop.0+0x54>
 8007fd2:	2c30      	cmp	r4, #48	@ 0x30
 8007fd4:	bf0c      	ite	eq
 8007fd6:	2308      	moveq	r3, #8
 8007fd8:	230a      	movne	r3, #10
 8007fda:	e7d5      	b.n	8007f88 <_strtol_l.constprop.0+0x54>
 8007fdc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007fe0:	2f19      	cmp	r7, #25
 8007fe2:	d801      	bhi.n	8007fe8 <_strtol_l.constprop.0+0xb4>
 8007fe4:	3c37      	subs	r4, #55	@ 0x37
 8007fe6:	e7de      	b.n	8007fa6 <_strtol_l.constprop.0+0x72>
 8007fe8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007fec:	2f19      	cmp	r7, #25
 8007fee:	d804      	bhi.n	8007ffa <_strtol_l.constprop.0+0xc6>
 8007ff0:	3c57      	subs	r4, #87	@ 0x57
 8007ff2:	e7d8      	b.n	8007fa6 <_strtol_l.constprop.0+0x72>
 8007ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff8:	e7e1      	b.n	8007fbe <_strtol_l.constprop.0+0x8a>
 8007ffa:	1c53      	adds	r3, r2, #1
 8007ffc:	d108      	bne.n	8008010 <_strtol_l.constprop.0+0xdc>
 8007ffe:	2322      	movs	r3, #34	@ 0x22
 8008000:	4660      	mov	r0, ip
 8008002:	f8ce 3000 	str.w	r3, [lr]
 8008006:	f1b8 0f00 	cmp.w	r8, #0
 800800a:	d0a0      	beq.n	8007f4e <_strtol_l.constprop.0+0x1a>
 800800c:	1e69      	subs	r1, r5, #1
 800800e:	e006      	b.n	800801e <_strtol_l.constprop.0+0xea>
 8008010:	b106      	cbz	r6, 8008014 <_strtol_l.constprop.0+0xe0>
 8008012:	4240      	negs	r0, r0
 8008014:	f1b8 0f00 	cmp.w	r8, #0
 8008018:	d099      	beq.n	8007f4e <_strtol_l.constprop.0+0x1a>
 800801a:	2a00      	cmp	r2, #0
 800801c:	d1f6      	bne.n	800800c <_strtol_l.constprop.0+0xd8>
 800801e:	f8c8 1000 	str.w	r1, [r8]
 8008022:	e794      	b.n	8007f4e <_strtol_l.constprop.0+0x1a>
 8008024:	08009af9 	.word	0x08009af9

08008028 <_strtol_r>:
 8008028:	f7ff bf84 	b.w	8007f34 <_strtol_l.constprop.0>

0800802c <__ssputs_r>:
 800802c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008030:	461f      	mov	r7, r3
 8008032:	688e      	ldr	r6, [r1, #8]
 8008034:	4682      	mov	sl, r0
 8008036:	42be      	cmp	r6, r7
 8008038:	460c      	mov	r4, r1
 800803a:	4690      	mov	r8, r2
 800803c:	680b      	ldr	r3, [r1, #0]
 800803e:	d82d      	bhi.n	800809c <__ssputs_r+0x70>
 8008040:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008044:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008048:	d026      	beq.n	8008098 <__ssputs_r+0x6c>
 800804a:	6965      	ldr	r5, [r4, #20]
 800804c:	6909      	ldr	r1, [r1, #16]
 800804e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008052:	eba3 0901 	sub.w	r9, r3, r1
 8008056:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800805a:	1c7b      	adds	r3, r7, #1
 800805c:	444b      	add	r3, r9
 800805e:	106d      	asrs	r5, r5, #1
 8008060:	429d      	cmp	r5, r3
 8008062:	bf38      	it	cc
 8008064:	461d      	movcc	r5, r3
 8008066:	0553      	lsls	r3, r2, #21
 8008068:	d527      	bpl.n	80080ba <__ssputs_r+0x8e>
 800806a:	4629      	mov	r1, r5
 800806c:	f7fe fc2e 	bl	80068cc <_malloc_r>
 8008070:	4606      	mov	r6, r0
 8008072:	b360      	cbz	r0, 80080ce <__ssputs_r+0xa2>
 8008074:	464a      	mov	r2, r9
 8008076:	6921      	ldr	r1, [r4, #16]
 8008078:	f000 fa14 	bl	80084a4 <memcpy>
 800807c:	89a3      	ldrh	r3, [r4, #12]
 800807e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008086:	81a3      	strh	r3, [r4, #12]
 8008088:	6126      	str	r6, [r4, #16]
 800808a:	444e      	add	r6, r9
 800808c:	6026      	str	r6, [r4, #0]
 800808e:	463e      	mov	r6, r7
 8008090:	6165      	str	r5, [r4, #20]
 8008092:	eba5 0509 	sub.w	r5, r5, r9
 8008096:	60a5      	str	r5, [r4, #8]
 8008098:	42be      	cmp	r6, r7
 800809a:	d900      	bls.n	800809e <__ssputs_r+0x72>
 800809c:	463e      	mov	r6, r7
 800809e:	4632      	mov	r2, r6
 80080a0:	4641      	mov	r1, r8
 80080a2:	6820      	ldr	r0, [r4, #0]
 80080a4:	f000 f9c2 	bl	800842c <memmove>
 80080a8:	2000      	movs	r0, #0
 80080aa:	68a3      	ldr	r3, [r4, #8]
 80080ac:	1b9b      	subs	r3, r3, r6
 80080ae:	60a3      	str	r3, [r4, #8]
 80080b0:	6823      	ldr	r3, [r4, #0]
 80080b2:	4433      	add	r3, r6
 80080b4:	6023      	str	r3, [r4, #0]
 80080b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ba:	462a      	mov	r2, r5
 80080bc:	f000 fd83 	bl	8008bc6 <_realloc_r>
 80080c0:	4606      	mov	r6, r0
 80080c2:	2800      	cmp	r0, #0
 80080c4:	d1e0      	bne.n	8008088 <__ssputs_r+0x5c>
 80080c6:	4650      	mov	r0, sl
 80080c8:	6921      	ldr	r1, [r4, #16]
 80080ca:	f7fe fb8d 	bl	80067e8 <_free_r>
 80080ce:	230c      	movs	r3, #12
 80080d0:	f8ca 3000 	str.w	r3, [sl]
 80080d4:	89a3      	ldrh	r3, [r4, #12]
 80080d6:	f04f 30ff 	mov.w	r0, #4294967295
 80080da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080de:	81a3      	strh	r3, [r4, #12]
 80080e0:	e7e9      	b.n	80080b6 <__ssputs_r+0x8a>
	...

080080e4 <_svfiprintf_r>:
 80080e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e8:	4698      	mov	r8, r3
 80080ea:	898b      	ldrh	r3, [r1, #12]
 80080ec:	4607      	mov	r7, r0
 80080ee:	061b      	lsls	r3, r3, #24
 80080f0:	460d      	mov	r5, r1
 80080f2:	4614      	mov	r4, r2
 80080f4:	b09d      	sub	sp, #116	@ 0x74
 80080f6:	d510      	bpl.n	800811a <_svfiprintf_r+0x36>
 80080f8:	690b      	ldr	r3, [r1, #16]
 80080fa:	b973      	cbnz	r3, 800811a <_svfiprintf_r+0x36>
 80080fc:	2140      	movs	r1, #64	@ 0x40
 80080fe:	f7fe fbe5 	bl	80068cc <_malloc_r>
 8008102:	6028      	str	r0, [r5, #0]
 8008104:	6128      	str	r0, [r5, #16]
 8008106:	b930      	cbnz	r0, 8008116 <_svfiprintf_r+0x32>
 8008108:	230c      	movs	r3, #12
 800810a:	603b      	str	r3, [r7, #0]
 800810c:	f04f 30ff 	mov.w	r0, #4294967295
 8008110:	b01d      	add	sp, #116	@ 0x74
 8008112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008116:	2340      	movs	r3, #64	@ 0x40
 8008118:	616b      	str	r3, [r5, #20]
 800811a:	2300      	movs	r3, #0
 800811c:	9309      	str	r3, [sp, #36]	@ 0x24
 800811e:	2320      	movs	r3, #32
 8008120:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008124:	2330      	movs	r3, #48	@ 0x30
 8008126:	f04f 0901 	mov.w	r9, #1
 800812a:	f8cd 800c 	str.w	r8, [sp, #12]
 800812e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80082c8 <_svfiprintf_r+0x1e4>
 8008132:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008136:	4623      	mov	r3, r4
 8008138:	469a      	mov	sl, r3
 800813a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800813e:	b10a      	cbz	r2, 8008144 <_svfiprintf_r+0x60>
 8008140:	2a25      	cmp	r2, #37	@ 0x25
 8008142:	d1f9      	bne.n	8008138 <_svfiprintf_r+0x54>
 8008144:	ebba 0b04 	subs.w	fp, sl, r4
 8008148:	d00b      	beq.n	8008162 <_svfiprintf_r+0x7e>
 800814a:	465b      	mov	r3, fp
 800814c:	4622      	mov	r2, r4
 800814e:	4629      	mov	r1, r5
 8008150:	4638      	mov	r0, r7
 8008152:	f7ff ff6b 	bl	800802c <__ssputs_r>
 8008156:	3001      	adds	r0, #1
 8008158:	f000 80a7 	beq.w	80082aa <_svfiprintf_r+0x1c6>
 800815c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800815e:	445a      	add	r2, fp
 8008160:	9209      	str	r2, [sp, #36]	@ 0x24
 8008162:	f89a 3000 	ldrb.w	r3, [sl]
 8008166:	2b00      	cmp	r3, #0
 8008168:	f000 809f 	beq.w	80082aa <_svfiprintf_r+0x1c6>
 800816c:	2300      	movs	r3, #0
 800816e:	f04f 32ff 	mov.w	r2, #4294967295
 8008172:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008176:	f10a 0a01 	add.w	sl, sl, #1
 800817a:	9304      	str	r3, [sp, #16]
 800817c:	9307      	str	r3, [sp, #28]
 800817e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008182:	931a      	str	r3, [sp, #104]	@ 0x68
 8008184:	4654      	mov	r4, sl
 8008186:	2205      	movs	r2, #5
 8008188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800818c:	484e      	ldr	r0, [pc, #312]	@ (80082c8 <_svfiprintf_r+0x1e4>)
 800818e:	f7fd fcc8 	bl	8005b22 <memchr>
 8008192:	9a04      	ldr	r2, [sp, #16]
 8008194:	b9d8      	cbnz	r0, 80081ce <_svfiprintf_r+0xea>
 8008196:	06d0      	lsls	r0, r2, #27
 8008198:	bf44      	itt	mi
 800819a:	2320      	movmi	r3, #32
 800819c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081a0:	0711      	lsls	r1, r2, #28
 80081a2:	bf44      	itt	mi
 80081a4:	232b      	movmi	r3, #43	@ 0x2b
 80081a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081aa:	f89a 3000 	ldrb.w	r3, [sl]
 80081ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80081b0:	d015      	beq.n	80081de <_svfiprintf_r+0xfa>
 80081b2:	4654      	mov	r4, sl
 80081b4:	2000      	movs	r0, #0
 80081b6:	f04f 0c0a 	mov.w	ip, #10
 80081ba:	9a07      	ldr	r2, [sp, #28]
 80081bc:	4621      	mov	r1, r4
 80081be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081c2:	3b30      	subs	r3, #48	@ 0x30
 80081c4:	2b09      	cmp	r3, #9
 80081c6:	d94b      	bls.n	8008260 <_svfiprintf_r+0x17c>
 80081c8:	b1b0      	cbz	r0, 80081f8 <_svfiprintf_r+0x114>
 80081ca:	9207      	str	r2, [sp, #28]
 80081cc:	e014      	b.n	80081f8 <_svfiprintf_r+0x114>
 80081ce:	eba0 0308 	sub.w	r3, r0, r8
 80081d2:	fa09 f303 	lsl.w	r3, r9, r3
 80081d6:	4313      	orrs	r3, r2
 80081d8:	46a2      	mov	sl, r4
 80081da:	9304      	str	r3, [sp, #16]
 80081dc:	e7d2      	b.n	8008184 <_svfiprintf_r+0xa0>
 80081de:	9b03      	ldr	r3, [sp, #12]
 80081e0:	1d19      	adds	r1, r3, #4
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	9103      	str	r1, [sp, #12]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	bfbb      	ittet	lt
 80081ea:	425b      	neglt	r3, r3
 80081ec:	f042 0202 	orrlt.w	r2, r2, #2
 80081f0:	9307      	strge	r3, [sp, #28]
 80081f2:	9307      	strlt	r3, [sp, #28]
 80081f4:	bfb8      	it	lt
 80081f6:	9204      	strlt	r2, [sp, #16]
 80081f8:	7823      	ldrb	r3, [r4, #0]
 80081fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80081fc:	d10a      	bne.n	8008214 <_svfiprintf_r+0x130>
 80081fe:	7863      	ldrb	r3, [r4, #1]
 8008200:	2b2a      	cmp	r3, #42	@ 0x2a
 8008202:	d132      	bne.n	800826a <_svfiprintf_r+0x186>
 8008204:	9b03      	ldr	r3, [sp, #12]
 8008206:	3402      	adds	r4, #2
 8008208:	1d1a      	adds	r2, r3, #4
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	9203      	str	r2, [sp, #12]
 800820e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008212:	9305      	str	r3, [sp, #20]
 8008214:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80082cc <_svfiprintf_r+0x1e8>
 8008218:	2203      	movs	r2, #3
 800821a:	4650      	mov	r0, sl
 800821c:	7821      	ldrb	r1, [r4, #0]
 800821e:	f7fd fc80 	bl	8005b22 <memchr>
 8008222:	b138      	cbz	r0, 8008234 <_svfiprintf_r+0x150>
 8008224:	2240      	movs	r2, #64	@ 0x40
 8008226:	9b04      	ldr	r3, [sp, #16]
 8008228:	eba0 000a 	sub.w	r0, r0, sl
 800822c:	4082      	lsls	r2, r0
 800822e:	4313      	orrs	r3, r2
 8008230:	3401      	adds	r4, #1
 8008232:	9304      	str	r3, [sp, #16]
 8008234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008238:	2206      	movs	r2, #6
 800823a:	4825      	ldr	r0, [pc, #148]	@ (80082d0 <_svfiprintf_r+0x1ec>)
 800823c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008240:	f7fd fc6f 	bl	8005b22 <memchr>
 8008244:	2800      	cmp	r0, #0
 8008246:	d036      	beq.n	80082b6 <_svfiprintf_r+0x1d2>
 8008248:	4b22      	ldr	r3, [pc, #136]	@ (80082d4 <_svfiprintf_r+0x1f0>)
 800824a:	bb1b      	cbnz	r3, 8008294 <_svfiprintf_r+0x1b0>
 800824c:	9b03      	ldr	r3, [sp, #12]
 800824e:	3307      	adds	r3, #7
 8008250:	f023 0307 	bic.w	r3, r3, #7
 8008254:	3308      	adds	r3, #8
 8008256:	9303      	str	r3, [sp, #12]
 8008258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800825a:	4433      	add	r3, r6
 800825c:	9309      	str	r3, [sp, #36]	@ 0x24
 800825e:	e76a      	b.n	8008136 <_svfiprintf_r+0x52>
 8008260:	460c      	mov	r4, r1
 8008262:	2001      	movs	r0, #1
 8008264:	fb0c 3202 	mla	r2, ip, r2, r3
 8008268:	e7a8      	b.n	80081bc <_svfiprintf_r+0xd8>
 800826a:	2300      	movs	r3, #0
 800826c:	f04f 0c0a 	mov.w	ip, #10
 8008270:	4619      	mov	r1, r3
 8008272:	3401      	adds	r4, #1
 8008274:	9305      	str	r3, [sp, #20]
 8008276:	4620      	mov	r0, r4
 8008278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800827c:	3a30      	subs	r2, #48	@ 0x30
 800827e:	2a09      	cmp	r2, #9
 8008280:	d903      	bls.n	800828a <_svfiprintf_r+0x1a6>
 8008282:	2b00      	cmp	r3, #0
 8008284:	d0c6      	beq.n	8008214 <_svfiprintf_r+0x130>
 8008286:	9105      	str	r1, [sp, #20]
 8008288:	e7c4      	b.n	8008214 <_svfiprintf_r+0x130>
 800828a:	4604      	mov	r4, r0
 800828c:	2301      	movs	r3, #1
 800828e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008292:	e7f0      	b.n	8008276 <_svfiprintf_r+0x192>
 8008294:	ab03      	add	r3, sp, #12
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	462a      	mov	r2, r5
 800829a:	4638      	mov	r0, r7
 800829c:	4b0e      	ldr	r3, [pc, #56]	@ (80082d8 <_svfiprintf_r+0x1f4>)
 800829e:	a904      	add	r1, sp, #16
 80082a0:	f7fc fccc 	bl	8004c3c <_printf_float>
 80082a4:	1c42      	adds	r2, r0, #1
 80082a6:	4606      	mov	r6, r0
 80082a8:	d1d6      	bne.n	8008258 <_svfiprintf_r+0x174>
 80082aa:	89ab      	ldrh	r3, [r5, #12]
 80082ac:	065b      	lsls	r3, r3, #25
 80082ae:	f53f af2d 	bmi.w	800810c <_svfiprintf_r+0x28>
 80082b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082b4:	e72c      	b.n	8008110 <_svfiprintf_r+0x2c>
 80082b6:	ab03      	add	r3, sp, #12
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	462a      	mov	r2, r5
 80082bc:	4638      	mov	r0, r7
 80082be:	4b06      	ldr	r3, [pc, #24]	@ (80082d8 <_svfiprintf_r+0x1f4>)
 80082c0:	a904      	add	r1, sp, #16
 80082c2:	f7fc ff59 	bl	8005178 <_printf_i>
 80082c6:	e7ed      	b.n	80082a4 <_svfiprintf_r+0x1c0>
 80082c8:	08009bf9 	.word	0x08009bf9
 80082cc:	08009bff 	.word	0x08009bff
 80082d0:	08009c03 	.word	0x08009c03
 80082d4:	08004c3d 	.word	0x08004c3d
 80082d8:	0800802d 	.word	0x0800802d

080082dc <__sflush_r>:
 80082dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e2:	0716      	lsls	r6, r2, #28
 80082e4:	4605      	mov	r5, r0
 80082e6:	460c      	mov	r4, r1
 80082e8:	d454      	bmi.n	8008394 <__sflush_r+0xb8>
 80082ea:	684b      	ldr	r3, [r1, #4]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	dc02      	bgt.n	80082f6 <__sflush_r+0x1a>
 80082f0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	dd48      	ble.n	8008388 <__sflush_r+0xac>
 80082f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082f8:	2e00      	cmp	r6, #0
 80082fa:	d045      	beq.n	8008388 <__sflush_r+0xac>
 80082fc:	2300      	movs	r3, #0
 80082fe:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008302:	682f      	ldr	r7, [r5, #0]
 8008304:	6a21      	ldr	r1, [r4, #32]
 8008306:	602b      	str	r3, [r5, #0]
 8008308:	d030      	beq.n	800836c <__sflush_r+0x90>
 800830a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800830c:	89a3      	ldrh	r3, [r4, #12]
 800830e:	0759      	lsls	r1, r3, #29
 8008310:	d505      	bpl.n	800831e <__sflush_r+0x42>
 8008312:	6863      	ldr	r3, [r4, #4]
 8008314:	1ad2      	subs	r2, r2, r3
 8008316:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008318:	b10b      	cbz	r3, 800831e <__sflush_r+0x42>
 800831a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800831c:	1ad2      	subs	r2, r2, r3
 800831e:	2300      	movs	r3, #0
 8008320:	4628      	mov	r0, r5
 8008322:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008324:	6a21      	ldr	r1, [r4, #32]
 8008326:	47b0      	blx	r6
 8008328:	1c43      	adds	r3, r0, #1
 800832a:	89a3      	ldrh	r3, [r4, #12]
 800832c:	d106      	bne.n	800833c <__sflush_r+0x60>
 800832e:	6829      	ldr	r1, [r5, #0]
 8008330:	291d      	cmp	r1, #29
 8008332:	d82b      	bhi.n	800838c <__sflush_r+0xb0>
 8008334:	4a28      	ldr	r2, [pc, #160]	@ (80083d8 <__sflush_r+0xfc>)
 8008336:	410a      	asrs	r2, r1
 8008338:	07d6      	lsls	r6, r2, #31
 800833a:	d427      	bmi.n	800838c <__sflush_r+0xb0>
 800833c:	2200      	movs	r2, #0
 800833e:	6062      	str	r2, [r4, #4]
 8008340:	6922      	ldr	r2, [r4, #16]
 8008342:	04d9      	lsls	r1, r3, #19
 8008344:	6022      	str	r2, [r4, #0]
 8008346:	d504      	bpl.n	8008352 <__sflush_r+0x76>
 8008348:	1c42      	adds	r2, r0, #1
 800834a:	d101      	bne.n	8008350 <__sflush_r+0x74>
 800834c:	682b      	ldr	r3, [r5, #0]
 800834e:	b903      	cbnz	r3, 8008352 <__sflush_r+0x76>
 8008350:	6560      	str	r0, [r4, #84]	@ 0x54
 8008352:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008354:	602f      	str	r7, [r5, #0]
 8008356:	b1b9      	cbz	r1, 8008388 <__sflush_r+0xac>
 8008358:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800835c:	4299      	cmp	r1, r3
 800835e:	d002      	beq.n	8008366 <__sflush_r+0x8a>
 8008360:	4628      	mov	r0, r5
 8008362:	f7fe fa41 	bl	80067e8 <_free_r>
 8008366:	2300      	movs	r3, #0
 8008368:	6363      	str	r3, [r4, #52]	@ 0x34
 800836a:	e00d      	b.n	8008388 <__sflush_r+0xac>
 800836c:	2301      	movs	r3, #1
 800836e:	4628      	mov	r0, r5
 8008370:	47b0      	blx	r6
 8008372:	4602      	mov	r2, r0
 8008374:	1c50      	adds	r0, r2, #1
 8008376:	d1c9      	bne.n	800830c <__sflush_r+0x30>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d0c6      	beq.n	800830c <__sflush_r+0x30>
 800837e:	2b1d      	cmp	r3, #29
 8008380:	d001      	beq.n	8008386 <__sflush_r+0xaa>
 8008382:	2b16      	cmp	r3, #22
 8008384:	d11d      	bne.n	80083c2 <__sflush_r+0xe6>
 8008386:	602f      	str	r7, [r5, #0]
 8008388:	2000      	movs	r0, #0
 800838a:	e021      	b.n	80083d0 <__sflush_r+0xf4>
 800838c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008390:	b21b      	sxth	r3, r3
 8008392:	e01a      	b.n	80083ca <__sflush_r+0xee>
 8008394:	690f      	ldr	r7, [r1, #16]
 8008396:	2f00      	cmp	r7, #0
 8008398:	d0f6      	beq.n	8008388 <__sflush_r+0xac>
 800839a:	0793      	lsls	r3, r2, #30
 800839c:	bf18      	it	ne
 800839e:	2300      	movne	r3, #0
 80083a0:	680e      	ldr	r6, [r1, #0]
 80083a2:	bf08      	it	eq
 80083a4:	694b      	ldreq	r3, [r1, #20]
 80083a6:	1bf6      	subs	r6, r6, r7
 80083a8:	600f      	str	r7, [r1, #0]
 80083aa:	608b      	str	r3, [r1, #8]
 80083ac:	2e00      	cmp	r6, #0
 80083ae:	ddeb      	ble.n	8008388 <__sflush_r+0xac>
 80083b0:	4633      	mov	r3, r6
 80083b2:	463a      	mov	r2, r7
 80083b4:	4628      	mov	r0, r5
 80083b6:	6a21      	ldr	r1, [r4, #32]
 80083b8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80083bc:	47e0      	blx	ip
 80083be:	2800      	cmp	r0, #0
 80083c0:	dc07      	bgt.n	80083d2 <__sflush_r+0xf6>
 80083c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083ca:	f04f 30ff 	mov.w	r0, #4294967295
 80083ce:	81a3      	strh	r3, [r4, #12]
 80083d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083d2:	4407      	add	r7, r0
 80083d4:	1a36      	subs	r6, r6, r0
 80083d6:	e7e9      	b.n	80083ac <__sflush_r+0xd0>
 80083d8:	dfbffffe 	.word	0xdfbffffe

080083dc <_fflush_r>:
 80083dc:	b538      	push	{r3, r4, r5, lr}
 80083de:	690b      	ldr	r3, [r1, #16]
 80083e0:	4605      	mov	r5, r0
 80083e2:	460c      	mov	r4, r1
 80083e4:	b913      	cbnz	r3, 80083ec <_fflush_r+0x10>
 80083e6:	2500      	movs	r5, #0
 80083e8:	4628      	mov	r0, r5
 80083ea:	bd38      	pop	{r3, r4, r5, pc}
 80083ec:	b118      	cbz	r0, 80083f6 <_fflush_r+0x1a>
 80083ee:	6a03      	ldr	r3, [r0, #32]
 80083f0:	b90b      	cbnz	r3, 80083f6 <_fflush_r+0x1a>
 80083f2:	f7fd fa7d 	bl	80058f0 <__sinit>
 80083f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d0f3      	beq.n	80083e6 <_fflush_r+0xa>
 80083fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008400:	07d0      	lsls	r0, r2, #31
 8008402:	d404      	bmi.n	800840e <_fflush_r+0x32>
 8008404:	0599      	lsls	r1, r3, #22
 8008406:	d402      	bmi.n	800840e <_fflush_r+0x32>
 8008408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800840a:	f7fd fb88 	bl	8005b1e <__retarget_lock_acquire_recursive>
 800840e:	4628      	mov	r0, r5
 8008410:	4621      	mov	r1, r4
 8008412:	f7ff ff63 	bl	80082dc <__sflush_r>
 8008416:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008418:	4605      	mov	r5, r0
 800841a:	07da      	lsls	r2, r3, #31
 800841c:	d4e4      	bmi.n	80083e8 <_fflush_r+0xc>
 800841e:	89a3      	ldrh	r3, [r4, #12]
 8008420:	059b      	lsls	r3, r3, #22
 8008422:	d4e1      	bmi.n	80083e8 <_fflush_r+0xc>
 8008424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008426:	f7fd fb7b 	bl	8005b20 <__retarget_lock_release_recursive>
 800842a:	e7dd      	b.n	80083e8 <_fflush_r+0xc>

0800842c <memmove>:
 800842c:	4288      	cmp	r0, r1
 800842e:	b510      	push	{r4, lr}
 8008430:	eb01 0402 	add.w	r4, r1, r2
 8008434:	d902      	bls.n	800843c <memmove+0x10>
 8008436:	4284      	cmp	r4, r0
 8008438:	4623      	mov	r3, r4
 800843a:	d807      	bhi.n	800844c <memmove+0x20>
 800843c:	1e43      	subs	r3, r0, #1
 800843e:	42a1      	cmp	r1, r4
 8008440:	d008      	beq.n	8008454 <memmove+0x28>
 8008442:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008446:	f803 2f01 	strb.w	r2, [r3, #1]!
 800844a:	e7f8      	b.n	800843e <memmove+0x12>
 800844c:	4601      	mov	r1, r0
 800844e:	4402      	add	r2, r0
 8008450:	428a      	cmp	r2, r1
 8008452:	d100      	bne.n	8008456 <memmove+0x2a>
 8008454:	bd10      	pop	{r4, pc}
 8008456:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800845a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800845e:	e7f7      	b.n	8008450 <memmove+0x24>

08008460 <strncmp>:
 8008460:	b510      	push	{r4, lr}
 8008462:	b16a      	cbz	r2, 8008480 <strncmp+0x20>
 8008464:	3901      	subs	r1, #1
 8008466:	1884      	adds	r4, r0, r2
 8008468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800846c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008470:	429a      	cmp	r2, r3
 8008472:	d103      	bne.n	800847c <strncmp+0x1c>
 8008474:	42a0      	cmp	r0, r4
 8008476:	d001      	beq.n	800847c <strncmp+0x1c>
 8008478:	2a00      	cmp	r2, #0
 800847a:	d1f5      	bne.n	8008468 <strncmp+0x8>
 800847c:	1ad0      	subs	r0, r2, r3
 800847e:	bd10      	pop	{r4, pc}
 8008480:	4610      	mov	r0, r2
 8008482:	e7fc      	b.n	800847e <strncmp+0x1e>

08008484 <_sbrk_r>:
 8008484:	b538      	push	{r3, r4, r5, lr}
 8008486:	2300      	movs	r3, #0
 8008488:	4d05      	ldr	r5, [pc, #20]	@ (80084a0 <_sbrk_r+0x1c>)
 800848a:	4604      	mov	r4, r0
 800848c:	4608      	mov	r0, r1
 800848e:	602b      	str	r3, [r5, #0]
 8008490:	f7f9 fde4 	bl	800205c <_sbrk>
 8008494:	1c43      	adds	r3, r0, #1
 8008496:	d102      	bne.n	800849e <_sbrk_r+0x1a>
 8008498:	682b      	ldr	r3, [r5, #0]
 800849a:	b103      	cbz	r3, 800849e <_sbrk_r+0x1a>
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	bd38      	pop	{r3, r4, r5, pc}
 80084a0:	20000480 	.word	0x20000480

080084a4 <memcpy>:
 80084a4:	440a      	add	r2, r1
 80084a6:	4291      	cmp	r1, r2
 80084a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80084ac:	d100      	bne.n	80084b0 <memcpy+0xc>
 80084ae:	4770      	bx	lr
 80084b0:	b510      	push	{r4, lr}
 80084b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084b6:	4291      	cmp	r1, r2
 80084b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084bc:	d1f9      	bne.n	80084b2 <memcpy+0xe>
 80084be:	bd10      	pop	{r4, pc}

080084c0 <nan>:
 80084c0:	2000      	movs	r0, #0
 80084c2:	4901      	ldr	r1, [pc, #4]	@ (80084c8 <nan+0x8>)
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	7ff80000 	.word	0x7ff80000

080084cc <__assert_func>:
 80084cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084ce:	4614      	mov	r4, r2
 80084d0:	461a      	mov	r2, r3
 80084d2:	4b09      	ldr	r3, [pc, #36]	@ (80084f8 <__assert_func+0x2c>)
 80084d4:	4605      	mov	r5, r0
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68d8      	ldr	r0, [r3, #12]
 80084da:	b954      	cbnz	r4, 80084f2 <__assert_func+0x26>
 80084dc:	4b07      	ldr	r3, [pc, #28]	@ (80084fc <__assert_func+0x30>)
 80084de:	461c      	mov	r4, r3
 80084e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084e4:	9100      	str	r1, [sp, #0]
 80084e6:	462b      	mov	r3, r5
 80084e8:	4905      	ldr	r1, [pc, #20]	@ (8008500 <__assert_func+0x34>)
 80084ea:	f000 fba7 	bl	8008c3c <fiprintf>
 80084ee:	f000 fbb7 	bl	8008c60 <abort>
 80084f2:	4b04      	ldr	r3, [pc, #16]	@ (8008504 <__assert_func+0x38>)
 80084f4:	e7f4      	b.n	80084e0 <__assert_func+0x14>
 80084f6:	bf00      	nop
 80084f8:	20000018 	.word	0x20000018
 80084fc:	08009c4d 	.word	0x08009c4d
 8008500:	08009c1f 	.word	0x08009c1f
 8008504:	08009c12 	.word	0x08009c12

08008508 <_calloc_r>:
 8008508:	b570      	push	{r4, r5, r6, lr}
 800850a:	fba1 5402 	umull	r5, r4, r1, r2
 800850e:	b93c      	cbnz	r4, 8008520 <_calloc_r+0x18>
 8008510:	4629      	mov	r1, r5
 8008512:	f7fe f9db 	bl	80068cc <_malloc_r>
 8008516:	4606      	mov	r6, r0
 8008518:	b928      	cbnz	r0, 8008526 <_calloc_r+0x1e>
 800851a:	2600      	movs	r6, #0
 800851c:	4630      	mov	r0, r6
 800851e:	bd70      	pop	{r4, r5, r6, pc}
 8008520:	220c      	movs	r2, #12
 8008522:	6002      	str	r2, [r0, #0]
 8008524:	e7f9      	b.n	800851a <_calloc_r+0x12>
 8008526:	462a      	mov	r2, r5
 8008528:	4621      	mov	r1, r4
 800852a:	f7fd fa7a 	bl	8005a22 <memset>
 800852e:	e7f5      	b.n	800851c <_calloc_r+0x14>

08008530 <rshift>:
 8008530:	6903      	ldr	r3, [r0, #16]
 8008532:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008536:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800853a:	f100 0414 	add.w	r4, r0, #20
 800853e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008542:	dd46      	ble.n	80085d2 <rshift+0xa2>
 8008544:	f011 011f 	ands.w	r1, r1, #31
 8008548:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800854c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008550:	d10c      	bne.n	800856c <rshift+0x3c>
 8008552:	4629      	mov	r1, r5
 8008554:	f100 0710 	add.w	r7, r0, #16
 8008558:	42b1      	cmp	r1, r6
 800855a:	d335      	bcc.n	80085c8 <rshift+0x98>
 800855c:	1a9b      	subs	r3, r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	1eea      	subs	r2, r5, #3
 8008562:	4296      	cmp	r6, r2
 8008564:	bf38      	it	cc
 8008566:	2300      	movcc	r3, #0
 8008568:	4423      	add	r3, r4
 800856a:	e015      	b.n	8008598 <rshift+0x68>
 800856c:	46a1      	mov	r9, r4
 800856e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008572:	f1c1 0820 	rsb	r8, r1, #32
 8008576:	40cf      	lsrs	r7, r1
 8008578:	f105 0e04 	add.w	lr, r5, #4
 800857c:	4576      	cmp	r6, lr
 800857e:	46f4      	mov	ip, lr
 8008580:	d816      	bhi.n	80085b0 <rshift+0x80>
 8008582:	1a9a      	subs	r2, r3, r2
 8008584:	0092      	lsls	r2, r2, #2
 8008586:	3a04      	subs	r2, #4
 8008588:	3501      	adds	r5, #1
 800858a:	42ae      	cmp	r6, r5
 800858c:	bf38      	it	cc
 800858e:	2200      	movcc	r2, #0
 8008590:	18a3      	adds	r3, r4, r2
 8008592:	50a7      	str	r7, [r4, r2]
 8008594:	b107      	cbz	r7, 8008598 <rshift+0x68>
 8008596:	3304      	adds	r3, #4
 8008598:	42a3      	cmp	r3, r4
 800859a:	eba3 0204 	sub.w	r2, r3, r4
 800859e:	bf08      	it	eq
 80085a0:	2300      	moveq	r3, #0
 80085a2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80085a6:	6102      	str	r2, [r0, #16]
 80085a8:	bf08      	it	eq
 80085aa:	6143      	streq	r3, [r0, #20]
 80085ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085b0:	f8dc c000 	ldr.w	ip, [ip]
 80085b4:	fa0c fc08 	lsl.w	ip, ip, r8
 80085b8:	ea4c 0707 	orr.w	r7, ip, r7
 80085bc:	f849 7b04 	str.w	r7, [r9], #4
 80085c0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80085c4:	40cf      	lsrs	r7, r1
 80085c6:	e7d9      	b.n	800857c <rshift+0x4c>
 80085c8:	f851 cb04 	ldr.w	ip, [r1], #4
 80085cc:	f847 cf04 	str.w	ip, [r7, #4]!
 80085d0:	e7c2      	b.n	8008558 <rshift+0x28>
 80085d2:	4623      	mov	r3, r4
 80085d4:	e7e0      	b.n	8008598 <rshift+0x68>

080085d6 <__hexdig_fun>:
 80085d6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80085da:	2b09      	cmp	r3, #9
 80085dc:	d802      	bhi.n	80085e4 <__hexdig_fun+0xe>
 80085de:	3820      	subs	r0, #32
 80085e0:	b2c0      	uxtb	r0, r0
 80085e2:	4770      	bx	lr
 80085e4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80085e8:	2b05      	cmp	r3, #5
 80085ea:	d801      	bhi.n	80085f0 <__hexdig_fun+0x1a>
 80085ec:	3847      	subs	r0, #71	@ 0x47
 80085ee:	e7f7      	b.n	80085e0 <__hexdig_fun+0xa>
 80085f0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80085f4:	2b05      	cmp	r3, #5
 80085f6:	d801      	bhi.n	80085fc <__hexdig_fun+0x26>
 80085f8:	3827      	subs	r0, #39	@ 0x27
 80085fa:	e7f1      	b.n	80085e0 <__hexdig_fun+0xa>
 80085fc:	2000      	movs	r0, #0
 80085fe:	4770      	bx	lr

08008600 <__gethex>:
 8008600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008604:	468a      	mov	sl, r1
 8008606:	4690      	mov	r8, r2
 8008608:	b085      	sub	sp, #20
 800860a:	9302      	str	r3, [sp, #8]
 800860c:	680b      	ldr	r3, [r1, #0]
 800860e:	9001      	str	r0, [sp, #4]
 8008610:	1c9c      	adds	r4, r3, #2
 8008612:	46a1      	mov	r9, r4
 8008614:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008618:	2830      	cmp	r0, #48	@ 0x30
 800861a:	d0fa      	beq.n	8008612 <__gethex+0x12>
 800861c:	eba9 0303 	sub.w	r3, r9, r3
 8008620:	f1a3 0b02 	sub.w	fp, r3, #2
 8008624:	f7ff ffd7 	bl	80085d6 <__hexdig_fun>
 8008628:	4605      	mov	r5, r0
 800862a:	2800      	cmp	r0, #0
 800862c:	d168      	bne.n	8008700 <__gethex+0x100>
 800862e:	2201      	movs	r2, #1
 8008630:	4648      	mov	r0, r9
 8008632:	499f      	ldr	r1, [pc, #636]	@ (80088b0 <__gethex+0x2b0>)
 8008634:	f7ff ff14 	bl	8008460 <strncmp>
 8008638:	4607      	mov	r7, r0
 800863a:	2800      	cmp	r0, #0
 800863c:	d167      	bne.n	800870e <__gethex+0x10e>
 800863e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008642:	4626      	mov	r6, r4
 8008644:	f7ff ffc7 	bl	80085d6 <__hexdig_fun>
 8008648:	2800      	cmp	r0, #0
 800864a:	d062      	beq.n	8008712 <__gethex+0x112>
 800864c:	4623      	mov	r3, r4
 800864e:	7818      	ldrb	r0, [r3, #0]
 8008650:	4699      	mov	r9, r3
 8008652:	2830      	cmp	r0, #48	@ 0x30
 8008654:	f103 0301 	add.w	r3, r3, #1
 8008658:	d0f9      	beq.n	800864e <__gethex+0x4e>
 800865a:	f7ff ffbc 	bl	80085d6 <__hexdig_fun>
 800865e:	fab0 f580 	clz	r5, r0
 8008662:	f04f 0b01 	mov.w	fp, #1
 8008666:	096d      	lsrs	r5, r5, #5
 8008668:	464a      	mov	r2, r9
 800866a:	4616      	mov	r6, r2
 800866c:	7830      	ldrb	r0, [r6, #0]
 800866e:	3201      	adds	r2, #1
 8008670:	f7ff ffb1 	bl	80085d6 <__hexdig_fun>
 8008674:	2800      	cmp	r0, #0
 8008676:	d1f8      	bne.n	800866a <__gethex+0x6a>
 8008678:	2201      	movs	r2, #1
 800867a:	4630      	mov	r0, r6
 800867c:	498c      	ldr	r1, [pc, #560]	@ (80088b0 <__gethex+0x2b0>)
 800867e:	f7ff feef 	bl	8008460 <strncmp>
 8008682:	2800      	cmp	r0, #0
 8008684:	d13f      	bne.n	8008706 <__gethex+0x106>
 8008686:	b944      	cbnz	r4, 800869a <__gethex+0x9a>
 8008688:	1c74      	adds	r4, r6, #1
 800868a:	4622      	mov	r2, r4
 800868c:	4616      	mov	r6, r2
 800868e:	7830      	ldrb	r0, [r6, #0]
 8008690:	3201      	adds	r2, #1
 8008692:	f7ff ffa0 	bl	80085d6 <__hexdig_fun>
 8008696:	2800      	cmp	r0, #0
 8008698:	d1f8      	bne.n	800868c <__gethex+0x8c>
 800869a:	1ba4      	subs	r4, r4, r6
 800869c:	00a7      	lsls	r7, r4, #2
 800869e:	7833      	ldrb	r3, [r6, #0]
 80086a0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80086a4:	2b50      	cmp	r3, #80	@ 0x50
 80086a6:	d13e      	bne.n	8008726 <__gethex+0x126>
 80086a8:	7873      	ldrb	r3, [r6, #1]
 80086aa:	2b2b      	cmp	r3, #43	@ 0x2b
 80086ac:	d033      	beq.n	8008716 <__gethex+0x116>
 80086ae:	2b2d      	cmp	r3, #45	@ 0x2d
 80086b0:	d034      	beq.n	800871c <__gethex+0x11c>
 80086b2:	2400      	movs	r4, #0
 80086b4:	1c71      	adds	r1, r6, #1
 80086b6:	7808      	ldrb	r0, [r1, #0]
 80086b8:	f7ff ff8d 	bl	80085d6 <__hexdig_fun>
 80086bc:	1e43      	subs	r3, r0, #1
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	2b18      	cmp	r3, #24
 80086c2:	d830      	bhi.n	8008726 <__gethex+0x126>
 80086c4:	f1a0 0210 	sub.w	r2, r0, #16
 80086c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80086cc:	f7ff ff83 	bl	80085d6 <__hexdig_fun>
 80086d0:	f100 3cff 	add.w	ip, r0, #4294967295
 80086d4:	fa5f fc8c 	uxtb.w	ip, ip
 80086d8:	f1bc 0f18 	cmp.w	ip, #24
 80086dc:	f04f 030a 	mov.w	r3, #10
 80086e0:	d91e      	bls.n	8008720 <__gethex+0x120>
 80086e2:	b104      	cbz	r4, 80086e6 <__gethex+0xe6>
 80086e4:	4252      	negs	r2, r2
 80086e6:	4417      	add	r7, r2
 80086e8:	f8ca 1000 	str.w	r1, [sl]
 80086ec:	b1ed      	cbz	r5, 800872a <__gethex+0x12a>
 80086ee:	f1bb 0f00 	cmp.w	fp, #0
 80086f2:	bf0c      	ite	eq
 80086f4:	2506      	moveq	r5, #6
 80086f6:	2500      	movne	r5, #0
 80086f8:	4628      	mov	r0, r5
 80086fa:	b005      	add	sp, #20
 80086fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008700:	2500      	movs	r5, #0
 8008702:	462c      	mov	r4, r5
 8008704:	e7b0      	b.n	8008668 <__gethex+0x68>
 8008706:	2c00      	cmp	r4, #0
 8008708:	d1c7      	bne.n	800869a <__gethex+0x9a>
 800870a:	4627      	mov	r7, r4
 800870c:	e7c7      	b.n	800869e <__gethex+0x9e>
 800870e:	464e      	mov	r6, r9
 8008710:	462f      	mov	r7, r5
 8008712:	2501      	movs	r5, #1
 8008714:	e7c3      	b.n	800869e <__gethex+0x9e>
 8008716:	2400      	movs	r4, #0
 8008718:	1cb1      	adds	r1, r6, #2
 800871a:	e7cc      	b.n	80086b6 <__gethex+0xb6>
 800871c:	2401      	movs	r4, #1
 800871e:	e7fb      	b.n	8008718 <__gethex+0x118>
 8008720:	fb03 0002 	mla	r0, r3, r2, r0
 8008724:	e7ce      	b.n	80086c4 <__gethex+0xc4>
 8008726:	4631      	mov	r1, r6
 8008728:	e7de      	b.n	80086e8 <__gethex+0xe8>
 800872a:	4629      	mov	r1, r5
 800872c:	eba6 0309 	sub.w	r3, r6, r9
 8008730:	3b01      	subs	r3, #1
 8008732:	2b07      	cmp	r3, #7
 8008734:	dc0a      	bgt.n	800874c <__gethex+0x14c>
 8008736:	9801      	ldr	r0, [sp, #4]
 8008738:	f7fe f954 	bl	80069e4 <_Balloc>
 800873c:	4604      	mov	r4, r0
 800873e:	b940      	cbnz	r0, 8008752 <__gethex+0x152>
 8008740:	4602      	mov	r2, r0
 8008742:	21e4      	movs	r1, #228	@ 0xe4
 8008744:	4b5b      	ldr	r3, [pc, #364]	@ (80088b4 <__gethex+0x2b4>)
 8008746:	485c      	ldr	r0, [pc, #368]	@ (80088b8 <__gethex+0x2b8>)
 8008748:	f7ff fec0 	bl	80084cc <__assert_func>
 800874c:	3101      	adds	r1, #1
 800874e:	105b      	asrs	r3, r3, #1
 8008750:	e7ef      	b.n	8008732 <__gethex+0x132>
 8008752:	2300      	movs	r3, #0
 8008754:	f100 0a14 	add.w	sl, r0, #20
 8008758:	4655      	mov	r5, sl
 800875a:	469b      	mov	fp, r3
 800875c:	45b1      	cmp	r9, r6
 800875e:	d337      	bcc.n	80087d0 <__gethex+0x1d0>
 8008760:	f845 bb04 	str.w	fp, [r5], #4
 8008764:	eba5 050a 	sub.w	r5, r5, sl
 8008768:	10ad      	asrs	r5, r5, #2
 800876a:	6125      	str	r5, [r4, #16]
 800876c:	4658      	mov	r0, fp
 800876e:	f7fe fa2b 	bl	8006bc8 <__hi0bits>
 8008772:	016d      	lsls	r5, r5, #5
 8008774:	f8d8 6000 	ldr.w	r6, [r8]
 8008778:	1a2d      	subs	r5, r5, r0
 800877a:	42b5      	cmp	r5, r6
 800877c:	dd54      	ble.n	8008828 <__gethex+0x228>
 800877e:	1bad      	subs	r5, r5, r6
 8008780:	4629      	mov	r1, r5
 8008782:	4620      	mov	r0, r4
 8008784:	f7fe fdb3 	bl	80072ee <__any_on>
 8008788:	4681      	mov	r9, r0
 800878a:	b178      	cbz	r0, 80087ac <__gethex+0x1ac>
 800878c:	f04f 0901 	mov.w	r9, #1
 8008790:	1e6b      	subs	r3, r5, #1
 8008792:	1159      	asrs	r1, r3, #5
 8008794:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008798:	f003 021f 	and.w	r2, r3, #31
 800879c:	fa09 f202 	lsl.w	r2, r9, r2
 80087a0:	420a      	tst	r2, r1
 80087a2:	d003      	beq.n	80087ac <__gethex+0x1ac>
 80087a4:	454b      	cmp	r3, r9
 80087a6:	dc36      	bgt.n	8008816 <__gethex+0x216>
 80087a8:	f04f 0902 	mov.w	r9, #2
 80087ac:	4629      	mov	r1, r5
 80087ae:	4620      	mov	r0, r4
 80087b0:	f7ff febe 	bl	8008530 <rshift>
 80087b4:	442f      	add	r7, r5
 80087b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80087ba:	42bb      	cmp	r3, r7
 80087bc:	da42      	bge.n	8008844 <__gethex+0x244>
 80087be:	4621      	mov	r1, r4
 80087c0:	9801      	ldr	r0, [sp, #4]
 80087c2:	f7fe f94f 	bl	8006a64 <_Bfree>
 80087c6:	2300      	movs	r3, #0
 80087c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087ca:	25a3      	movs	r5, #163	@ 0xa3
 80087cc:	6013      	str	r3, [r2, #0]
 80087ce:	e793      	b.n	80086f8 <__gethex+0xf8>
 80087d0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80087d4:	2a2e      	cmp	r2, #46	@ 0x2e
 80087d6:	d012      	beq.n	80087fe <__gethex+0x1fe>
 80087d8:	2b20      	cmp	r3, #32
 80087da:	d104      	bne.n	80087e6 <__gethex+0x1e6>
 80087dc:	f845 bb04 	str.w	fp, [r5], #4
 80087e0:	f04f 0b00 	mov.w	fp, #0
 80087e4:	465b      	mov	r3, fp
 80087e6:	7830      	ldrb	r0, [r6, #0]
 80087e8:	9303      	str	r3, [sp, #12]
 80087ea:	f7ff fef4 	bl	80085d6 <__hexdig_fun>
 80087ee:	9b03      	ldr	r3, [sp, #12]
 80087f0:	f000 000f 	and.w	r0, r0, #15
 80087f4:	4098      	lsls	r0, r3
 80087f6:	ea4b 0b00 	orr.w	fp, fp, r0
 80087fa:	3304      	adds	r3, #4
 80087fc:	e7ae      	b.n	800875c <__gethex+0x15c>
 80087fe:	45b1      	cmp	r9, r6
 8008800:	d8ea      	bhi.n	80087d8 <__gethex+0x1d8>
 8008802:	2201      	movs	r2, #1
 8008804:	4630      	mov	r0, r6
 8008806:	492a      	ldr	r1, [pc, #168]	@ (80088b0 <__gethex+0x2b0>)
 8008808:	9303      	str	r3, [sp, #12]
 800880a:	f7ff fe29 	bl	8008460 <strncmp>
 800880e:	9b03      	ldr	r3, [sp, #12]
 8008810:	2800      	cmp	r0, #0
 8008812:	d1e1      	bne.n	80087d8 <__gethex+0x1d8>
 8008814:	e7a2      	b.n	800875c <__gethex+0x15c>
 8008816:	4620      	mov	r0, r4
 8008818:	1ea9      	subs	r1, r5, #2
 800881a:	f7fe fd68 	bl	80072ee <__any_on>
 800881e:	2800      	cmp	r0, #0
 8008820:	d0c2      	beq.n	80087a8 <__gethex+0x1a8>
 8008822:	f04f 0903 	mov.w	r9, #3
 8008826:	e7c1      	b.n	80087ac <__gethex+0x1ac>
 8008828:	da09      	bge.n	800883e <__gethex+0x23e>
 800882a:	1b75      	subs	r5, r6, r5
 800882c:	4621      	mov	r1, r4
 800882e:	462a      	mov	r2, r5
 8008830:	9801      	ldr	r0, [sp, #4]
 8008832:	f7fe fb2d 	bl	8006e90 <__lshift>
 8008836:	4604      	mov	r4, r0
 8008838:	1b7f      	subs	r7, r7, r5
 800883a:	f100 0a14 	add.w	sl, r0, #20
 800883e:	f04f 0900 	mov.w	r9, #0
 8008842:	e7b8      	b.n	80087b6 <__gethex+0x1b6>
 8008844:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008848:	42bd      	cmp	r5, r7
 800884a:	dd6f      	ble.n	800892c <__gethex+0x32c>
 800884c:	1bed      	subs	r5, r5, r7
 800884e:	42ae      	cmp	r6, r5
 8008850:	dc34      	bgt.n	80088bc <__gethex+0x2bc>
 8008852:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008856:	2b02      	cmp	r3, #2
 8008858:	d022      	beq.n	80088a0 <__gethex+0x2a0>
 800885a:	2b03      	cmp	r3, #3
 800885c:	d024      	beq.n	80088a8 <__gethex+0x2a8>
 800885e:	2b01      	cmp	r3, #1
 8008860:	d115      	bne.n	800888e <__gethex+0x28e>
 8008862:	42ae      	cmp	r6, r5
 8008864:	d113      	bne.n	800888e <__gethex+0x28e>
 8008866:	2e01      	cmp	r6, #1
 8008868:	d10b      	bne.n	8008882 <__gethex+0x282>
 800886a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800886e:	9a02      	ldr	r2, [sp, #8]
 8008870:	2562      	movs	r5, #98	@ 0x62
 8008872:	6013      	str	r3, [r2, #0]
 8008874:	2301      	movs	r3, #1
 8008876:	6123      	str	r3, [r4, #16]
 8008878:	f8ca 3000 	str.w	r3, [sl]
 800887c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800887e:	601c      	str	r4, [r3, #0]
 8008880:	e73a      	b.n	80086f8 <__gethex+0xf8>
 8008882:	4620      	mov	r0, r4
 8008884:	1e71      	subs	r1, r6, #1
 8008886:	f7fe fd32 	bl	80072ee <__any_on>
 800888a:	2800      	cmp	r0, #0
 800888c:	d1ed      	bne.n	800886a <__gethex+0x26a>
 800888e:	4621      	mov	r1, r4
 8008890:	9801      	ldr	r0, [sp, #4]
 8008892:	f7fe f8e7 	bl	8006a64 <_Bfree>
 8008896:	2300      	movs	r3, #0
 8008898:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800889a:	2550      	movs	r5, #80	@ 0x50
 800889c:	6013      	str	r3, [r2, #0]
 800889e:	e72b      	b.n	80086f8 <__gethex+0xf8>
 80088a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1f3      	bne.n	800888e <__gethex+0x28e>
 80088a6:	e7e0      	b.n	800886a <__gethex+0x26a>
 80088a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1dd      	bne.n	800886a <__gethex+0x26a>
 80088ae:	e7ee      	b.n	800888e <__gethex+0x28e>
 80088b0:	08009aa0 	.word	0x08009aa0
 80088b4:	08009937 	.word	0x08009937
 80088b8:	08009c4e 	.word	0x08009c4e
 80088bc:	1e6f      	subs	r7, r5, #1
 80088be:	f1b9 0f00 	cmp.w	r9, #0
 80088c2:	d130      	bne.n	8008926 <__gethex+0x326>
 80088c4:	b127      	cbz	r7, 80088d0 <__gethex+0x2d0>
 80088c6:	4639      	mov	r1, r7
 80088c8:	4620      	mov	r0, r4
 80088ca:	f7fe fd10 	bl	80072ee <__any_on>
 80088ce:	4681      	mov	r9, r0
 80088d0:	2301      	movs	r3, #1
 80088d2:	4629      	mov	r1, r5
 80088d4:	1b76      	subs	r6, r6, r5
 80088d6:	2502      	movs	r5, #2
 80088d8:	117a      	asrs	r2, r7, #5
 80088da:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80088de:	f007 071f 	and.w	r7, r7, #31
 80088e2:	40bb      	lsls	r3, r7
 80088e4:	4213      	tst	r3, r2
 80088e6:	4620      	mov	r0, r4
 80088e8:	bf18      	it	ne
 80088ea:	f049 0902 	orrne.w	r9, r9, #2
 80088ee:	f7ff fe1f 	bl	8008530 <rshift>
 80088f2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80088f6:	f1b9 0f00 	cmp.w	r9, #0
 80088fa:	d047      	beq.n	800898c <__gethex+0x38c>
 80088fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008900:	2b02      	cmp	r3, #2
 8008902:	d015      	beq.n	8008930 <__gethex+0x330>
 8008904:	2b03      	cmp	r3, #3
 8008906:	d017      	beq.n	8008938 <__gethex+0x338>
 8008908:	2b01      	cmp	r3, #1
 800890a:	d109      	bne.n	8008920 <__gethex+0x320>
 800890c:	f019 0f02 	tst.w	r9, #2
 8008910:	d006      	beq.n	8008920 <__gethex+0x320>
 8008912:	f8da 3000 	ldr.w	r3, [sl]
 8008916:	ea49 0903 	orr.w	r9, r9, r3
 800891a:	f019 0f01 	tst.w	r9, #1
 800891e:	d10e      	bne.n	800893e <__gethex+0x33e>
 8008920:	f045 0510 	orr.w	r5, r5, #16
 8008924:	e032      	b.n	800898c <__gethex+0x38c>
 8008926:	f04f 0901 	mov.w	r9, #1
 800892a:	e7d1      	b.n	80088d0 <__gethex+0x2d0>
 800892c:	2501      	movs	r5, #1
 800892e:	e7e2      	b.n	80088f6 <__gethex+0x2f6>
 8008930:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008932:	f1c3 0301 	rsb	r3, r3, #1
 8008936:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008938:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800893a:	2b00      	cmp	r3, #0
 800893c:	d0f0      	beq.n	8008920 <__gethex+0x320>
 800893e:	f04f 0c00 	mov.w	ip, #0
 8008942:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008946:	f104 0314 	add.w	r3, r4, #20
 800894a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800894e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008952:	4618      	mov	r0, r3
 8008954:	f853 2b04 	ldr.w	r2, [r3], #4
 8008958:	f1b2 3fff 	cmp.w	r2, #4294967295
 800895c:	d01b      	beq.n	8008996 <__gethex+0x396>
 800895e:	3201      	adds	r2, #1
 8008960:	6002      	str	r2, [r0, #0]
 8008962:	2d02      	cmp	r5, #2
 8008964:	f104 0314 	add.w	r3, r4, #20
 8008968:	d13c      	bne.n	80089e4 <__gethex+0x3e4>
 800896a:	f8d8 2000 	ldr.w	r2, [r8]
 800896e:	3a01      	subs	r2, #1
 8008970:	42b2      	cmp	r2, r6
 8008972:	d109      	bne.n	8008988 <__gethex+0x388>
 8008974:	2201      	movs	r2, #1
 8008976:	1171      	asrs	r1, r6, #5
 8008978:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800897c:	f006 061f 	and.w	r6, r6, #31
 8008980:	fa02 f606 	lsl.w	r6, r2, r6
 8008984:	421e      	tst	r6, r3
 8008986:	d13a      	bne.n	80089fe <__gethex+0x3fe>
 8008988:	f045 0520 	orr.w	r5, r5, #32
 800898c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800898e:	601c      	str	r4, [r3, #0]
 8008990:	9b02      	ldr	r3, [sp, #8]
 8008992:	601f      	str	r7, [r3, #0]
 8008994:	e6b0      	b.n	80086f8 <__gethex+0xf8>
 8008996:	4299      	cmp	r1, r3
 8008998:	f843 cc04 	str.w	ip, [r3, #-4]
 800899c:	d8d9      	bhi.n	8008952 <__gethex+0x352>
 800899e:	68a3      	ldr	r3, [r4, #8]
 80089a0:	459b      	cmp	fp, r3
 80089a2:	db17      	blt.n	80089d4 <__gethex+0x3d4>
 80089a4:	6861      	ldr	r1, [r4, #4]
 80089a6:	9801      	ldr	r0, [sp, #4]
 80089a8:	3101      	adds	r1, #1
 80089aa:	f7fe f81b 	bl	80069e4 <_Balloc>
 80089ae:	4681      	mov	r9, r0
 80089b0:	b918      	cbnz	r0, 80089ba <__gethex+0x3ba>
 80089b2:	4602      	mov	r2, r0
 80089b4:	2184      	movs	r1, #132	@ 0x84
 80089b6:	4b19      	ldr	r3, [pc, #100]	@ (8008a1c <__gethex+0x41c>)
 80089b8:	e6c5      	b.n	8008746 <__gethex+0x146>
 80089ba:	6922      	ldr	r2, [r4, #16]
 80089bc:	f104 010c 	add.w	r1, r4, #12
 80089c0:	3202      	adds	r2, #2
 80089c2:	0092      	lsls	r2, r2, #2
 80089c4:	300c      	adds	r0, #12
 80089c6:	f7ff fd6d 	bl	80084a4 <memcpy>
 80089ca:	4621      	mov	r1, r4
 80089cc:	9801      	ldr	r0, [sp, #4]
 80089ce:	f7fe f849 	bl	8006a64 <_Bfree>
 80089d2:	464c      	mov	r4, r9
 80089d4:	6923      	ldr	r3, [r4, #16]
 80089d6:	1c5a      	adds	r2, r3, #1
 80089d8:	6122      	str	r2, [r4, #16]
 80089da:	2201      	movs	r2, #1
 80089dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80089e0:	615a      	str	r2, [r3, #20]
 80089e2:	e7be      	b.n	8008962 <__gethex+0x362>
 80089e4:	6922      	ldr	r2, [r4, #16]
 80089e6:	455a      	cmp	r2, fp
 80089e8:	dd0b      	ble.n	8008a02 <__gethex+0x402>
 80089ea:	2101      	movs	r1, #1
 80089ec:	4620      	mov	r0, r4
 80089ee:	f7ff fd9f 	bl	8008530 <rshift>
 80089f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80089f6:	3701      	adds	r7, #1
 80089f8:	42bb      	cmp	r3, r7
 80089fa:	f6ff aee0 	blt.w	80087be <__gethex+0x1be>
 80089fe:	2501      	movs	r5, #1
 8008a00:	e7c2      	b.n	8008988 <__gethex+0x388>
 8008a02:	f016 061f 	ands.w	r6, r6, #31
 8008a06:	d0fa      	beq.n	80089fe <__gethex+0x3fe>
 8008a08:	4453      	add	r3, sl
 8008a0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008a0e:	f7fe f8db 	bl	8006bc8 <__hi0bits>
 8008a12:	f1c6 0620 	rsb	r6, r6, #32
 8008a16:	42b0      	cmp	r0, r6
 8008a18:	dbe7      	blt.n	80089ea <__gethex+0x3ea>
 8008a1a:	e7f0      	b.n	80089fe <__gethex+0x3fe>
 8008a1c:	08009937 	.word	0x08009937

08008a20 <L_shift>:
 8008a20:	f1c2 0208 	rsb	r2, r2, #8
 8008a24:	0092      	lsls	r2, r2, #2
 8008a26:	b570      	push	{r4, r5, r6, lr}
 8008a28:	f1c2 0620 	rsb	r6, r2, #32
 8008a2c:	6843      	ldr	r3, [r0, #4]
 8008a2e:	6804      	ldr	r4, [r0, #0]
 8008a30:	fa03 f506 	lsl.w	r5, r3, r6
 8008a34:	432c      	orrs	r4, r5
 8008a36:	40d3      	lsrs	r3, r2
 8008a38:	6004      	str	r4, [r0, #0]
 8008a3a:	f840 3f04 	str.w	r3, [r0, #4]!
 8008a3e:	4288      	cmp	r0, r1
 8008a40:	d3f4      	bcc.n	8008a2c <L_shift+0xc>
 8008a42:	bd70      	pop	{r4, r5, r6, pc}

08008a44 <__match>:
 8008a44:	b530      	push	{r4, r5, lr}
 8008a46:	6803      	ldr	r3, [r0, #0]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a4e:	b914      	cbnz	r4, 8008a56 <__match+0x12>
 8008a50:	6003      	str	r3, [r0, #0]
 8008a52:	2001      	movs	r0, #1
 8008a54:	bd30      	pop	{r4, r5, pc}
 8008a56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a5a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008a5e:	2d19      	cmp	r5, #25
 8008a60:	bf98      	it	ls
 8008a62:	3220      	addls	r2, #32
 8008a64:	42a2      	cmp	r2, r4
 8008a66:	d0f0      	beq.n	8008a4a <__match+0x6>
 8008a68:	2000      	movs	r0, #0
 8008a6a:	e7f3      	b.n	8008a54 <__match+0x10>

08008a6c <__hexnan>:
 8008a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a70:	2500      	movs	r5, #0
 8008a72:	680b      	ldr	r3, [r1, #0]
 8008a74:	4682      	mov	sl, r0
 8008a76:	115e      	asrs	r6, r3, #5
 8008a78:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008a7c:	f013 031f 	ands.w	r3, r3, #31
 8008a80:	bf18      	it	ne
 8008a82:	3604      	addne	r6, #4
 8008a84:	1f37      	subs	r7, r6, #4
 8008a86:	4690      	mov	r8, r2
 8008a88:	46b9      	mov	r9, r7
 8008a8a:	463c      	mov	r4, r7
 8008a8c:	46ab      	mov	fp, r5
 8008a8e:	b087      	sub	sp, #28
 8008a90:	6801      	ldr	r1, [r0, #0]
 8008a92:	9301      	str	r3, [sp, #4]
 8008a94:	f846 5c04 	str.w	r5, [r6, #-4]
 8008a98:	9502      	str	r5, [sp, #8]
 8008a9a:	784a      	ldrb	r2, [r1, #1]
 8008a9c:	1c4b      	adds	r3, r1, #1
 8008a9e:	9303      	str	r3, [sp, #12]
 8008aa0:	b342      	cbz	r2, 8008af4 <__hexnan+0x88>
 8008aa2:	4610      	mov	r0, r2
 8008aa4:	9105      	str	r1, [sp, #20]
 8008aa6:	9204      	str	r2, [sp, #16]
 8008aa8:	f7ff fd95 	bl	80085d6 <__hexdig_fun>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	d151      	bne.n	8008b54 <__hexnan+0xe8>
 8008ab0:	9a04      	ldr	r2, [sp, #16]
 8008ab2:	9905      	ldr	r1, [sp, #20]
 8008ab4:	2a20      	cmp	r2, #32
 8008ab6:	d818      	bhi.n	8008aea <__hexnan+0x7e>
 8008ab8:	9b02      	ldr	r3, [sp, #8]
 8008aba:	459b      	cmp	fp, r3
 8008abc:	dd13      	ble.n	8008ae6 <__hexnan+0x7a>
 8008abe:	454c      	cmp	r4, r9
 8008ac0:	d206      	bcs.n	8008ad0 <__hexnan+0x64>
 8008ac2:	2d07      	cmp	r5, #7
 8008ac4:	dc04      	bgt.n	8008ad0 <__hexnan+0x64>
 8008ac6:	462a      	mov	r2, r5
 8008ac8:	4649      	mov	r1, r9
 8008aca:	4620      	mov	r0, r4
 8008acc:	f7ff ffa8 	bl	8008a20 <L_shift>
 8008ad0:	4544      	cmp	r4, r8
 8008ad2:	d952      	bls.n	8008b7a <__hexnan+0x10e>
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	f1a4 0904 	sub.w	r9, r4, #4
 8008ada:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ade:	461d      	mov	r5, r3
 8008ae0:	464c      	mov	r4, r9
 8008ae2:	f8cd b008 	str.w	fp, [sp, #8]
 8008ae6:	9903      	ldr	r1, [sp, #12]
 8008ae8:	e7d7      	b.n	8008a9a <__hexnan+0x2e>
 8008aea:	2a29      	cmp	r2, #41	@ 0x29
 8008aec:	d157      	bne.n	8008b9e <__hexnan+0x132>
 8008aee:	3102      	adds	r1, #2
 8008af0:	f8ca 1000 	str.w	r1, [sl]
 8008af4:	f1bb 0f00 	cmp.w	fp, #0
 8008af8:	d051      	beq.n	8008b9e <__hexnan+0x132>
 8008afa:	454c      	cmp	r4, r9
 8008afc:	d206      	bcs.n	8008b0c <__hexnan+0xa0>
 8008afe:	2d07      	cmp	r5, #7
 8008b00:	dc04      	bgt.n	8008b0c <__hexnan+0xa0>
 8008b02:	462a      	mov	r2, r5
 8008b04:	4649      	mov	r1, r9
 8008b06:	4620      	mov	r0, r4
 8008b08:	f7ff ff8a 	bl	8008a20 <L_shift>
 8008b0c:	4544      	cmp	r4, r8
 8008b0e:	d936      	bls.n	8008b7e <__hexnan+0x112>
 8008b10:	4623      	mov	r3, r4
 8008b12:	f1a8 0204 	sub.w	r2, r8, #4
 8008b16:	f853 1b04 	ldr.w	r1, [r3], #4
 8008b1a:	429f      	cmp	r7, r3
 8008b1c:	f842 1f04 	str.w	r1, [r2, #4]!
 8008b20:	d2f9      	bcs.n	8008b16 <__hexnan+0xaa>
 8008b22:	1b3b      	subs	r3, r7, r4
 8008b24:	f023 0303 	bic.w	r3, r3, #3
 8008b28:	3304      	adds	r3, #4
 8008b2a:	3401      	adds	r4, #1
 8008b2c:	3e03      	subs	r6, #3
 8008b2e:	42b4      	cmp	r4, r6
 8008b30:	bf88      	it	hi
 8008b32:	2304      	movhi	r3, #4
 8008b34:	2200      	movs	r2, #0
 8008b36:	4443      	add	r3, r8
 8008b38:	f843 2b04 	str.w	r2, [r3], #4
 8008b3c:	429f      	cmp	r7, r3
 8008b3e:	d2fb      	bcs.n	8008b38 <__hexnan+0xcc>
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	b91b      	cbnz	r3, 8008b4c <__hexnan+0xe0>
 8008b44:	4547      	cmp	r7, r8
 8008b46:	d128      	bne.n	8008b9a <__hexnan+0x12e>
 8008b48:	2301      	movs	r3, #1
 8008b4a:	603b      	str	r3, [r7, #0]
 8008b4c:	2005      	movs	r0, #5
 8008b4e:	b007      	add	sp, #28
 8008b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b54:	3501      	adds	r5, #1
 8008b56:	2d08      	cmp	r5, #8
 8008b58:	f10b 0b01 	add.w	fp, fp, #1
 8008b5c:	dd06      	ble.n	8008b6c <__hexnan+0x100>
 8008b5e:	4544      	cmp	r4, r8
 8008b60:	d9c1      	bls.n	8008ae6 <__hexnan+0x7a>
 8008b62:	2300      	movs	r3, #0
 8008b64:	2501      	movs	r5, #1
 8008b66:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b6a:	3c04      	subs	r4, #4
 8008b6c:	6822      	ldr	r2, [r4, #0]
 8008b6e:	f000 000f 	and.w	r0, r0, #15
 8008b72:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008b76:	6020      	str	r0, [r4, #0]
 8008b78:	e7b5      	b.n	8008ae6 <__hexnan+0x7a>
 8008b7a:	2508      	movs	r5, #8
 8008b7c:	e7b3      	b.n	8008ae6 <__hexnan+0x7a>
 8008b7e:	9b01      	ldr	r3, [sp, #4]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d0dd      	beq.n	8008b40 <__hexnan+0xd4>
 8008b84:	f04f 32ff 	mov.w	r2, #4294967295
 8008b88:	f1c3 0320 	rsb	r3, r3, #32
 8008b8c:	40da      	lsrs	r2, r3
 8008b8e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008b92:	4013      	ands	r3, r2
 8008b94:	f846 3c04 	str.w	r3, [r6, #-4]
 8008b98:	e7d2      	b.n	8008b40 <__hexnan+0xd4>
 8008b9a:	3f04      	subs	r7, #4
 8008b9c:	e7d0      	b.n	8008b40 <__hexnan+0xd4>
 8008b9e:	2004      	movs	r0, #4
 8008ba0:	e7d5      	b.n	8008b4e <__hexnan+0xe2>

08008ba2 <__ascii_mbtowc>:
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	b901      	cbnz	r1, 8008ba8 <__ascii_mbtowc+0x6>
 8008ba6:	a901      	add	r1, sp, #4
 8008ba8:	b142      	cbz	r2, 8008bbc <__ascii_mbtowc+0x1a>
 8008baa:	b14b      	cbz	r3, 8008bc0 <__ascii_mbtowc+0x1e>
 8008bac:	7813      	ldrb	r3, [r2, #0]
 8008bae:	600b      	str	r3, [r1, #0]
 8008bb0:	7812      	ldrb	r2, [r2, #0]
 8008bb2:	1e10      	subs	r0, r2, #0
 8008bb4:	bf18      	it	ne
 8008bb6:	2001      	movne	r0, #1
 8008bb8:	b002      	add	sp, #8
 8008bba:	4770      	bx	lr
 8008bbc:	4610      	mov	r0, r2
 8008bbe:	e7fb      	b.n	8008bb8 <__ascii_mbtowc+0x16>
 8008bc0:	f06f 0001 	mvn.w	r0, #1
 8008bc4:	e7f8      	b.n	8008bb8 <__ascii_mbtowc+0x16>

08008bc6 <_realloc_r>:
 8008bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bca:	4680      	mov	r8, r0
 8008bcc:	4615      	mov	r5, r2
 8008bce:	460c      	mov	r4, r1
 8008bd0:	b921      	cbnz	r1, 8008bdc <_realloc_r+0x16>
 8008bd2:	4611      	mov	r1, r2
 8008bd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd8:	f7fd be78 	b.w	80068cc <_malloc_r>
 8008bdc:	b92a      	cbnz	r2, 8008bea <_realloc_r+0x24>
 8008bde:	f7fd fe03 	bl	80067e8 <_free_r>
 8008be2:	2400      	movs	r4, #0
 8008be4:	4620      	mov	r0, r4
 8008be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bea:	f000 f840 	bl	8008c6e <_malloc_usable_size_r>
 8008bee:	4285      	cmp	r5, r0
 8008bf0:	4606      	mov	r6, r0
 8008bf2:	d802      	bhi.n	8008bfa <_realloc_r+0x34>
 8008bf4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008bf8:	d8f4      	bhi.n	8008be4 <_realloc_r+0x1e>
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	4640      	mov	r0, r8
 8008bfe:	f7fd fe65 	bl	80068cc <_malloc_r>
 8008c02:	4607      	mov	r7, r0
 8008c04:	2800      	cmp	r0, #0
 8008c06:	d0ec      	beq.n	8008be2 <_realloc_r+0x1c>
 8008c08:	42b5      	cmp	r5, r6
 8008c0a:	462a      	mov	r2, r5
 8008c0c:	4621      	mov	r1, r4
 8008c0e:	bf28      	it	cs
 8008c10:	4632      	movcs	r2, r6
 8008c12:	f7ff fc47 	bl	80084a4 <memcpy>
 8008c16:	4621      	mov	r1, r4
 8008c18:	4640      	mov	r0, r8
 8008c1a:	f7fd fde5 	bl	80067e8 <_free_r>
 8008c1e:	463c      	mov	r4, r7
 8008c20:	e7e0      	b.n	8008be4 <_realloc_r+0x1e>

08008c22 <__ascii_wctomb>:
 8008c22:	4603      	mov	r3, r0
 8008c24:	4608      	mov	r0, r1
 8008c26:	b141      	cbz	r1, 8008c3a <__ascii_wctomb+0x18>
 8008c28:	2aff      	cmp	r2, #255	@ 0xff
 8008c2a:	d904      	bls.n	8008c36 <__ascii_wctomb+0x14>
 8008c2c:	228a      	movs	r2, #138	@ 0x8a
 8008c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c32:	601a      	str	r2, [r3, #0]
 8008c34:	4770      	bx	lr
 8008c36:	2001      	movs	r0, #1
 8008c38:	700a      	strb	r2, [r1, #0]
 8008c3a:	4770      	bx	lr

08008c3c <fiprintf>:
 8008c3c:	b40e      	push	{r1, r2, r3}
 8008c3e:	b503      	push	{r0, r1, lr}
 8008c40:	4601      	mov	r1, r0
 8008c42:	ab03      	add	r3, sp, #12
 8008c44:	4805      	ldr	r0, [pc, #20]	@ (8008c5c <fiprintf+0x20>)
 8008c46:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c4a:	6800      	ldr	r0, [r0, #0]
 8008c4c:	9301      	str	r3, [sp, #4]
 8008c4e:	f000 f83d 	bl	8008ccc <_vfiprintf_r>
 8008c52:	b002      	add	sp, #8
 8008c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c58:	b003      	add	sp, #12
 8008c5a:	4770      	bx	lr
 8008c5c:	20000018 	.word	0x20000018

08008c60 <abort>:
 8008c60:	2006      	movs	r0, #6
 8008c62:	b508      	push	{r3, lr}
 8008c64:	f000 fa06 	bl	8009074 <raise>
 8008c68:	2001      	movs	r0, #1
 8008c6a:	f7f9 f982 	bl	8001f72 <_exit>

08008c6e <_malloc_usable_size_r>:
 8008c6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c72:	1f18      	subs	r0, r3, #4
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	bfbc      	itt	lt
 8008c78:	580b      	ldrlt	r3, [r1, r0]
 8008c7a:	18c0      	addlt	r0, r0, r3
 8008c7c:	4770      	bx	lr

08008c7e <__sfputc_r>:
 8008c7e:	6893      	ldr	r3, [r2, #8]
 8008c80:	b410      	push	{r4}
 8008c82:	3b01      	subs	r3, #1
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	6093      	str	r3, [r2, #8]
 8008c88:	da07      	bge.n	8008c9a <__sfputc_r+0x1c>
 8008c8a:	6994      	ldr	r4, [r2, #24]
 8008c8c:	42a3      	cmp	r3, r4
 8008c8e:	db01      	blt.n	8008c94 <__sfputc_r+0x16>
 8008c90:	290a      	cmp	r1, #10
 8008c92:	d102      	bne.n	8008c9a <__sfputc_r+0x1c>
 8008c94:	bc10      	pop	{r4}
 8008c96:	f000 b931 	b.w	8008efc <__swbuf_r>
 8008c9a:	6813      	ldr	r3, [r2, #0]
 8008c9c:	1c58      	adds	r0, r3, #1
 8008c9e:	6010      	str	r0, [r2, #0]
 8008ca0:	7019      	strb	r1, [r3, #0]
 8008ca2:	4608      	mov	r0, r1
 8008ca4:	bc10      	pop	{r4}
 8008ca6:	4770      	bx	lr

08008ca8 <__sfputs_r>:
 8008ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008caa:	4606      	mov	r6, r0
 8008cac:	460f      	mov	r7, r1
 8008cae:	4614      	mov	r4, r2
 8008cb0:	18d5      	adds	r5, r2, r3
 8008cb2:	42ac      	cmp	r4, r5
 8008cb4:	d101      	bne.n	8008cba <__sfputs_r+0x12>
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	e007      	b.n	8008cca <__sfputs_r+0x22>
 8008cba:	463a      	mov	r2, r7
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cc2:	f7ff ffdc 	bl	8008c7e <__sfputc_r>
 8008cc6:	1c43      	adds	r3, r0, #1
 8008cc8:	d1f3      	bne.n	8008cb2 <__sfputs_r+0xa>
 8008cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ccc <_vfiprintf_r>:
 8008ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd0:	460d      	mov	r5, r1
 8008cd2:	4614      	mov	r4, r2
 8008cd4:	4698      	mov	r8, r3
 8008cd6:	4606      	mov	r6, r0
 8008cd8:	b09d      	sub	sp, #116	@ 0x74
 8008cda:	b118      	cbz	r0, 8008ce4 <_vfiprintf_r+0x18>
 8008cdc:	6a03      	ldr	r3, [r0, #32]
 8008cde:	b90b      	cbnz	r3, 8008ce4 <_vfiprintf_r+0x18>
 8008ce0:	f7fc fe06 	bl	80058f0 <__sinit>
 8008ce4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ce6:	07d9      	lsls	r1, r3, #31
 8008ce8:	d405      	bmi.n	8008cf6 <_vfiprintf_r+0x2a>
 8008cea:	89ab      	ldrh	r3, [r5, #12]
 8008cec:	059a      	lsls	r2, r3, #22
 8008cee:	d402      	bmi.n	8008cf6 <_vfiprintf_r+0x2a>
 8008cf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cf2:	f7fc ff14 	bl	8005b1e <__retarget_lock_acquire_recursive>
 8008cf6:	89ab      	ldrh	r3, [r5, #12]
 8008cf8:	071b      	lsls	r3, r3, #28
 8008cfa:	d501      	bpl.n	8008d00 <_vfiprintf_r+0x34>
 8008cfc:	692b      	ldr	r3, [r5, #16]
 8008cfe:	b99b      	cbnz	r3, 8008d28 <_vfiprintf_r+0x5c>
 8008d00:	4629      	mov	r1, r5
 8008d02:	4630      	mov	r0, r6
 8008d04:	f000 f938 	bl	8008f78 <__swsetup_r>
 8008d08:	b170      	cbz	r0, 8008d28 <_vfiprintf_r+0x5c>
 8008d0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d0c:	07dc      	lsls	r4, r3, #31
 8008d0e:	d504      	bpl.n	8008d1a <_vfiprintf_r+0x4e>
 8008d10:	f04f 30ff 	mov.w	r0, #4294967295
 8008d14:	b01d      	add	sp, #116	@ 0x74
 8008d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d1a:	89ab      	ldrh	r3, [r5, #12]
 8008d1c:	0598      	lsls	r0, r3, #22
 8008d1e:	d4f7      	bmi.n	8008d10 <_vfiprintf_r+0x44>
 8008d20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d22:	f7fc fefd 	bl	8005b20 <__retarget_lock_release_recursive>
 8008d26:	e7f3      	b.n	8008d10 <_vfiprintf_r+0x44>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d2c:	2320      	movs	r3, #32
 8008d2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d32:	2330      	movs	r3, #48	@ 0x30
 8008d34:	f04f 0901 	mov.w	r9, #1
 8008d38:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d3c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008ee8 <_vfiprintf_r+0x21c>
 8008d40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d44:	4623      	mov	r3, r4
 8008d46:	469a      	mov	sl, r3
 8008d48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d4c:	b10a      	cbz	r2, 8008d52 <_vfiprintf_r+0x86>
 8008d4e:	2a25      	cmp	r2, #37	@ 0x25
 8008d50:	d1f9      	bne.n	8008d46 <_vfiprintf_r+0x7a>
 8008d52:	ebba 0b04 	subs.w	fp, sl, r4
 8008d56:	d00b      	beq.n	8008d70 <_vfiprintf_r+0xa4>
 8008d58:	465b      	mov	r3, fp
 8008d5a:	4622      	mov	r2, r4
 8008d5c:	4629      	mov	r1, r5
 8008d5e:	4630      	mov	r0, r6
 8008d60:	f7ff ffa2 	bl	8008ca8 <__sfputs_r>
 8008d64:	3001      	adds	r0, #1
 8008d66:	f000 80a7 	beq.w	8008eb8 <_vfiprintf_r+0x1ec>
 8008d6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d6c:	445a      	add	r2, fp
 8008d6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d70:	f89a 3000 	ldrb.w	r3, [sl]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f000 809f 	beq.w	8008eb8 <_vfiprintf_r+0x1ec>
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d84:	f10a 0a01 	add.w	sl, sl, #1
 8008d88:	9304      	str	r3, [sp, #16]
 8008d8a:	9307      	str	r3, [sp, #28]
 8008d8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d90:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d92:	4654      	mov	r4, sl
 8008d94:	2205      	movs	r2, #5
 8008d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d9a:	4853      	ldr	r0, [pc, #332]	@ (8008ee8 <_vfiprintf_r+0x21c>)
 8008d9c:	f7fc fec1 	bl	8005b22 <memchr>
 8008da0:	9a04      	ldr	r2, [sp, #16]
 8008da2:	b9d8      	cbnz	r0, 8008ddc <_vfiprintf_r+0x110>
 8008da4:	06d1      	lsls	r1, r2, #27
 8008da6:	bf44      	itt	mi
 8008da8:	2320      	movmi	r3, #32
 8008daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dae:	0713      	lsls	r3, r2, #28
 8008db0:	bf44      	itt	mi
 8008db2:	232b      	movmi	r3, #43	@ 0x2b
 8008db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008db8:	f89a 3000 	ldrb.w	r3, [sl]
 8008dbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dbe:	d015      	beq.n	8008dec <_vfiprintf_r+0x120>
 8008dc0:	4654      	mov	r4, sl
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	f04f 0c0a 	mov.w	ip, #10
 8008dc8:	9a07      	ldr	r2, [sp, #28]
 8008dca:	4621      	mov	r1, r4
 8008dcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dd0:	3b30      	subs	r3, #48	@ 0x30
 8008dd2:	2b09      	cmp	r3, #9
 8008dd4:	d94b      	bls.n	8008e6e <_vfiprintf_r+0x1a2>
 8008dd6:	b1b0      	cbz	r0, 8008e06 <_vfiprintf_r+0x13a>
 8008dd8:	9207      	str	r2, [sp, #28]
 8008dda:	e014      	b.n	8008e06 <_vfiprintf_r+0x13a>
 8008ddc:	eba0 0308 	sub.w	r3, r0, r8
 8008de0:	fa09 f303 	lsl.w	r3, r9, r3
 8008de4:	4313      	orrs	r3, r2
 8008de6:	46a2      	mov	sl, r4
 8008de8:	9304      	str	r3, [sp, #16]
 8008dea:	e7d2      	b.n	8008d92 <_vfiprintf_r+0xc6>
 8008dec:	9b03      	ldr	r3, [sp, #12]
 8008dee:	1d19      	adds	r1, r3, #4
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	9103      	str	r1, [sp, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	bfbb      	ittet	lt
 8008df8:	425b      	neglt	r3, r3
 8008dfa:	f042 0202 	orrlt.w	r2, r2, #2
 8008dfe:	9307      	strge	r3, [sp, #28]
 8008e00:	9307      	strlt	r3, [sp, #28]
 8008e02:	bfb8      	it	lt
 8008e04:	9204      	strlt	r2, [sp, #16]
 8008e06:	7823      	ldrb	r3, [r4, #0]
 8008e08:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e0a:	d10a      	bne.n	8008e22 <_vfiprintf_r+0x156>
 8008e0c:	7863      	ldrb	r3, [r4, #1]
 8008e0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e10:	d132      	bne.n	8008e78 <_vfiprintf_r+0x1ac>
 8008e12:	9b03      	ldr	r3, [sp, #12]
 8008e14:	3402      	adds	r4, #2
 8008e16:	1d1a      	adds	r2, r3, #4
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	9203      	str	r2, [sp, #12]
 8008e1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e20:	9305      	str	r3, [sp, #20]
 8008e22:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008eec <_vfiprintf_r+0x220>
 8008e26:	2203      	movs	r2, #3
 8008e28:	4650      	mov	r0, sl
 8008e2a:	7821      	ldrb	r1, [r4, #0]
 8008e2c:	f7fc fe79 	bl	8005b22 <memchr>
 8008e30:	b138      	cbz	r0, 8008e42 <_vfiprintf_r+0x176>
 8008e32:	2240      	movs	r2, #64	@ 0x40
 8008e34:	9b04      	ldr	r3, [sp, #16]
 8008e36:	eba0 000a 	sub.w	r0, r0, sl
 8008e3a:	4082      	lsls	r2, r0
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	3401      	adds	r4, #1
 8008e40:	9304      	str	r3, [sp, #16]
 8008e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e46:	2206      	movs	r2, #6
 8008e48:	4829      	ldr	r0, [pc, #164]	@ (8008ef0 <_vfiprintf_r+0x224>)
 8008e4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e4e:	f7fc fe68 	bl	8005b22 <memchr>
 8008e52:	2800      	cmp	r0, #0
 8008e54:	d03f      	beq.n	8008ed6 <_vfiprintf_r+0x20a>
 8008e56:	4b27      	ldr	r3, [pc, #156]	@ (8008ef4 <_vfiprintf_r+0x228>)
 8008e58:	bb1b      	cbnz	r3, 8008ea2 <_vfiprintf_r+0x1d6>
 8008e5a:	9b03      	ldr	r3, [sp, #12]
 8008e5c:	3307      	adds	r3, #7
 8008e5e:	f023 0307 	bic.w	r3, r3, #7
 8008e62:	3308      	adds	r3, #8
 8008e64:	9303      	str	r3, [sp, #12]
 8008e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e68:	443b      	add	r3, r7
 8008e6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e6c:	e76a      	b.n	8008d44 <_vfiprintf_r+0x78>
 8008e6e:	460c      	mov	r4, r1
 8008e70:	2001      	movs	r0, #1
 8008e72:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e76:	e7a8      	b.n	8008dca <_vfiprintf_r+0xfe>
 8008e78:	2300      	movs	r3, #0
 8008e7a:	f04f 0c0a 	mov.w	ip, #10
 8008e7e:	4619      	mov	r1, r3
 8008e80:	3401      	adds	r4, #1
 8008e82:	9305      	str	r3, [sp, #20]
 8008e84:	4620      	mov	r0, r4
 8008e86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e8a:	3a30      	subs	r2, #48	@ 0x30
 8008e8c:	2a09      	cmp	r2, #9
 8008e8e:	d903      	bls.n	8008e98 <_vfiprintf_r+0x1cc>
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d0c6      	beq.n	8008e22 <_vfiprintf_r+0x156>
 8008e94:	9105      	str	r1, [sp, #20]
 8008e96:	e7c4      	b.n	8008e22 <_vfiprintf_r+0x156>
 8008e98:	4604      	mov	r4, r0
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ea0:	e7f0      	b.n	8008e84 <_vfiprintf_r+0x1b8>
 8008ea2:	ab03      	add	r3, sp, #12
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	462a      	mov	r2, r5
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	4b13      	ldr	r3, [pc, #76]	@ (8008ef8 <_vfiprintf_r+0x22c>)
 8008eac:	a904      	add	r1, sp, #16
 8008eae:	f7fb fec5 	bl	8004c3c <_printf_float>
 8008eb2:	4607      	mov	r7, r0
 8008eb4:	1c78      	adds	r0, r7, #1
 8008eb6:	d1d6      	bne.n	8008e66 <_vfiprintf_r+0x19a>
 8008eb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008eba:	07d9      	lsls	r1, r3, #31
 8008ebc:	d405      	bmi.n	8008eca <_vfiprintf_r+0x1fe>
 8008ebe:	89ab      	ldrh	r3, [r5, #12]
 8008ec0:	059a      	lsls	r2, r3, #22
 8008ec2:	d402      	bmi.n	8008eca <_vfiprintf_r+0x1fe>
 8008ec4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ec6:	f7fc fe2b 	bl	8005b20 <__retarget_lock_release_recursive>
 8008eca:	89ab      	ldrh	r3, [r5, #12]
 8008ecc:	065b      	lsls	r3, r3, #25
 8008ece:	f53f af1f 	bmi.w	8008d10 <_vfiprintf_r+0x44>
 8008ed2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ed4:	e71e      	b.n	8008d14 <_vfiprintf_r+0x48>
 8008ed6:	ab03      	add	r3, sp, #12
 8008ed8:	9300      	str	r3, [sp, #0]
 8008eda:	462a      	mov	r2, r5
 8008edc:	4630      	mov	r0, r6
 8008ede:	4b06      	ldr	r3, [pc, #24]	@ (8008ef8 <_vfiprintf_r+0x22c>)
 8008ee0:	a904      	add	r1, sp, #16
 8008ee2:	f7fc f949 	bl	8005178 <_printf_i>
 8008ee6:	e7e4      	b.n	8008eb2 <_vfiprintf_r+0x1e6>
 8008ee8:	08009bf9 	.word	0x08009bf9
 8008eec:	08009bff 	.word	0x08009bff
 8008ef0:	08009c03 	.word	0x08009c03
 8008ef4:	08004c3d 	.word	0x08004c3d
 8008ef8:	08008ca9 	.word	0x08008ca9

08008efc <__swbuf_r>:
 8008efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008efe:	460e      	mov	r6, r1
 8008f00:	4614      	mov	r4, r2
 8008f02:	4605      	mov	r5, r0
 8008f04:	b118      	cbz	r0, 8008f0e <__swbuf_r+0x12>
 8008f06:	6a03      	ldr	r3, [r0, #32]
 8008f08:	b90b      	cbnz	r3, 8008f0e <__swbuf_r+0x12>
 8008f0a:	f7fc fcf1 	bl	80058f0 <__sinit>
 8008f0e:	69a3      	ldr	r3, [r4, #24]
 8008f10:	60a3      	str	r3, [r4, #8]
 8008f12:	89a3      	ldrh	r3, [r4, #12]
 8008f14:	071a      	lsls	r2, r3, #28
 8008f16:	d501      	bpl.n	8008f1c <__swbuf_r+0x20>
 8008f18:	6923      	ldr	r3, [r4, #16]
 8008f1a:	b943      	cbnz	r3, 8008f2e <__swbuf_r+0x32>
 8008f1c:	4621      	mov	r1, r4
 8008f1e:	4628      	mov	r0, r5
 8008f20:	f000 f82a 	bl	8008f78 <__swsetup_r>
 8008f24:	b118      	cbz	r0, 8008f2e <__swbuf_r+0x32>
 8008f26:	f04f 37ff 	mov.w	r7, #4294967295
 8008f2a:	4638      	mov	r0, r7
 8008f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f2e:	6823      	ldr	r3, [r4, #0]
 8008f30:	6922      	ldr	r2, [r4, #16]
 8008f32:	b2f6      	uxtb	r6, r6
 8008f34:	1a98      	subs	r0, r3, r2
 8008f36:	6963      	ldr	r3, [r4, #20]
 8008f38:	4637      	mov	r7, r6
 8008f3a:	4283      	cmp	r3, r0
 8008f3c:	dc05      	bgt.n	8008f4a <__swbuf_r+0x4e>
 8008f3e:	4621      	mov	r1, r4
 8008f40:	4628      	mov	r0, r5
 8008f42:	f7ff fa4b 	bl	80083dc <_fflush_r>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d1ed      	bne.n	8008f26 <__swbuf_r+0x2a>
 8008f4a:	68a3      	ldr	r3, [r4, #8]
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	60a3      	str	r3, [r4, #8]
 8008f50:	6823      	ldr	r3, [r4, #0]
 8008f52:	1c5a      	adds	r2, r3, #1
 8008f54:	6022      	str	r2, [r4, #0]
 8008f56:	701e      	strb	r6, [r3, #0]
 8008f58:	6962      	ldr	r2, [r4, #20]
 8008f5a:	1c43      	adds	r3, r0, #1
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d004      	beq.n	8008f6a <__swbuf_r+0x6e>
 8008f60:	89a3      	ldrh	r3, [r4, #12]
 8008f62:	07db      	lsls	r3, r3, #31
 8008f64:	d5e1      	bpl.n	8008f2a <__swbuf_r+0x2e>
 8008f66:	2e0a      	cmp	r6, #10
 8008f68:	d1df      	bne.n	8008f2a <__swbuf_r+0x2e>
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	f7ff fa35 	bl	80083dc <_fflush_r>
 8008f72:	2800      	cmp	r0, #0
 8008f74:	d0d9      	beq.n	8008f2a <__swbuf_r+0x2e>
 8008f76:	e7d6      	b.n	8008f26 <__swbuf_r+0x2a>

08008f78 <__swsetup_r>:
 8008f78:	b538      	push	{r3, r4, r5, lr}
 8008f7a:	4b29      	ldr	r3, [pc, #164]	@ (8009020 <__swsetup_r+0xa8>)
 8008f7c:	4605      	mov	r5, r0
 8008f7e:	6818      	ldr	r0, [r3, #0]
 8008f80:	460c      	mov	r4, r1
 8008f82:	b118      	cbz	r0, 8008f8c <__swsetup_r+0x14>
 8008f84:	6a03      	ldr	r3, [r0, #32]
 8008f86:	b90b      	cbnz	r3, 8008f8c <__swsetup_r+0x14>
 8008f88:	f7fc fcb2 	bl	80058f0 <__sinit>
 8008f8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f90:	0719      	lsls	r1, r3, #28
 8008f92:	d422      	bmi.n	8008fda <__swsetup_r+0x62>
 8008f94:	06da      	lsls	r2, r3, #27
 8008f96:	d407      	bmi.n	8008fa8 <__swsetup_r+0x30>
 8008f98:	2209      	movs	r2, #9
 8008f9a:	602a      	str	r2, [r5, #0]
 8008f9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa4:	81a3      	strh	r3, [r4, #12]
 8008fa6:	e033      	b.n	8009010 <__swsetup_r+0x98>
 8008fa8:	0758      	lsls	r0, r3, #29
 8008faa:	d512      	bpl.n	8008fd2 <__swsetup_r+0x5a>
 8008fac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fae:	b141      	cbz	r1, 8008fc2 <__swsetup_r+0x4a>
 8008fb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fb4:	4299      	cmp	r1, r3
 8008fb6:	d002      	beq.n	8008fbe <__swsetup_r+0x46>
 8008fb8:	4628      	mov	r0, r5
 8008fba:	f7fd fc15 	bl	80067e8 <_free_r>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fc2:	89a3      	ldrh	r3, [r4, #12]
 8008fc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008fc8:	81a3      	strh	r3, [r4, #12]
 8008fca:	2300      	movs	r3, #0
 8008fcc:	6063      	str	r3, [r4, #4]
 8008fce:	6923      	ldr	r3, [r4, #16]
 8008fd0:	6023      	str	r3, [r4, #0]
 8008fd2:	89a3      	ldrh	r3, [r4, #12]
 8008fd4:	f043 0308 	orr.w	r3, r3, #8
 8008fd8:	81a3      	strh	r3, [r4, #12]
 8008fda:	6923      	ldr	r3, [r4, #16]
 8008fdc:	b94b      	cbnz	r3, 8008ff2 <__swsetup_r+0x7a>
 8008fde:	89a3      	ldrh	r3, [r4, #12]
 8008fe0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008fe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fe8:	d003      	beq.n	8008ff2 <__swsetup_r+0x7a>
 8008fea:	4621      	mov	r1, r4
 8008fec:	4628      	mov	r0, r5
 8008fee:	f000 f882 	bl	80090f6 <__smakebuf_r>
 8008ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ff6:	f013 0201 	ands.w	r2, r3, #1
 8008ffa:	d00a      	beq.n	8009012 <__swsetup_r+0x9a>
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	60a2      	str	r2, [r4, #8]
 8009000:	6962      	ldr	r2, [r4, #20]
 8009002:	4252      	negs	r2, r2
 8009004:	61a2      	str	r2, [r4, #24]
 8009006:	6922      	ldr	r2, [r4, #16]
 8009008:	b942      	cbnz	r2, 800901c <__swsetup_r+0xa4>
 800900a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800900e:	d1c5      	bne.n	8008f9c <__swsetup_r+0x24>
 8009010:	bd38      	pop	{r3, r4, r5, pc}
 8009012:	0799      	lsls	r1, r3, #30
 8009014:	bf58      	it	pl
 8009016:	6962      	ldrpl	r2, [r4, #20]
 8009018:	60a2      	str	r2, [r4, #8]
 800901a:	e7f4      	b.n	8009006 <__swsetup_r+0x8e>
 800901c:	2000      	movs	r0, #0
 800901e:	e7f7      	b.n	8009010 <__swsetup_r+0x98>
 8009020:	20000018 	.word	0x20000018

08009024 <_raise_r>:
 8009024:	291f      	cmp	r1, #31
 8009026:	b538      	push	{r3, r4, r5, lr}
 8009028:	4605      	mov	r5, r0
 800902a:	460c      	mov	r4, r1
 800902c:	d904      	bls.n	8009038 <_raise_r+0x14>
 800902e:	2316      	movs	r3, #22
 8009030:	6003      	str	r3, [r0, #0]
 8009032:	f04f 30ff 	mov.w	r0, #4294967295
 8009036:	bd38      	pop	{r3, r4, r5, pc}
 8009038:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800903a:	b112      	cbz	r2, 8009042 <_raise_r+0x1e>
 800903c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009040:	b94b      	cbnz	r3, 8009056 <_raise_r+0x32>
 8009042:	4628      	mov	r0, r5
 8009044:	f000 f830 	bl	80090a8 <_getpid_r>
 8009048:	4622      	mov	r2, r4
 800904a:	4601      	mov	r1, r0
 800904c:	4628      	mov	r0, r5
 800904e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009052:	f000 b817 	b.w	8009084 <_kill_r>
 8009056:	2b01      	cmp	r3, #1
 8009058:	d00a      	beq.n	8009070 <_raise_r+0x4c>
 800905a:	1c59      	adds	r1, r3, #1
 800905c:	d103      	bne.n	8009066 <_raise_r+0x42>
 800905e:	2316      	movs	r3, #22
 8009060:	6003      	str	r3, [r0, #0]
 8009062:	2001      	movs	r0, #1
 8009064:	e7e7      	b.n	8009036 <_raise_r+0x12>
 8009066:	2100      	movs	r1, #0
 8009068:	4620      	mov	r0, r4
 800906a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800906e:	4798      	blx	r3
 8009070:	2000      	movs	r0, #0
 8009072:	e7e0      	b.n	8009036 <_raise_r+0x12>

08009074 <raise>:
 8009074:	4b02      	ldr	r3, [pc, #8]	@ (8009080 <raise+0xc>)
 8009076:	4601      	mov	r1, r0
 8009078:	6818      	ldr	r0, [r3, #0]
 800907a:	f7ff bfd3 	b.w	8009024 <_raise_r>
 800907e:	bf00      	nop
 8009080:	20000018 	.word	0x20000018

08009084 <_kill_r>:
 8009084:	b538      	push	{r3, r4, r5, lr}
 8009086:	2300      	movs	r3, #0
 8009088:	4d06      	ldr	r5, [pc, #24]	@ (80090a4 <_kill_r+0x20>)
 800908a:	4604      	mov	r4, r0
 800908c:	4608      	mov	r0, r1
 800908e:	4611      	mov	r1, r2
 8009090:	602b      	str	r3, [r5, #0]
 8009092:	f7f8 ff5e 	bl	8001f52 <_kill>
 8009096:	1c43      	adds	r3, r0, #1
 8009098:	d102      	bne.n	80090a0 <_kill_r+0x1c>
 800909a:	682b      	ldr	r3, [r5, #0]
 800909c:	b103      	cbz	r3, 80090a0 <_kill_r+0x1c>
 800909e:	6023      	str	r3, [r4, #0]
 80090a0:	bd38      	pop	{r3, r4, r5, pc}
 80090a2:	bf00      	nop
 80090a4:	20000480 	.word	0x20000480

080090a8 <_getpid_r>:
 80090a8:	f7f8 bf4c 	b.w	8001f44 <_getpid>

080090ac <__swhatbuf_r>:
 80090ac:	b570      	push	{r4, r5, r6, lr}
 80090ae:	460c      	mov	r4, r1
 80090b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090b4:	4615      	mov	r5, r2
 80090b6:	2900      	cmp	r1, #0
 80090b8:	461e      	mov	r6, r3
 80090ba:	b096      	sub	sp, #88	@ 0x58
 80090bc:	da0c      	bge.n	80090d8 <__swhatbuf_r+0x2c>
 80090be:	89a3      	ldrh	r3, [r4, #12]
 80090c0:	2100      	movs	r1, #0
 80090c2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80090c6:	bf14      	ite	ne
 80090c8:	2340      	movne	r3, #64	@ 0x40
 80090ca:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80090ce:	2000      	movs	r0, #0
 80090d0:	6031      	str	r1, [r6, #0]
 80090d2:	602b      	str	r3, [r5, #0]
 80090d4:	b016      	add	sp, #88	@ 0x58
 80090d6:	bd70      	pop	{r4, r5, r6, pc}
 80090d8:	466a      	mov	r2, sp
 80090da:	f000 f849 	bl	8009170 <_fstat_r>
 80090de:	2800      	cmp	r0, #0
 80090e0:	dbed      	blt.n	80090be <__swhatbuf_r+0x12>
 80090e2:	9901      	ldr	r1, [sp, #4]
 80090e4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80090e8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80090ec:	4259      	negs	r1, r3
 80090ee:	4159      	adcs	r1, r3
 80090f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090f4:	e7eb      	b.n	80090ce <__swhatbuf_r+0x22>

080090f6 <__smakebuf_r>:
 80090f6:	898b      	ldrh	r3, [r1, #12]
 80090f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090fa:	079d      	lsls	r5, r3, #30
 80090fc:	4606      	mov	r6, r0
 80090fe:	460c      	mov	r4, r1
 8009100:	d507      	bpl.n	8009112 <__smakebuf_r+0x1c>
 8009102:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009106:	6023      	str	r3, [r4, #0]
 8009108:	6123      	str	r3, [r4, #16]
 800910a:	2301      	movs	r3, #1
 800910c:	6163      	str	r3, [r4, #20]
 800910e:	b003      	add	sp, #12
 8009110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009112:	466a      	mov	r2, sp
 8009114:	ab01      	add	r3, sp, #4
 8009116:	f7ff ffc9 	bl	80090ac <__swhatbuf_r>
 800911a:	9f00      	ldr	r7, [sp, #0]
 800911c:	4605      	mov	r5, r0
 800911e:	4639      	mov	r1, r7
 8009120:	4630      	mov	r0, r6
 8009122:	f7fd fbd3 	bl	80068cc <_malloc_r>
 8009126:	b948      	cbnz	r0, 800913c <__smakebuf_r+0x46>
 8009128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800912c:	059a      	lsls	r2, r3, #22
 800912e:	d4ee      	bmi.n	800910e <__smakebuf_r+0x18>
 8009130:	f023 0303 	bic.w	r3, r3, #3
 8009134:	f043 0302 	orr.w	r3, r3, #2
 8009138:	81a3      	strh	r3, [r4, #12]
 800913a:	e7e2      	b.n	8009102 <__smakebuf_r+0xc>
 800913c:	89a3      	ldrh	r3, [r4, #12]
 800913e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009146:	81a3      	strh	r3, [r4, #12]
 8009148:	9b01      	ldr	r3, [sp, #4]
 800914a:	6020      	str	r0, [r4, #0]
 800914c:	b15b      	cbz	r3, 8009166 <__smakebuf_r+0x70>
 800914e:	4630      	mov	r0, r6
 8009150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009154:	f000 f81e 	bl	8009194 <_isatty_r>
 8009158:	b128      	cbz	r0, 8009166 <__smakebuf_r+0x70>
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	f023 0303 	bic.w	r3, r3, #3
 8009160:	f043 0301 	orr.w	r3, r3, #1
 8009164:	81a3      	strh	r3, [r4, #12]
 8009166:	89a3      	ldrh	r3, [r4, #12]
 8009168:	431d      	orrs	r5, r3
 800916a:	81a5      	strh	r5, [r4, #12]
 800916c:	e7cf      	b.n	800910e <__smakebuf_r+0x18>
	...

08009170 <_fstat_r>:
 8009170:	b538      	push	{r3, r4, r5, lr}
 8009172:	2300      	movs	r3, #0
 8009174:	4d06      	ldr	r5, [pc, #24]	@ (8009190 <_fstat_r+0x20>)
 8009176:	4604      	mov	r4, r0
 8009178:	4608      	mov	r0, r1
 800917a:	4611      	mov	r1, r2
 800917c:	602b      	str	r3, [r5, #0]
 800917e:	f7f8 ff47 	bl	8002010 <_fstat>
 8009182:	1c43      	adds	r3, r0, #1
 8009184:	d102      	bne.n	800918c <_fstat_r+0x1c>
 8009186:	682b      	ldr	r3, [r5, #0]
 8009188:	b103      	cbz	r3, 800918c <_fstat_r+0x1c>
 800918a:	6023      	str	r3, [r4, #0]
 800918c:	bd38      	pop	{r3, r4, r5, pc}
 800918e:	bf00      	nop
 8009190:	20000480 	.word	0x20000480

08009194 <_isatty_r>:
 8009194:	b538      	push	{r3, r4, r5, lr}
 8009196:	2300      	movs	r3, #0
 8009198:	4d05      	ldr	r5, [pc, #20]	@ (80091b0 <_isatty_r+0x1c>)
 800919a:	4604      	mov	r4, r0
 800919c:	4608      	mov	r0, r1
 800919e:	602b      	str	r3, [r5, #0]
 80091a0:	f7f8 ff45 	bl	800202e <_isatty>
 80091a4:	1c43      	adds	r3, r0, #1
 80091a6:	d102      	bne.n	80091ae <_isatty_r+0x1a>
 80091a8:	682b      	ldr	r3, [r5, #0]
 80091aa:	b103      	cbz	r3, 80091ae <_isatty_r+0x1a>
 80091ac:	6023      	str	r3, [r4, #0]
 80091ae:	bd38      	pop	{r3, r4, r5, pc}
 80091b0:	20000480 	.word	0x20000480

080091b4 <log>:
 80091b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b6:	4604      	mov	r4, r0
 80091b8:	460d      	mov	r5, r1
 80091ba:	f000 f82d 	bl	8009218 <__ieee754_log>
 80091be:	4622      	mov	r2, r4
 80091c0:	4606      	mov	r6, r0
 80091c2:	460f      	mov	r7, r1
 80091c4:	462b      	mov	r3, r5
 80091c6:	4620      	mov	r0, r4
 80091c8:	4629      	mov	r1, r5
 80091ca:	f7f7 fc1f 	bl	8000a0c <__aeabi_dcmpun>
 80091ce:	b998      	cbnz	r0, 80091f8 <log+0x44>
 80091d0:	2200      	movs	r2, #0
 80091d2:	2300      	movs	r3, #0
 80091d4:	4620      	mov	r0, r4
 80091d6:	4629      	mov	r1, r5
 80091d8:	f7f7 fc0e 	bl	80009f8 <__aeabi_dcmpgt>
 80091dc:	b960      	cbnz	r0, 80091f8 <log+0x44>
 80091de:	2200      	movs	r2, #0
 80091e0:	2300      	movs	r3, #0
 80091e2:	4620      	mov	r0, r4
 80091e4:	4629      	mov	r1, r5
 80091e6:	f7f7 fbdf 	bl	80009a8 <__aeabi_dcmpeq>
 80091ea:	b140      	cbz	r0, 80091fe <log+0x4a>
 80091ec:	f7fc fc6c 	bl	8005ac8 <__errno>
 80091f0:	2322      	movs	r3, #34	@ 0x22
 80091f2:	2600      	movs	r6, #0
 80091f4:	4f06      	ldr	r7, [pc, #24]	@ (8009210 <log+0x5c>)
 80091f6:	6003      	str	r3, [r0, #0]
 80091f8:	4630      	mov	r0, r6
 80091fa:	4639      	mov	r1, r7
 80091fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091fe:	f7fc fc63 	bl	8005ac8 <__errno>
 8009202:	2321      	movs	r3, #33	@ 0x21
 8009204:	6003      	str	r3, [r0, #0]
 8009206:	4803      	ldr	r0, [pc, #12]	@ (8009214 <log+0x60>)
 8009208:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800920c:	f7ff b958 	b.w	80084c0 <nan>
 8009210:	fff00000 	.word	0xfff00000
 8009214:	08009c4d 	.word	0x08009c4d

08009218 <__ieee754_log>:
 8009218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800921c:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	460d      	mov	r5, r1
 8009226:	b087      	sub	sp, #28
 8009228:	da24      	bge.n	8009274 <__ieee754_log+0x5c>
 800922a:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800922e:	4304      	orrs	r4, r0
 8009230:	d108      	bne.n	8009244 <__ieee754_log+0x2c>
 8009232:	2200      	movs	r2, #0
 8009234:	2300      	movs	r3, #0
 8009236:	2000      	movs	r0, #0
 8009238:	49cb      	ldr	r1, [pc, #812]	@ (8009568 <__ieee754_log+0x350>)
 800923a:	f7f7 fa77 	bl	800072c <__aeabi_ddiv>
 800923e:	b007      	add	sp, #28
 8009240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009244:	2900      	cmp	r1, #0
 8009246:	da04      	bge.n	8009252 <__ieee754_log+0x3a>
 8009248:	f7f6 ff8e 	bl	8000168 <__aeabi_dsub>
 800924c:	2200      	movs	r2, #0
 800924e:	2300      	movs	r3, #0
 8009250:	e7f3      	b.n	800923a <__ieee754_log+0x22>
 8009252:	2200      	movs	r2, #0
 8009254:	4bc5      	ldr	r3, [pc, #788]	@ (800956c <__ieee754_log+0x354>)
 8009256:	f7f7 f93f 	bl	80004d8 <__aeabi_dmul>
 800925a:	460b      	mov	r3, r1
 800925c:	460d      	mov	r5, r1
 800925e:	4602      	mov	r2, r0
 8009260:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8009264:	48c2      	ldr	r0, [pc, #776]	@ (8009570 <__ieee754_log+0x358>)
 8009266:	4285      	cmp	r5, r0
 8009268:	dd06      	ble.n	8009278 <__ieee754_log+0x60>
 800926a:	4610      	mov	r0, r2
 800926c:	4619      	mov	r1, r3
 800926e:	f7f6 ff7d 	bl	800016c <__adddf3>
 8009272:	e7e4      	b.n	800923e <__ieee754_log+0x26>
 8009274:	2100      	movs	r1, #0
 8009276:	e7f5      	b.n	8009264 <__ieee754_log+0x4c>
 8009278:	152c      	asrs	r4, r5, #20
 800927a:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800927e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009282:	440c      	add	r4, r1
 8009284:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 8009288:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 800928c:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 8009290:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 8009294:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 8009298:	ea41 0305 	orr.w	r3, r1, r5
 800929c:	4610      	mov	r0, r2
 800929e:	4619      	mov	r1, r3
 80092a0:	2200      	movs	r2, #0
 80092a2:	4bb4      	ldr	r3, [pc, #720]	@ (8009574 <__ieee754_log+0x35c>)
 80092a4:	f7f6 ff60 	bl	8000168 <__aeabi_dsub>
 80092a8:	1cab      	adds	r3, r5, #2
 80092aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	4682      	mov	sl, r0
 80092b2:	468b      	mov	fp, r1
 80092b4:	f04f 0200 	mov.w	r2, #0
 80092b8:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 80092bc:	dc53      	bgt.n	8009366 <__ieee754_log+0x14e>
 80092be:	2300      	movs	r3, #0
 80092c0:	f7f7 fb72 	bl	80009a8 <__aeabi_dcmpeq>
 80092c4:	b1d0      	cbz	r0, 80092fc <__ieee754_log+0xe4>
 80092c6:	2c00      	cmp	r4, #0
 80092c8:	f000 8120 	beq.w	800950c <__ieee754_log+0x2f4>
 80092cc:	4620      	mov	r0, r4
 80092ce:	f7f7 f899 	bl	8000404 <__aeabi_i2d>
 80092d2:	a391      	add	r3, pc, #580	@ (adr r3, 8009518 <__ieee754_log+0x300>)
 80092d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d8:	4606      	mov	r6, r0
 80092da:	460f      	mov	r7, r1
 80092dc:	f7f7 f8fc 	bl	80004d8 <__aeabi_dmul>
 80092e0:	a38f      	add	r3, pc, #572	@ (adr r3, 8009520 <__ieee754_log+0x308>)
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	4604      	mov	r4, r0
 80092e8:	460d      	mov	r5, r1
 80092ea:	4630      	mov	r0, r6
 80092ec:	4639      	mov	r1, r7
 80092ee:	f7f7 f8f3 	bl	80004d8 <__aeabi_dmul>
 80092f2:	4602      	mov	r2, r0
 80092f4:	460b      	mov	r3, r1
 80092f6:	4620      	mov	r0, r4
 80092f8:	4629      	mov	r1, r5
 80092fa:	e7b8      	b.n	800926e <__ieee754_log+0x56>
 80092fc:	a38a      	add	r3, pc, #552	@ (adr r3, 8009528 <__ieee754_log+0x310>)
 80092fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009302:	4650      	mov	r0, sl
 8009304:	4659      	mov	r1, fp
 8009306:	f7f7 f8e7 	bl	80004d8 <__aeabi_dmul>
 800930a:	4602      	mov	r2, r0
 800930c:	460b      	mov	r3, r1
 800930e:	2000      	movs	r0, #0
 8009310:	4999      	ldr	r1, [pc, #612]	@ (8009578 <__ieee754_log+0x360>)
 8009312:	f7f6 ff29 	bl	8000168 <__aeabi_dsub>
 8009316:	4652      	mov	r2, sl
 8009318:	4606      	mov	r6, r0
 800931a:	460f      	mov	r7, r1
 800931c:	465b      	mov	r3, fp
 800931e:	4650      	mov	r0, sl
 8009320:	4659      	mov	r1, fp
 8009322:	f7f7 f8d9 	bl	80004d8 <__aeabi_dmul>
 8009326:	4602      	mov	r2, r0
 8009328:	460b      	mov	r3, r1
 800932a:	4630      	mov	r0, r6
 800932c:	4639      	mov	r1, r7
 800932e:	f7f7 f8d3 	bl	80004d8 <__aeabi_dmul>
 8009332:	4606      	mov	r6, r0
 8009334:	460f      	mov	r7, r1
 8009336:	b914      	cbnz	r4, 800933e <__ieee754_log+0x126>
 8009338:	4632      	mov	r2, r6
 800933a:	463b      	mov	r3, r7
 800933c:	e0a0      	b.n	8009480 <__ieee754_log+0x268>
 800933e:	4620      	mov	r0, r4
 8009340:	f7f7 f860 	bl	8000404 <__aeabi_i2d>
 8009344:	a374      	add	r3, pc, #464	@ (adr r3, 8009518 <__ieee754_log+0x300>)
 8009346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934a:	4680      	mov	r8, r0
 800934c:	4689      	mov	r9, r1
 800934e:	f7f7 f8c3 	bl	80004d8 <__aeabi_dmul>
 8009352:	a373      	add	r3, pc, #460	@ (adr r3, 8009520 <__ieee754_log+0x308>)
 8009354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009358:	4604      	mov	r4, r0
 800935a:	460d      	mov	r5, r1
 800935c:	4640      	mov	r0, r8
 800935e:	4649      	mov	r1, r9
 8009360:	f7f7 f8ba 	bl	80004d8 <__aeabi_dmul>
 8009364:	e0a5      	b.n	80094b2 <__ieee754_log+0x29a>
 8009366:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800936a:	f7f6 feff 	bl	800016c <__adddf3>
 800936e:	4602      	mov	r2, r0
 8009370:	460b      	mov	r3, r1
 8009372:	4650      	mov	r0, sl
 8009374:	4659      	mov	r1, fp
 8009376:	f7f7 f9d9 	bl	800072c <__aeabi_ddiv>
 800937a:	e9cd 0100 	strd	r0, r1, [sp]
 800937e:	4620      	mov	r0, r4
 8009380:	f7f7 f840 	bl	8000404 <__aeabi_i2d>
 8009384:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009388:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800938c:	4610      	mov	r0, r2
 800938e:	4619      	mov	r1, r3
 8009390:	f7f7 f8a2 	bl	80004d8 <__aeabi_dmul>
 8009394:	4602      	mov	r2, r0
 8009396:	460b      	mov	r3, r1
 8009398:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800939c:	f7f7 f89c 	bl	80004d8 <__aeabi_dmul>
 80093a0:	a363      	add	r3, pc, #396	@ (adr r3, 8009530 <__ieee754_log+0x318>)
 80093a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a6:	4680      	mov	r8, r0
 80093a8:	4689      	mov	r9, r1
 80093aa:	f7f7 f895 	bl	80004d8 <__aeabi_dmul>
 80093ae:	a362      	add	r3, pc, #392	@ (adr r3, 8009538 <__ieee754_log+0x320>)
 80093b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b4:	f7f6 feda 	bl	800016c <__adddf3>
 80093b8:	4642      	mov	r2, r8
 80093ba:	464b      	mov	r3, r9
 80093bc:	f7f7 f88c 	bl	80004d8 <__aeabi_dmul>
 80093c0:	a35f      	add	r3, pc, #380	@ (adr r3, 8009540 <__ieee754_log+0x328>)
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	f7f6 fed1 	bl	800016c <__adddf3>
 80093ca:	4642      	mov	r2, r8
 80093cc:	464b      	mov	r3, r9
 80093ce:	f7f7 f883 	bl	80004d8 <__aeabi_dmul>
 80093d2:	a35d      	add	r3, pc, #372	@ (adr r3, 8009548 <__ieee754_log+0x330>)
 80093d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d8:	f7f6 fec8 	bl	800016c <__adddf3>
 80093dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093e0:	f7f7 f87a 	bl	80004d8 <__aeabi_dmul>
 80093e4:	a35a      	add	r3, pc, #360	@ (adr r3, 8009550 <__ieee754_log+0x338>)
 80093e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093ee:	4640      	mov	r0, r8
 80093f0:	4649      	mov	r1, r9
 80093f2:	f7f7 f871 	bl	80004d8 <__aeabi_dmul>
 80093f6:	a358      	add	r3, pc, #352	@ (adr r3, 8009558 <__ieee754_log+0x340>)
 80093f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fc:	f7f6 feb6 	bl	800016c <__adddf3>
 8009400:	4642      	mov	r2, r8
 8009402:	464b      	mov	r3, r9
 8009404:	f7f7 f868 	bl	80004d8 <__aeabi_dmul>
 8009408:	a355      	add	r3, pc, #340	@ (adr r3, 8009560 <__ieee754_log+0x348>)
 800940a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940e:	f7f6 fead 	bl	800016c <__adddf3>
 8009412:	4642      	mov	r2, r8
 8009414:	464b      	mov	r3, r9
 8009416:	f7f7 f85f 	bl	80004d8 <__aeabi_dmul>
 800941a:	4602      	mov	r2, r0
 800941c:	460b      	mov	r3, r1
 800941e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009422:	f7f6 fea3 	bl	800016c <__adddf3>
 8009426:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800942a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800942e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8009432:	3551      	adds	r5, #81	@ 0x51
 8009434:	4335      	orrs	r5, r6
 8009436:	2d00      	cmp	r5, #0
 8009438:	4680      	mov	r8, r0
 800943a:	4689      	mov	r9, r1
 800943c:	dd48      	ble.n	80094d0 <__ieee754_log+0x2b8>
 800943e:	2200      	movs	r2, #0
 8009440:	4b4d      	ldr	r3, [pc, #308]	@ (8009578 <__ieee754_log+0x360>)
 8009442:	4650      	mov	r0, sl
 8009444:	4659      	mov	r1, fp
 8009446:	f7f7 f847 	bl	80004d8 <__aeabi_dmul>
 800944a:	4652      	mov	r2, sl
 800944c:	465b      	mov	r3, fp
 800944e:	f7f7 f843 	bl	80004d8 <__aeabi_dmul>
 8009452:	4602      	mov	r2, r0
 8009454:	460b      	mov	r3, r1
 8009456:	4606      	mov	r6, r0
 8009458:	460f      	mov	r7, r1
 800945a:	4640      	mov	r0, r8
 800945c:	4649      	mov	r1, r9
 800945e:	f7f6 fe85 	bl	800016c <__adddf3>
 8009462:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009466:	f7f7 f837 	bl	80004d8 <__aeabi_dmul>
 800946a:	4680      	mov	r8, r0
 800946c:	4689      	mov	r9, r1
 800946e:	b964      	cbnz	r4, 800948a <__ieee754_log+0x272>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	4630      	mov	r0, r6
 8009476:	4639      	mov	r1, r7
 8009478:	f7f6 fe76 	bl	8000168 <__aeabi_dsub>
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	4650      	mov	r0, sl
 8009482:	4659      	mov	r1, fp
 8009484:	f7f6 fe70 	bl	8000168 <__aeabi_dsub>
 8009488:	e6d9      	b.n	800923e <__ieee754_log+0x26>
 800948a:	a323      	add	r3, pc, #140	@ (adr r3, 8009518 <__ieee754_log+0x300>)
 800948c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009490:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009494:	f7f7 f820 	bl	80004d8 <__aeabi_dmul>
 8009498:	a321      	add	r3, pc, #132	@ (adr r3, 8009520 <__ieee754_log+0x308>)
 800949a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949e:	4604      	mov	r4, r0
 80094a0:	460d      	mov	r5, r1
 80094a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094a6:	f7f7 f817 	bl	80004d8 <__aeabi_dmul>
 80094aa:	4642      	mov	r2, r8
 80094ac:	464b      	mov	r3, r9
 80094ae:	f7f6 fe5d 	bl	800016c <__adddf3>
 80094b2:	4602      	mov	r2, r0
 80094b4:	460b      	mov	r3, r1
 80094b6:	4630      	mov	r0, r6
 80094b8:	4639      	mov	r1, r7
 80094ba:	f7f6 fe55 	bl	8000168 <__aeabi_dsub>
 80094be:	4652      	mov	r2, sl
 80094c0:	465b      	mov	r3, fp
 80094c2:	f7f6 fe51 	bl	8000168 <__aeabi_dsub>
 80094c6:	4602      	mov	r2, r0
 80094c8:	460b      	mov	r3, r1
 80094ca:	4620      	mov	r0, r4
 80094cc:	4629      	mov	r1, r5
 80094ce:	e7d9      	b.n	8009484 <__ieee754_log+0x26c>
 80094d0:	4602      	mov	r2, r0
 80094d2:	460b      	mov	r3, r1
 80094d4:	4650      	mov	r0, sl
 80094d6:	4659      	mov	r1, fp
 80094d8:	f7f6 fe46 	bl	8000168 <__aeabi_dsub>
 80094dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094e0:	f7f6 fffa 	bl	80004d8 <__aeabi_dmul>
 80094e4:	4606      	mov	r6, r0
 80094e6:	460f      	mov	r7, r1
 80094e8:	2c00      	cmp	r4, #0
 80094ea:	f43f af25 	beq.w	8009338 <__ieee754_log+0x120>
 80094ee:	a30a      	add	r3, pc, #40	@ (adr r3, 8009518 <__ieee754_log+0x300>)
 80094f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094f8:	f7f6 ffee 	bl	80004d8 <__aeabi_dmul>
 80094fc:	a308      	add	r3, pc, #32	@ (adr r3, 8009520 <__ieee754_log+0x308>)
 80094fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009502:	4604      	mov	r4, r0
 8009504:	460d      	mov	r5, r1
 8009506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800950a:	e729      	b.n	8009360 <__ieee754_log+0x148>
 800950c:	2000      	movs	r0, #0
 800950e:	2100      	movs	r1, #0
 8009510:	e695      	b.n	800923e <__ieee754_log+0x26>
 8009512:	bf00      	nop
 8009514:	f3af 8000 	nop.w
 8009518:	fee00000 	.word	0xfee00000
 800951c:	3fe62e42 	.word	0x3fe62e42
 8009520:	35793c76 	.word	0x35793c76
 8009524:	3dea39ef 	.word	0x3dea39ef
 8009528:	55555555 	.word	0x55555555
 800952c:	3fd55555 	.word	0x3fd55555
 8009530:	df3e5244 	.word	0xdf3e5244
 8009534:	3fc2f112 	.word	0x3fc2f112
 8009538:	96cb03de 	.word	0x96cb03de
 800953c:	3fc74664 	.word	0x3fc74664
 8009540:	94229359 	.word	0x94229359
 8009544:	3fd24924 	.word	0x3fd24924
 8009548:	55555593 	.word	0x55555593
 800954c:	3fe55555 	.word	0x3fe55555
 8009550:	d078c69f 	.word	0xd078c69f
 8009554:	3fc39a09 	.word	0x3fc39a09
 8009558:	1d8e78af 	.word	0x1d8e78af
 800955c:	3fcc71c5 	.word	0x3fcc71c5
 8009560:	9997fa04 	.word	0x9997fa04
 8009564:	3fd99999 	.word	0x3fd99999
 8009568:	c3500000 	.word	0xc3500000
 800956c:	43500000 	.word	0x43500000
 8009570:	7fefffff 	.word	0x7fefffff
 8009574:	3ff00000 	.word	0x3ff00000
 8009578:	3fe00000 	.word	0x3fe00000

0800957c <_init>:
 800957c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957e:	bf00      	nop
 8009580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009582:	bc08      	pop	{r3}
 8009584:	469e      	mov	lr, r3
 8009586:	4770      	bx	lr

08009588 <_fini>:
 8009588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958a:	bf00      	nop
 800958c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800958e:	bc08      	pop	{r3}
 8009590:	469e      	mov	lr, r3
 8009592:	4770      	bx	lr
